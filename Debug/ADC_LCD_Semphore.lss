
ADC_LCD_Semphore.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00005d28  00005dbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000049f  0080008e  0080008e  00005dea  2**0
                  ALLOC
  3 .stab         00008220  00000000  00000000  00005dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003f13  00000000  00000000  0000e00c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00011f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0001205f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000121cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00013e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00014d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00015ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00015c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00015e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001666b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_10>
      2c:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 2b 	call	0x569c	; 0x569c <main>
      8a:	0c 94 92 2e 	jmp	0x5d24	; 0x5d24 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3c 2e 	jmp	0x5c78	; 0x5c78 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 58 2e 	jmp	0x5cb0	; 0x5cb0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 48 2e 	jmp	0x5c90	; 0x5c90 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 64 2e 	jmp	0x5cc8	; 0x5cc8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 48 2e 	jmp	0x5c90	; 0x5c90 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 64 2e 	jmp	0x5cc8	; 0x5cc8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3c 2e 	jmp	0x5c78	; 0x5c78 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 58 2e 	jmp	0x5cb0	; 0x5cb0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 48 2e 	jmp	0x5c90	; 0x5c90 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 64 2e 	jmp	0x5cc8	; 0x5cc8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 48 2e 	jmp	0x5c90	; 0x5c90 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 64 2e 	jmp	0x5cc8	; 0x5cc8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 48 2e 	jmp	0x5c90	; 0x5c90 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 64 2e 	jmp	0x5cc8	; 0x5cc8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4c 2e 	jmp	0x5c98	; 0x5c98 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 68 2e 	jmp	0x5cd0	; 0x5cd0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_VidInit>:

void (*TIMER0_CallBack)(void);

/*Timer0 Initialization*/
void TIMER0_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler */
	TCCR0&=0xF8;
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 7f       	andi	r24, 0xF8	; 248
     b5a:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	85 60       	ori	r24, 0x05	; 5
     b68:	8c 93       	st	X, r24
	SET_BIT(TCCR0,4);
#else
#error "PWM Mode is not valid..."
#endif
#elif TIMER0_SET_MODE == TIMER0_FAST_PWM_MODE
	SET_BIT(TCCR0,6);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	8c 93       	st	X, r24
#if TIMER0_SET_PWM_MODE == TIMER0_NON_INVERTING_PWM
	SET_BIT(TCCR0,5);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 62       	ori	r24, 0x20	; 32
     b92:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7e       	andi	r24, 0xEF	; 239
     ba0:	8c 93       	st	X, r24
#endif
#else
#error "TIMER0 Mode is not valid..."
#endif

}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <TIMER0_VidSetPreload>:
/*Set Preload Function*/
void TIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	0f 92       	push	r0
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload;
     bb4:	e2 e5       	ldi	r30, 0x52	; 82
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	80 83       	st	Z, r24
}
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <TIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void TIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8CTCValue;
     bd0:	ec e5       	ldi	r30, 0x5C	; 92
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	80 83       	st	Z, r24
}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <TIMER0_VidOVF_SetCallBack>:
void TIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <TIMER0_VidOVF_SetCallBack+0x6>
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_VidCallBack;
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	90 93 28 05 	sts	0x0528, r25
     bf6:	80 93 27 05 	sts	0x0527, r24
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <TIMER0_VidCTC_SetCallBack>:
void TIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	00 d0       	rcall	.+0      	; 0xc0a <TIMER0_VidCTC_SetCallBack+0x6>
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	9a 83       	std	Y+2, r25	; 0x02
     c10:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_VidCallBack;
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	90 93 28 05 	sts	0x0528, r25
     c1a:	80 93 27 05 	sts	0x0527, r24
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <__vector_11>:
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     c52:	e0 91 27 05 	lds	r30, 0x0527
     c56:	f0 91 28 05 	lds	r31, 0x0528
     c5a:	09 95       	icall
}
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	7f 91       	pop	r23
     c6e:	6f 91       	pop	r22
     c70:	5f 91       	pop	r21
     c72:	4f 91       	pop	r20
     c74:	3f 91       	pop	r19
     c76:	2f 91       	pop	r18
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <__vector_10>:
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     cac:	e0 91 27 05 	lds	r30, 0x0527
     cb0:	f0 91 28 05 	lds	r31, 0x0528
     cb4:	09 95       	icall
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	ff 91       	pop	r31
     cbc:	ef 91       	pop	r30
     cbe:	bf 91       	pop	r27
     cc0:	af 91       	pop	r26
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	7f 91       	pop	r23
     cc8:	6f 91       	pop	r22
     cca:	5f 91       	pop	r21
     ccc:	4f 91       	pop	r20
     cce:	3f 91       	pop	r19
     cd0:	2f 91       	pop	r18
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <MUSART_VidInit>:

#include"MUSART_Private.h"
#include"MUSART_Config.h"
/*USART Initialization*/
void MUSART_VidInit(void)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	0f 92       	push	r0
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Copy_UCSRC=0;
     ce6:	19 82       	std	Y+1, r1	; 0x01
	/*Select USART Mode*/
#if USART_SET_MODE==USART_ASYNCHRONOUS_MODE
	CLR_BIT(LOC_u8Copy_UCSRC,6);
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	8f 7b       	andi	r24, 0xBF	; 191
     cec:	89 83       	std	Y+1, r24	; 0x01
#else
#error"USART Mode Is not valid..."
#endif
/*Parity Mode*/
#if USART_SET_PARITY_MODE==USART_DISABLED_PARITY
	CLR_BIT(LOC_u8Copy_UCSRC,5);
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	8f 7d       	andi	r24, 0xDF	; 223
     cf2:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(LOC_u8Copy_UCSRC,4);
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	8f 7e       	andi	r24, 0xEF	; 239
     cf8:	89 83       	std	Y+1, r24	; 0x01
#else
#error"USART Parity Mode Is not valid..."
#endif
/*Select Stop Bit*/
#if USART_SET_STOP_BIT==USART_STOP_ONE_BIT
	CLR_BIT(LOC_u8Copy_UCSRC,3);
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	87 7f       	andi	r24, 0xF7	; 247
     cfe:	89 83       	std	Y+1, r24	; 0x01
#elif USART_SET_CHR_SIZE==USART_CHR_SIZE_7
	SET_BIT(LOC_u8Copy_UCSRC,2);
	CLR_BIT(LOC_u8Copy_UCSRC,1);
	CLR_BIT(UCSRB,2);
#elif USART_SET_CHR_SIZE==USART_CHR_SIZE_8
	SET_BIT(LOC_u8Copy_UCSRC,2);
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	84 60       	ori	r24, 0x04	; 4
     d04:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(LOC_u8Copy_UCSRC,1);
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	82 60       	ori	r24, 0x02	; 2
     d0a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,2);
     d0c:	aa e2       	ldi	r26, 0x2A	; 42
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ea e2       	ldi	r30, 0x2A	; 42
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	8b 7f       	andi	r24, 0xFB	; 251
     d18:	8c 93       	st	X, r24
	SET_BIT(UCSRB,2);
#else
#error"USART CHR SIZE Is not valid..."
#endif
/*Set LOC_u8Copy_UCSRC Value in UCSRC Register and select UCSRC Register*/
SET_BIT(LOC_u8Copy_UCSRC,7);
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	80 68       	ori	r24, 0x80	; 128
     d1e:	89 83       	std	Y+1, r24	; 0x01
UCSRC=LOC_u8Copy_UCSRC;
     d20:	e0 e4       	ldi	r30, 0x40	; 64
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	80 83       	st	Z, r24
/*Set BuadRate -->9600*/
UBRRL=103;
     d28:	e9 e2       	ldi	r30, 0x29	; 41
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	87 e6       	ldi	r24, 0x67	; 103
     d2e:	80 83       	st	Z, r24
/*Enable To TX and RX*/
SET_BIT(UCSRB,4);
     d30:	aa e2       	ldi	r26, 0x2A	; 42
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	ea e2       	ldi	r30, 0x2A	; 42
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	80 61       	ori	r24, 0x10	; 16
     d3c:	8c 93       	st	X, r24
SET_BIT(UCSRB,3);
     d3e:	aa e2       	ldi	r26, 0x2A	; 42
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	ea e2       	ldi	r30, 0x2A	; 42
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	88 60       	ori	r24, 0x08	; 8
     d4a:	8c 93       	st	X, r24
}
     d4c:	0f 90       	pop	r0
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <MUSART_VidSendChar>:
/*USART Send Data*/
void MUSART_VidSendChar(u8 Copy_u8Data)
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	0f 92       	push	r0
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until Register Empty Flag is set*/
	while(GET_BIT(UCSRA,5)==0);
     d60:	eb e2       	ldi	r30, 0x2B	; 43
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	82 95       	swap	r24
     d68:	86 95       	lsr	r24
     d6a:	87 70       	andi	r24, 0x07	; 7
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	81 70       	andi	r24, 0x01	; 1
     d72:	90 70       	andi	r25, 0x00	; 0
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	a1 f3       	breq	.-24     	; 0xd60 <MUSART_VidSendChar+0xc>
	UDR=Copy_u8Data;
     d78:	ec e2       	ldi	r30, 0x2C	; 44
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	80 83       	st	Z, r24
}
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <MUSART_u8ReceiveData>:
/*USART Receive Data*/
u8 MUSART_u8ReceiveData(void)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
	/*Wait until Receive Complete Flag is set*/
	while(GET_BIT(UCSRA,7)==0);
     d90:	eb e2       	ldi	r30, 0x2B	; 43
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	88 23       	and	r24, r24
     d98:	dc f7       	brge	.-10     	; 0xd90 <MUSART_u8ReceiveData+0x8>
	return UDR;
     d9a:	ec e2       	ldi	r30, 0x2C	; 44
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
}
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <MUSART_VidSendString>:
void MUSART_VidSendString(u8 *Copy_u8Data)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	00 d0       	rcall	.+0      	; 0xdac <MUSART_VidSendString+0x6>
     dac:	0f 92       	push	r0
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	9b 83       	std	Y+3, r25	; 0x03
     db4:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_CharCount=0;
     db6:	19 82       	std	Y+1, r1	; 0x01
     db8:	0e c0       	rjmp	.+28     	; 0xdd6 <MUSART_VidSendString+0x30>
	while(Copy_u8Data[LOC_CharCount]!=NULL)
	{
		MUSART_VidSendChar(Copy_u8Data[LOC_CharCount]);
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	9b 81       	ldd	r25, Y+3	; 0x03
     dc4:	fc 01       	movw	r30, r24
     dc6:	e2 0f       	add	r30, r18
     dc8:	f3 1f       	adc	r31, r19
     dca:	80 81       	ld	r24, Z
     dcc:	0e 94 aa 06 	call	0xd54	; 0xd54 <MUSART_VidSendChar>
		LOC_CharCount++;
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	8f 5f       	subi	r24, 0xFF	; 255
     dd4:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}
void MUSART_VidSendString(u8 *Copy_u8Data)
{
	u8 LOC_CharCount=0;
	while(Copy_u8Data[LOC_CharCount]!=NULL)
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	9b 81       	ldd	r25, Y+3	; 0x03
     de0:	fc 01       	movw	r30, r24
     de2:	e2 0f       	add	r30, r18
     de4:	f3 1f       	adc	r31, r19
     de6:	80 81       	ld	r24, Z
     de8:	88 23       	and	r24, r24
     dea:	39 f7       	brne	.-50     	; 0xdba <MUSART_VidSendString+0x14>
	{
		MUSART_VidSendChar(Copy_u8Data[LOC_CharCount]);
		LOC_CharCount++;
	}
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <MUSART_VidReceiveString>:
void MUSART_VidReceiveString(u8 *Copy_u8Data)
{
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	00 d0       	rcall	.+0      	; 0xe02 <MUSART_VidReceiveString+0xa>
     e02:	0f 92       	push	r0
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	9b 83       	std	Y+3, r25	; 0x03
     e0a:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_CharCount=0;
     e0c:	19 82       	std	Y+1, r1	; 0x01
     e0e:	0f c0       	rjmp	.+30     	; 0xe2e <MUSART_VidReceiveString+0x36>
	while(Copy_u8Data[LOC_CharCount]!='\n')
	{
	Copy_u8Data[LOC_CharCount]=MUSART_u8ReceiveData();
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	8c 01       	movw	r16, r24
     e1c:	02 0f       	add	r16, r18
     e1e:	13 1f       	adc	r17, r19
     e20:	0e 94 c4 06 	call	0xd88	; 0xd88 <MUSART_u8ReceiveData>
     e24:	f8 01       	movw	r30, r16
     e26:	80 83       	st	Z, r24
	LOC_CharCount++;
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	89 83       	std	Y+1, r24	; 0x01
	}
}
void MUSART_VidReceiveString(u8 *Copy_u8Data)
{
	u8 LOC_CharCount=0;
	while(Copy_u8Data[LOC_CharCount]!='\n')
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	9b 81       	ldd	r25, Y+3	; 0x03
     e38:	fc 01       	movw	r30, r24
     e3a:	e2 0f       	add	r30, r18
     e3c:	f3 1f       	adc	r31, r19
     e3e:	80 81       	ld	r24, Z
     e40:	8a 30       	cpi	r24, 0x0A	; 10
     e42:	31 f7       	brne	.-52     	; 0xe10 <MUSART_VidReceiveString+0x18>
	{
	Copy_u8Data[LOC_CharCount]=MUSART_u8ReceiveData();
	LOC_CharCount++;
	}
}
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <MTWI_VidInitMaster>:
#include"MTWI_Config.h"
#include"MTWI_Interface.h"

/*TWI Initialization as a master with set Master Address*/
void MTWI_VidInitMaster(u8 Copy_u8Address)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	0f 92       	push	r0
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,6);
     e60:	a6 e5       	ldi	r26, 0x56	; 86
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e5       	ldi	r30, 0x56	; 86
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 64       	ori	r24, 0x40	; 64
     e6c:	8c 93       	st	X, r24
	/*Set SCL Frequency To 400KHz,with 16Mhz system frequency*/
	/*1- Set TWBR=12*/
	TWBR=12;
     e6e:	e0 e2       	ldi	r30, 0x20	; 32
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	8c e0       	ldi	r24, 0x0C	; 12
     e74:	80 83       	st	Z, r24
	/*2- Clear The prescaler bits (TWPS)*/
	CLR_BIT(TWSR,1);
     e76:	a1 e2       	ldi	r26, 0x21	; 33
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e1 e2       	ldi	r30, 0x21	; 33
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	8d 7f       	andi	r24, 0xFD	; 253
     e82:	8c 93       	st	X, r24
	CLR_BIT(TWSR,0);
     e84:	a1 e2       	ldi	r26, 0x21	; 33
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e1 e2       	ldi	r30, 0x21	; 33
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	8e 7f       	andi	r24, 0xFE	; 254
     e90:	8c 93       	st	X, r24
	/*Check if master will be addressed*/
	if(Copy_u8Address!=0)
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	88 23       	and	r24, r24
     e96:	29 f0       	breq	.+10     	; 0xea2 <MTWI_VidInitMaster+0x4e>
	{
		/*Set the required Address in the 7MSB Of TWAR*/
		TWAR=Copy_u8Address<<1;
     e98:	e2 e2       	ldi	r30, 0x22	; 34
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	88 0f       	add	r24, r24
     ea0:	80 83       	st	Z, r24
	else
	{
		/*Do Nothing*/
	}
	/*Enable TWI*/
	SET_BIT(TWCR,2);
     ea2:	a6 e5       	ldi	r26, 0x56	; 86
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e6 e5       	ldi	r30, 0x56	; 86
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	84 60       	ori	r24, 0x04	; 4
     eae:	8c 93       	st	X, r24
}
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <MTWI_VidInitSlave>:
/*TWI Initialization as a Slave with set Master Address*/
void MTWI_VidInitSlave(u8 Copy_u8Address)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	0f 92       	push	r0
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,6);
     ec4:	a6 e5       	ldi	r26, 0x56	; 86
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e6 e5       	ldi	r30, 0x56	; 86
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 64       	ori	r24, 0x40	; 64
     ed0:	8c 93       	st	X, r24
	/*Set the required Address in the 7MSB Of TWAR*/
	TWAR=Copy_u8Address<<1;
     ed2:	e2 e2       	ldi	r30, 0x22	; 34
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	88 0f       	add	r24, r24
     eda:	80 83       	st	Z, r24
	/*Enable TWI*/
	SET_BIT(TWCR,2);
     edc:	a6 e5       	ldi	r26, 0x56	; 86
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e6 e5       	ldi	r30, 0x56	; 86
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	8c 93       	st	X, r24
}
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <MTWI_SendStartCondition>:

TWI_ErrStatus MTWI_SendStartCondition(void)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	0f 92       	push	r0
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error=NoError;
     efc:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition*/
	SET_BIT(TWCR,5);
     efe:	a6 e5       	ldi	r26, 0x56	; 86
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e6 e5       	ldi	r30, 0x56	; 86
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 62       	ori	r24, 0x20	; 32
     f0a:	8c 93       	st	X, r24
	/*Clear the interrupt flag To start the previous operation*/
	SET_BIT(TWCR,7);
     f0c:	a6 e5       	ldi	r26, 0x56	; 86
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e6 e5       	ldi	r30, 0x56	; 86
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 68       	ori	r24, 0x80	; 128
     f18:	8c 93       	st	X, r24
	/*Wait until the operation finished and the flag is raised*/
	while(GET_BIT(TWCR,7)==0);
     f1a:	e6 e5       	ldi	r30, 0x56	; 86
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	88 23       	and	r24, r24
     f22:	dc f7       	brge	.-10     	; 0xf1a <MTWI_SendStartCondition+0x28>
	/*Check Operation Status*/
	if((TWSR&0xF8)!=START_ACK)
     f24:	e1 e2       	ldi	r30, 0x21	; 33
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	88 7f       	andi	r24, 0xF8	; 248
     f30:	90 70       	andi	r25, 0x00	; 0
     f32:	88 30       	cpi	r24, 0x08	; 8
     f34:	91 05       	cpc	r25, r1
     f36:	11 f0       	breq	.+4      	; 0xf3c <MTWI_SendStartCondition+0x4a>
	{
		Local_Error=StartConditionErr;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_Error;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <MTWI_SendRepeatedStart>:
TWI_ErrStatus MTWI_SendRepeatedStart(void)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error=NoError;
     f50:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition*/
	SET_BIT(TWCR,5);
     f52:	a6 e5       	ldi	r26, 0x56	; 86
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e6 e5       	ldi	r30, 0x56	; 86
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 62       	ori	r24, 0x20	; 32
     f5e:	8c 93       	st	X, r24
	/*Clear the interrupt flag To start the previous operation*/
	SET_BIT(TWCR,7);
     f60:	a6 e5       	ldi	r26, 0x56	; 86
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e6 e5       	ldi	r30, 0x56	; 86
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 68       	ori	r24, 0x80	; 128
     f6c:	8c 93       	st	X, r24
	/*Wait until the operation finished and the flag is raised*/
	while(GET_BIT(TWCR,7)==0);
     f6e:	e6 e5       	ldi	r30, 0x56	; 86
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	88 23       	and	r24, r24
     f76:	dc f7       	brge	.-10     	; 0xf6e <MTWI_SendRepeatedStart+0x28>
	/*Check Operation Status*/
	if((TWSR&0xF8)!=REP_START_ACK)
     f78:	e1 e2       	ldi	r30, 0x21	; 33
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	88 7f       	andi	r24, 0xF8	; 248
     f84:	90 70       	andi	r25, 0x00	; 0
     f86:	80 31       	cpi	r24, 0x10	; 16
     f88:	91 05       	cpc	r25, r1
     f8a:	11 f0       	breq	.+4      	; 0xf90 <MTWI_SendRepeatedStart+0x4a>
	{
		Local_Error=RepeatedStartErr;
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_Error;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
}
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <MTWI_SendSlaveAddresWithWrite>:

TWI_ErrStatus MTWI_SendSlaveAddresWithWrite(u8 Copy_u8SlaveAddress)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <MTWI_SendSlaveAddresWithWrite+0x6>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error=NoError;
     fa6:	19 82       	std	Y+1, r1	; 0x01

	/*Send 7bits Slave Address To the bus*/
	TWDR=Copy_u8SlaveAddress<<1;
     fa8:	e3 e2       	ldi	r30, 0x23	; 35
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	88 0f       	add	r24, r24
     fb0:	80 83       	st	Z, r24
	/*Set the Write request in the LSB in the data Register*/
	CLR_BIT(TWDR,0);
     fb2:	a3 e2       	ldi	r26, 0x23	; 35
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e3 e2       	ldi	r30, 0x23	; 35
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8e 7f       	andi	r24, 0xFE	; 254
     fbe:	8c 93       	st	X, r24
	/*Clear Start Condition Bit*/
	CLR_BIT(TWCR,5);
     fc0:	a6 e5       	ldi	r26, 0x56	; 86
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e6 e5       	ldi	r30, 0x56	; 86
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 7d       	andi	r24, 0xDF	; 223
     fcc:	8c 93       	st	X, r24
	/*Clear the interrupt flag To start the previous operation*/
	SET_BIT(TWCR,7);
     fce:	a6 e5       	ldi	r26, 0x56	; 86
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e6 e5       	ldi	r30, 0x56	; 86
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 68       	ori	r24, 0x80	; 128
     fda:	8c 93       	st	X, r24
	/*Wait until the operation finished and the flag is raised*/
	while(GET_BIT(TWCR,7)==0);
     fdc:	e6 e5       	ldi	r30, 0x56	; 86
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	88 23       	and	r24, r24
     fe4:	dc f7       	brge	.-10     	; 0xfdc <MTWI_SendSlaveAddresWithWrite+0x42>
	/*Check Operation Status*/
	if((TWSR&0xF8)!=SLAVE_ADD_AND_WR_ACK)
     fe6:	e1 e2       	ldi	r30, 0x21	; 33
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	88 7f       	andi	r24, 0xF8	; 248
     ff2:	90 70       	andi	r25, 0x00	; 0
     ff4:	88 31       	cpi	r24, 0x18	; 24
     ff6:	91 05       	cpc	r25, r1
     ff8:	11 f0       	breq	.+4      	; 0xffe <MTWI_SendSlaveAddresWithWrite+0x64>
	{
		Local_Error=SlaveAddressWithWriteErr;
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_Error;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <MTWI_SendSlaveAddresWithRead>:
TWI_ErrStatus MTWI_SendSlaveAddresWithRead(u8 Copy_u8SlaveAddress)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <MTWI_SendSlaveAddresWithRead+0x6>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error=NoError;
    1016:	19 82       	std	Y+1, r1	; 0x01

	/*Send 7bits Slave Address To the bus*/
	TWDR=Copy_u8SlaveAddress<<1;
    1018:	e3 e2       	ldi	r30, 0x23	; 35
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	88 0f       	add	r24, r24
    1020:	80 83       	st	Z, r24
	/*Set the Read request in the LSB in the data Register*/
	SET_BIT(TWDR,0);
    1022:	a3 e2       	ldi	r26, 0x23	; 35
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e3 e2       	ldi	r30, 0x23	; 35
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	81 60       	ori	r24, 0x01	; 1
    102e:	8c 93       	st	X, r24
	/*Clear Start Condition Bit*/
	CLR_BIT(TWCR,5);
    1030:	a6 e5       	ldi	r26, 0x56	; 86
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e6 e5       	ldi	r30, 0x56	; 86
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8f 7d       	andi	r24, 0xDF	; 223
    103c:	8c 93       	st	X, r24
	/*Clear the interrupt flag To start the previous operation*/
	SET_BIT(TWCR,7);
    103e:	a6 e5       	ldi	r26, 0x56	; 86
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e6 e5       	ldi	r30, 0x56	; 86
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	80 68       	ori	r24, 0x80	; 128
    104a:	8c 93       	st	X, r24
	/*Wait until the operation finished and the flag is raised*/
	while(GET_BIT(TWCR,7)==0);
    104c:	e6 e5       	ldi	r30, 0x56	; 86
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	88 23       	and	r24, r24
    1054:	dc f7       	brge	.-10     	; 0x104c <MTWI_SendSlaveAddresWithRead+0x42>
	/*Check Operation Status*/
	if((TWSR&0xF8)!=SLAVE_ADD_AND_RD_ACK)
    1056:	e1 e2       	ldi	r30, 0x21	; 33
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	88 7f       	andi	r24, 0xF8	; 248
    1062:	90 70       	andi	r25, 0x00	; 0
    1064:	80 34       	cpi	r24, 0x40	; 64
    1066:	91 05       	cpc	r25, r1
    1068:	11 f0       	breq	.+4      	; 0x106e <MTWI_SendSlaveAddresWithRead+0x64>
	{
		Local_Error=SlaveAddressWithReadErr;
    106a:	84 e0       	ldi	r24, 0x04	; 4
    106c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_Error;
    106e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <MTWI_MasterWriteDataByte>:

TWI_ErrStatus MTWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <MTWI_MasterWriteDataByte+0x6>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error=NoError;
    1086:	19 82       	std	Y+1, r1	; 0x01

	/*Send 8bits data To the bus*/
	TWDR=Copy_u8DataByte;
    1088:	e3 e2       	ldi	r30, 0x23	; 35
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	80 83       	st	Z, r24
	/*Clear the interrupt flag To start the previous operation*/
	SET_BIT(TWCR,7);
    1090:	a6 e5       	ldi	r26, 0x56	; 86
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e6 e5       	ldi	r30, 0x56	; 86
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	80 68       	ori	r24, 0x80	; 128
    109c:	8c 93       	st	X, r24
	/*Wait until the operation finished and the flag is raised*/
	while(GET_BIT(TWCR,7)==0);
    109e:	e6 e5       	ldi	r30, 0x56	; 86
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	88 23       	and	r24, r24
    10a6:	dc f7       	brge	.-10     	; 0x109e <MTWI_MasterWriteDataByte+0x24>
	/*Check Operation Status*/
	if((TWSR&0xF8)!=MSTR_WR_BYTE_ACK)
    10a8:	e1 e2       	ldi	r30, 0x21	; 33
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	88 7f       	andi	r24, 0xF8	; 248
    10b4:	90 70       	andi	r25, 0x00	; 0
    10b6:	88 32       	cpi	r24, 0x28	; 40
    10b8:	91 05       	cpc	r25, r1
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <MTWI_MasterWriteDataByte+0x46>
	{
		Local_Error=MasterWriteByteErr;
    10bc:	85 e0       	ldi	r24, 0x05	; 5
    10be:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_Error;
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <MTWI_MasterReadDataByte>:
TWI_ErrStatus MTWI_MasterReadDataByte(u8* Copy_pu8DataByte)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <MTWI_MasterReadDataByte+0x6>
    10d2:	0f 92       	push	r0
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	9b 83       	std	Y+3, r25	; 0x03
    10da:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error=NoError;
    10dc:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the interrupt flag To start the previous operation*/
	SET_BIT(TWCR,7);
    10de:	a6 e5       	ldi	r26, 0x56	; 86
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e6 e5       	ldi	r30, 0x56	; 86
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 68       	ori	r24, 0x80	; 128
    10ea:	8c 93       	st	X, r24
	/*Wait until the operation finished and the flag is raised*/
	while(GET_BIT(TWCR,7)==0);
    10ec:	e6 e5       	ldi	r30, 0x56	; 86
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	88 23       	and	r24, r24
    10f4:	dc f7       	brge	.-10     	; 0x10ec <MTWI_MasterReadDataByte+0x20>
	/*Check Operation Status*/
	if((TWSR&0xF8)!=MSTR_RD_BYTE_ACK)
    10f6:	e1 e2       	ldi	r30, 0x21	; 33
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 7f       	andi	r24, 0xF8	; 248
    1102:	90 70       	andi	r25, 0x00	; 0
    1104:	80 35       	cpi	r24, 0x50	; 80
    1106:	91 05       	cpc	r25, r1
    1108:	19 f0       	breq	.+6      	; 0x1110 <MTWI_MasterReadDataByte+0x44>
	{
		Local_Error=MasterReadByteErr;
    110a:	86 e0       	ldi	r24, 0x06	; 6
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	06 c0       	rjmp	.+12     	; 0x111c <MTWI_MasterReadDataByte+0x50>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte=TWDR;
    1110:	e3 e2       	ldi	r30, 0x23	; 35
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	ea 81       	ldd	r30, Y+2	; 0x02
    1118:	fb 81       	ldd	r31, Y+3	; 0x03
    111a:	80 83       	st	Z, r24
	}
	return Local_Error;
    111c:	89 81       	ldd	r24, Y+1	; 0x01
}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <MTWI_SendStopCondition>:

void MTWI_SendStopCondition(void)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
	/*Sent stop condition on the bus*/
	SET_BIT(TWCR,4);
    1132:	a6 e5       	ldi	r26, 0x56	; 86
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e6 e5       	ldi	r30, 0x56	; 86
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 61       	ori	r24, 0x10	; 16
    113e:	8c 93       	st	X, r24
	/*Clear the interrupt flag To start the previous operation*/
	SET_BIT(TWCR,7);
    1140:	a6 e5       	ldi	r26, 0x56	; 86
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e6 e5       	ldi	r30, 0x56	; 86
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	80 68       	ori	r24, 0x80	; 128
    114c:	8c 93       	st	X, r24
}
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <MSPI_VidMaster_Init>:
#include"..\..\LIB\LBIT_MATH.h"
#include"MSPI_Private.h"
#include"MSPI_Config.h"
/*SPI Master Initialization*/
void MSPI_VidMaster_Init(void)
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Ordered*/
#if MSPI_SET_DATA_ORDERED==MSPI_DATA_ORDERED_LSB
	SET_BIT(SPCR,5);
    115c:	ad e2       	ldi	r26, 0x2D	; 45
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ed e2       	ldi	r30, 0x2D	; 45
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	80 62       	ori	r24, 0x20	; 32
    1168:	8c 93       	st	X, r24
#else
#error"SPI Data Ordered option is not valid..."
#endif
	/*Set Clock Polarity*/
#if MSPI_SET_CLOCK_POLARITY==MSPI_CPOL_LEADING_RISING
	CLR_BIT(SPCR,3);
    116a:	ad e2       	ldi	r26, 0x2D	; 45
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ed e2       	ldi	r30, 0x2D	; 45
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	87 7f       	andi	r24, 0xF7	; 247
    1176:	8c 93       	st	X, r24
#endif
	/*Set Clock Phase*/
#if MSPI_SET_CLOCK_PHASE==MSPI_CPHA_LEADING_SAMPLE
	CLR_BIT(SPCR,2);
#elif MSPI_SET_CLOCK_PHASE==MSPI_CPHA_LEADING_SETUP
	SET_BIT(SPCR,2);
    1178:	ad e2       	ldi	r26, 0x2D	; 45
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ed e2       	ldi	r30, 0x2D	; 45
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	84 60       	ori	r24, 0x04	; 4
    1184:	8c 93       	st	X, r24
#else
#error"SPI Data Clock Phase option is not valid..."
#endif
	/*Set Double SPI Speed Bit*/
#if MSPI_SET_DOUBLE_SPEED==MSPI_NO_DOUBLE_SPEED
	CLR_BIT(SPSR,0);
    1186:	ae e2       	ldi	r26, 0x2E	; 46
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ee e2       	ldi	r30, 0x2E	; 46
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8e 7f       	andi	r24, 0xFE	; 254
    1192:	8c 93       	st	X, r24
#endif
	/*Set SPI Interrupt Enable*/
#if MSPI_SET_SPI_INTERRUPT_ENABLE ==MSPI_SPI_INTERRUPT_ENABLE
	SET_BIT(SPCR,7);
#elif MSPI_SET_SPI_INTERRUPT_ENABLE ==MSPI_SPI_INTERRUPT_DISABLE
	CLR_BIT(SPCR,7);
    1194:	ad e2       	ldi	r26, 0x2D	; 45
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ed e2       	ldi	r30, 0x2D	; 45
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 77       	andi	r24, 0x7F	; 127
    11a0:	8c 93       	st	X, r24
#else
#error"SPI Interrupt Enable option is not valid..."
#endif
	/*set SPI Clock Rate Select*/
	SPCR&=MSPI_BIT_MASKING;
    11a2:	ad e2       	ldi	r26, 0x2D	; 45
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ed e2       	ldi	r30, 0x2D	; 45
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8c 7f       	andi	r24, 0xFC	; 252
    11ae:	8c 93       	st	X, r24
	SPCR|=MSPI_SET_CLOCK_RATE;
    11b0:	ad e2       	ldi	r26, 0x2D	; 45
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ed e2       	ldi	r30, 0x2D	; 45
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8c 93       	st	X, r24
	/*Set Master Mode*/
	SET_BIT(SPCR,4);
    11bc:	ad e2       	ldi	r26, 0x2D	; 45
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	ed e2       	ldi	r30, 0x2D	; 45
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	80 61       	ori	r24, 0x10	; 16
    11c8:	8c 93       	st	X, r24
	/*SPI Enable*/
	SET_BIT(SPCR,6);
    11ca:	ad e2       	ldi	r26, 0x2D	; 45
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	ed e2       	ldi	r30, 0x2D	; 45
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	80 64       	ori	r24, 0x40	; 64
    11d6:	8c 93       	st	X, r24
}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <MSPI_VidSlave_Init>:
/*SPI Slave Initialization*/
void MSPI_VidSlave_Init(void)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Ordered*/
#if MSPI_SET_DATA_ORDERED==MSPI_DATA_ORDERED_LSB
	SET_BIT(SPCR,5);
    11e6:	ad e2       	ldi	r26, 0x2D	; 45
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ed e2       	ldi	r30, 0x2D	; 45
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	80 62       	ori	r24, 0x20	; 32
    11f2:	8c 93       	st	X, r24
#else
#error"SPI Data Ordered option is not valid..."
#endif
	/*Set Clock Polarity*/
#if MSPI_SET_CLOCK_POLARITY==MSPI_CPOL_LEADING_RISING
	CLR_BIT(SPCR,3);
    11f4:	ad e2       	ldi	r26, 0x2D	; 45
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	ed e2       	ldi	r30, 0x2D	; 45
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	87 7f       	andi	r24, 0xF7	; 247
    1200:	8c 93       	st	X, r24
#endif
	/*Set Clock Phase*/
#if MSPI_SET_CLOCK_PHASE==MSPI_CPHA_LEADING_SAMPLE
	CLR_BIT(SPCR,2);
#elif MSPI_SET_CLOCK_PHASE==MSPI_CPHA_LEADING_SETUP
	SET_BIT(SPCR,2);
    1202:	ad e2       	ldi	r26, 0x2D	; 45
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	ed e2       	ldi	r30, 0x2D	; 45
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	84 60       	ori	r24, 0x04	; 4
    120e:	8c 93       	st	X, r24
#endif
	/*Set SPI Interrupt Enable*/
#if MSPI_SET_SPI_INTERRUPT_ENABLE ==MSPI_SPI_INTERRUPT_ENABLE
	SET_BIT(SPCR,7);
#elif MSPI_SET_SPI_INTERRUPT_ENABLE ==MSPI_SPI_INTERRUPT_DISABLE
	CLR_BIT(SPCR,7);
    1210:	ad e2       	ldi	r26, 0x2D	; 45
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ed e2       	ldi	r30, 0x2D	; 45
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8f 77       	andi	r24, 0x7F	; 127
    121c:	8c 93       	st	X, r24
#else
#error"SPI Interrupt Enable option is not valid..."
#endif

	/*Set Slave Mode*/
	CLR_BIT(SPCR,4);
    121e:	ad e2       	ldi	r26, 0x2D	; 45
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ed e2       	ldi	r30, 0x2D	; 45
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8f 7e       	andi	r24, 0xEF	; 239
    122a:	8c 93       	st	X, r24
	/*SPI Enable*/
	SET_BIT(SPCR,6);
    122c:	ad e2       	ldi	r26, 0x2D	; 45
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ed e2       	ldi	r30, 0x2D	; 45
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	80 64       	ori	r24, 0x40	; 64
    1238:	8c 93       	st	X, r24
}
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <MSPI_u8Send_Receive_Char>:
/*SPI Send and Receive Char*/
u8 MSPI_u8Send_Receive_Char(u8 Copy_u8Char)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	0f 92       	push	r0
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	89 83       	std	Y+1, r24	; 0x01
	/*Send Char*/
	SPDR=Copy_u8Char;
    124c:	ef e2       	ldi	r30, 0x2F	; 47
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	80 83       	st	Z, r24
	/*wait on SPI Interrupt Flag is set to one*/
	while(GET_BIT(SPSR,7)==0);
    1254:	ee e2       	ldi	r30, 0x2E	; 46
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	88 23       	and	r24, r24
    125c:	dc f7       	brge	.-10     	; 0x1254 <MSPI_u8Send_Receive_Char+0x14>
	return SPDR;
    125e:	ef e2       	ldi	r30, 0x2F	; 47
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
}
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1274:	af e5       	ldi	r26, 0x5F	; 95
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ef e5       	ldi	r30, 0x5F	; 95
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	80 68       	ori	r24, 0x80	; 128
    1280:	8c 93       	st	X, r24
}
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1290:	af e5       	ldi	r26, 0x5F	; 95
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	ef e5       	ldi	r30, 0x5F	; 95
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	8f 77       	andi	r24, 0x7F	; 127
    129c:	8c 93       	st	X, r24
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8  Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <MDIO_Error_State_SetPinDirection+0x6>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <MDIO_Error_State_SetPinDirection+0x8>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <MDIO_Error_State_SetPinDirection+0xa>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    12b4:	6b 83       	std	Y+3, r22	; 0x03
    12b6:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	88 30       	cpi	r24, 0x08	; 8
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <MDIO_Error_State_SetPinDirection+0x20>
    12c2:	e8 c0       	rjmp	.+464    	; 0x1494 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch(Copy_u8PortNumber)
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3e 83       	std	Y+6, r19	; 0x06
    12cc:	2d 83       	std	Y+5, r18	; 0x05
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <MDIO_Error_State_SetPinDirection+0x36>
    12d8:	48 c0       	rjmp	.+144    	; 0x136a <MDIO_Error_State_SetPinDirection+0xc6>
    12da:	2d 81       	ldd	r18, Y+5	; 0x05
    12dc:	3e 81       	ldd	r19, Y+6	; 0x06
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	2c f4       	brge	.+10     	; 0x12ee <MDIO_Error_State_SetPinDirection+0x4a>
    12e4:	8d 81       	ldd	r24, Y+5	; 0x05
    12e6:	9e 81       	ldd	r25, Y+6	; 0x06
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	71 f0       	breq	.+28     	; 0x1308 <MDIO_Error_State_SetPinDirection+0x64>
    12ec:	d1 c0       	rjmp	.+418    	; 0x1490 <MDIO_Error_State_SetPinDirection+0x1ec>
    12ee:	2d 81       	ldd	r18, Y+5	; 0x05
    12f0:	3e 81       	ldd	r19, Y+6	; 0x06
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <MDIO_Error_State_SetPinDirection+0x56>
    12f8:	69 c0       	rjmp	.+210    	; 0x13cc <MDIO_Error_State_SetPinDirection+0x128>
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	91 05       	cpc	r25, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <MDIO_Error_State_SetPinDirection+0x62>
    1304:	94 c0       	rjmp	.+296    	; 0x142e <MDIO_Error_State_SetPinDirection+0x18a>
    1306:	c4 c0       	rjmp	.+392    	; 0x1490 <MDIO_Error_State_SetPinDirection+0x1ec>
		{
		case MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	a1 f4       	brne	.+40     	; 0x1336 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    130e:	aa e3       	ldi	r26, 0x3A	; 58
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ea e3       	ldi	r30, 0x3A	; 58
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <MDIO_Error_State_SetPinDirection+0x88>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <MDIO_Error_State_SetPinDirection+0x84>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	b0 c0       	rjmp	.+352    	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	88 23       	and	r24, r24
    133a:	a9 f4       	brne	.+42     	; 0x1366 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    133c:	aa e3       	ldi	r26, 0x3A	; 58
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	ea e3       	ldi	r30, 0x3A	; 58
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	48 2f       	mov	r20, r24
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <MDIO_Error_State_SetPinDirection+0xb6>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <MDIO_Error_State_SetPinDirection+0xb2>
    135e:	80 95       	com	r24
    1360:	84 23       	and	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	98 c0       	rjmp	.+304    	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1366:	19 82       	std	Y+1, r1	; 0x01
    1368:	96 c0       	rjmp	.+300    	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	a1 f4       	brne	.+40     	; 0x1398 <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    1370:	a7 e3       	ldi	r26, 0x37	; 55
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e7 e3       	ldi	r30, 0x37	; 55
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <MDIO_Error_State_SetPinDirection+0xea>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <MDIO_Error_State_SetPinDirection+0xe6>
    1392:	84 2b       	or	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	7f c0       	rjmp	.+254    	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	88 23       	and	r24, r24
    139c:	a9 f4       	brne	.+42     	; 0x13c8 <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    139e:	a7 e3       	ldi	r26, 0x37	; 55
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e7 e3       	ldi	r30, 0x37	; 55
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <MDIO_Error_State_SetPinDirection+0x118>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <MDIO_Error_State_SetPinDirection+0x114>
    13c0:	80 95       	com	r24
    13c2:	84 23       	and	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	67 c0       	rjmp	.+206    	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    13c8:	19 82       	std	Y+1, r1	; 0x01
    13ca:	65 c0       	rjmp	.+202    	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	a1 f4       	brne	.+40     	; 0x13fa <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    13d2:	a4 e3       	ldi	r26, 0x34	; 52
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e4 e3       	ldi	r30, 0x34	; 52
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <MDIO_Error_State_SetPinDirection+0x14c>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <MDIO_Error_State_SetPinDirection+0x148>
    13f4:	84 2b       	or	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	4e c0       	rjmp	.+156    	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	88 23       	and	r24, r24
    13fe:	a9 f4       	brne	.+42     	; 0x142a <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    1400:	a4 e3       	ldi	r26, 0x34	; 52
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e4 e3       	ldi	r30, 0x34	; 52
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <MDIO_Error_State_SetPinDirection+0x17a>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <MDIO_Error_State_SetPinDirection+0x176>
    1422:	80 95       	com	r24
    1424:	84 23       	and	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	36 c0       	rjmp	.+108    	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    142a:	19 82       	std	Y+1, r1	; 0x01
    142c:	34 c0       	rjmp	.+104    	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    142e:	8c 81       	ldd	r24, Y+4	; 0x04
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	a1 f4       	brne	.+40     	; 0x145c <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    1434:	a1 e3       	ldi	r26, 0x31	; 49
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e1 e3       	ldi	r30, 0x31	; 49
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <MDIO_Error_State_SetPinDirection+0x1ae>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <MDIO_Error_State_SetPinDirection+0x1aa>
    1456:	84 2b       	or	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	1d c0       	rjmp	.+58     	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	88 23       	and	r24, r24
    1460:	a9 f4       	brne	.+42     	; 0x148c <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    1462:	a1 e3       	ldi	r26, 0x31	; 49
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e1 e3       	ldi	r30, 0x31	; 49
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <MDIO_Error_State_SetPinDirection+0x1dc>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <MDIO_Error_State_SetPinDirection+0x1d8>
    1484:	80 95       	com	r24
    1486:	84 23       	and	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	05 c0       	rjmp	.+10     	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    148c:	19 82       	std	Y+1, r1	; 0x01
    148e:	03 c0       	rjmp	.+6      	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1490:	19 82       	std	Y+1, r1	; 0x01
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <MDIO_Error_State_SetPinDirection+0x1f2>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1494:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    1496:	89 81       	ldd	r24, Y+1	; 0x01
}
    1498:	26 96       	adiw	r28, 0x06	; 6
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <MDIO_Error_State_SetPortDirection>:
/*Set Port Direction Function */
Error_State MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <MDIO_Error_State_SetPortDirection+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <MDIO_Error_State_SetPortDirection+0x8>
    14b2:	0f 92       	push	r0
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	8f 3f       	cpi	r24, 0xFF	; 255
    14c4:	19 f0       	breq	.+6      	; 0x14cc <MDIO_Error_State_SetPortDirection+0x22>
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	88 23       	and	r24, r24
    14ca:	a9 f5       	brne	.+106    	; 0x1536 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3d 83       	std	Y+5, r19	; 0x05
    14d4:	2c 83       	std	Y+4, r18	; 0x04
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	d1 f0       	breq	.+52     	; 0x1514 <MDIO_Error_State_SetPortDirection+0x6a>
    14e0:	2c 81       	ldd	r18, Y+4	; 0x04
    14e2:	3d 81       	ldd	r19, Y+5	; 0x05
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <MDIO_Error_State_SetPortDirection+0x4a>
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	61 f0       	breq	.+24     	; 0x150a <MDIO_Error_State_SetPortDirection+0x60>
    14f2:	1f c0       	rjmp	.+62     	; 0x1532 <MDIO_Error_State_SetPortDirection+0x88>
    14f4:	2c 81       	ldd	r18, Y+4	; 0x04
    14f6:	3d 81       	ldd	r19, Y+5	; 0x05
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	81 f0       	breq	.+32     	; 0x151e <MDIO_Error_State_SetPortDirection+0x74>
    14fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1500:	9d 81       	ldd	r25, Y+5	; 0x05
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	81 f0       	breq	.+32     	; 0x1528 <MDIO_Error_State_SetPortDirection+0x7e>
    1508:	14 c0       	rjmp	.+40     	; 0x1532 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA=Copy_u8PortDirection;
    150a:	ea e3       	ldi	r30, 0x3A	; 58
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	80 83       	st	Z, r24
    1512:	12 c0       	rjmp	.+36     	; 0x1538 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB=Copy_u8PortDirection;
    1514:	e7 e3       	ldi	r30, 0x37	; 55
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	80 83       	st	Z, r24
    151c:	0d c0       	rjmp	.+26     	; 0x1538 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC=Copy_u8PortDirection;
    151e:	e4 e3       	ldi	r30, 0x34	; 52
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	80 83       	st	Z, r24
    1526:	08 c0       	rjmp	.+16     	; 0x1538 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD=Copy_u8PortDirection;
    1528:	e1 e3       	ldi	r30, 0x31	; 49
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	80 83       	st	Z, r24
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1532:	19 82       	std	Y+1, r1	; 0x01
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1536:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1538:	89 81       	ldd	r24, Y+1	; 0x01
}
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	00 d0       	rcall	.+0      	; 0x1550 <MDIO_Error_State_SetPinValue+0x6>
    1550:	00 d0       	rcall	.+0      	; 0x1552 <MDIO_Error_State_SetPinValue+0x8>
    1552:	00 d0       	rcall	.+0      	; 0x1554 <MDIO_Error_State_SetPinValue+0xa>
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	8a 83       	std	Y+2, r24	; 0x02
    155a:	6b 83       	std	Y+3, r22	; 0x03
    155c:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	88 30       	cpi	r24, 0x08	; 8
    1566:	08 f0       	brcs	.+2      	; 0x156a <MDIO_Error_State_SetPinValue+0x20>
    1568:	e8 c0       	rjmp	.+464    	; 0x173a <MDIO_Error_State_SetPinValue+0x1f0>
	{
		switch(Copy_u8PortNumber)
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	3e 83       	std	Y+6, r19	; 0x06
    1572:	2d 83       	std	Y+5, r18	; 0x05
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	91 05       	cpc	r25, r1
    157c:	09 f4       	brne	.+2      	; 0x1580 <MDIO_Error_State_SetPinValue+0x36>
    157e:	48 c0       	rjmp	.+144    	; 0x1610 <MDIO_Error_State_SetPinValue+0xc6>
    1580:	2d 81       	ldd	r18, Y+5	; 0x05
    1582:	3e 81       	ldd	r19, Y+6	; 0x06
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	2c f4       	brge	.+10     	; 0x1594 <MDIO_Error_State_SetPinValue+0x4a>
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	71 f0       	breq	.+28     	; 0x15ae <MDIO_Error_State_SetPinValue+0x64>
    1592:	d1 c0       	rjmp	.+418    	; 0x1736 <MDIO_Error_State_SetPinValue+0x1ec>
    1594:	2d 81       	ldd	r18, Y+5	; 0x05
    1596:	3e 81       	ldd	r19, Y+6	; 0x06
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <MDIO_Error_State_SetPinValue+0x56>
    159e:	69 c0       	rjmp	.+210    	; 0x1672 <MDIO_Error_State_SetPinValue+0x128>
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
    15a2:	9e 81       	ldd	r25, Y+6	; 0x06
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	91 05       	cpc	r25, r1
    15a8:	09 f4       	brne	.+2      	; 0x15ac <MDIO_Error_State_SetPinValue+0x62>
    15aa:	94 c0       	rjmp	.+296    	; 0x16d4 <MDIO_Error_State_SetPinValue+0x18a>
    15ac:	c4 c0       	rjmp	.+392    	; 0x1736 <MDIO_Error_State_SetPinValue+0x1ec>
		{
		case MDIO_PORTA:
			if(Copy_u8PinValue==PIN_HIGH)
    15ae:	8c 81       	ldd	r24, Y+4	; 0x04
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	a1 f4       	brne	.+40     	; 0x15dc <MDIO_Error_State_SetPinValue+0x92>
			{
				SET_BIT(PORTA,Copy_u8PinNumber);
    15b4:	ab e3       	ldi	r26, 0x3B	; 59
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	eb e3       	ldi	r30, 0x3B	; 59
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <MDIO_Error_State_SetPinValue+0x88>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <MDIO_Error_State_SetPinValue+0x84>
    15d6:	84 2b       	or	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	b0 c0       	rjmp	.+352    	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	88 23       	and	r24, r24
    15e0:	a9 f4       	brne	.+42     	; 0x160c <MDIO_Error_State_SetPinValue+0xc2>
			{
				CLR_BIT(PORTA,Copy_u8PinNumber);
    15e2:	ab e3       	ldi	r26, 0x3B	; 59
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	eb e3       	ldi	r30, 0x3B	; 59
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <MDIO_Error_State_SetPinValue+0xb6>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <MDIO_Error_State_SetPinValue+0xb2>
    1604:	80 95       	com	r24
    1606:	84 23       	and	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	98 c0       	rjmp	.+304    	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    160c:	19 82       	std	Y+1, r1	; 0x01
    160e:	96 c0       	rjmp	.+300    	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinValue==PIN_HIGH)
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	a1 f4       	brne	.+40     	; 0x163e <MDIO_Error_State_SetPinValue+0xf4>
			{
				SET_BIT(PORTB,Copy_u8PinNumber);
    1616:	a8 e3       	ldi	r26, 0x38	; 56
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e8 e3       	ldi	r30, 0x38	; 56
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <MDIO_Error_State_SetPinValue+0xea>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <MDIO_Error_State_SetPinValue+0xe6>
    1638:	84 2b       	or	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	7f c0       	rjmp	.+254    	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    163e:	8c 81       	ldd	r24, Y+4	; 0x04
    1640:	88 23       	and	r24, r24
    1642:	a9 f4       	brne	.+42     	; 0x166e <MDIO_Error_State_SetPinValue+0x124>
			{
				CLR_BIT(PORTB,Copy_u8PinNumber);
    1644:	a8 e3       	ldi	r26, 0x38	; 56
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e8 e3       	ldi	r30, 0x38	; 56
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <MDIO_Error_State_SetPinValue+0x118>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <MDIO_Error_State_SetPinValue+0x114>
    1666:	80 95       	com	r24
    1668:	84 23       	and	r24, r20
    166a:	8c 93       	st	X, r24
    166c:	67 c0       	rjmp	.+206    	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    166e:	19 82       	std	Y+1, r1	; 0x01
    1670:	65 c0       	rjmp	.+202    	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinValue==PIN_HIGH)
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	a1 f4       	brne	.+40     	; 0x16a0 <MDIO_Error_State_SetPinValue+0x156>
			{
				SET_BIT(PORTC,Copy_u8PinNumber);
    1678:	a5 e3       	ldi	r26, 0x35	; 53
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e5 e3       	ldi	r30, 0x35	; 53
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <MDIO_Error_State_SetPinValue+0x14c>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <MDIO_Error_State_SetPinValue+0x148>
    169a:	84 2b       	or	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	4e c0       	rjmp	.+156    	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	88 23       	and	r24, r24
    16a4:	a9 f4       	brne	.+42     	; 0x16d0 <MDIO_Error_State_SetPinValue+0x186>
			{
				CLR_BIT(PORTC,Copy_u8PinNumber);
    16a6:	a5 e3       	ldi	r26, 0x35	; 53
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e5 e3       	ldi	r30, 0x35	; 53
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <MDIO_Error_State_SetPinValue+0x17a>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <MDIO_Error_State_SetPinValue+0x176>
    16c8:	80 95       	com	r24
    16ca:	84 23       	and	r24, r20
    16cc:	8c 93       	st	X, r24
    16ce:	36 c0       	rjmp	.+108    	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    16d0:	19 82       	std	Y+1, r1	; 0x01
    16d2:	34 c0       	rjmp	.+104    	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinValue==PIN_HIGH)
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	a1 f4       	brne	.+40     	; 0x1702 <MDIO_Error_State_SetPinValue+0x1b8>
			{
				SET_BIT(PORTD,Copy_u8PinNumber);
    16da:	a2 e3       	ldi	r26, 0x32	; 50
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e2 e3       	ldi	r30, 0x32	; 50
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <MDIO_Error_State_SetPinValue+0x1ae>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <MDIO_Error_State_SetPinValue+0x1aa>
    16fc:	84 2b       	or	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	1d c0       	rjmp	.+58     	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	88 23       	and	r24, r24
    1706:	a9 f4       	brne	.+42     	; 0x1732 <MDIO_Error_State_SetPinValue+0x1e8>
			{
				CLR_BIT(PORTD,Copy_u8PinNumber);
    1708:	a2 e3       	ldi	r26, 0x32	; 50
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e2 e3       	ldi	r30, 0x32	; 50
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <MDIO_Error_State_SetPinValue+0x1dc>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <MDIO_Error_State_SetPinValue+0x1d8>
    172a:	80 95       	com	r24
    172c:	84 23       	and	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	05 c0       	rjmp	.+10     	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1732:	19 82       	std	Y+1, r1	; 0x01
    1734:	03 c0       	rjmp	.+6      	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1736:	19 82       	std	Y+1, r1	; 0x01
    1738:	01 c0       	rjmp	.+2      	; 0x173c <MDIO_Error_State_SetPinValue+0x1f2>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    173a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    173c:	89 81       	ldd	r24, Y+1	; 0x01
}
    173e:	26 96       	adiw	r28, 0x06	; 6
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <MDIO_Error_State_SetPortValue>:

/*Set Port Value Function */
Error_State MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <MDIO_Error_State_SetPortValue+0x6>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <MDIO_Error_State_SetPortValue+0x8>
    1758:	0f 92       	push	r0
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	8a 83       	std	Y+2, r24	; 0x02
    1760:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNumber)
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	3d 83       	std	Y+5, r19	; 0x05
    176e:	2c 83       	std	Y+4, r18	; 0x04
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	91 05       	cpc	r25, r1
    1778:	d1 f0       	breq	.+52     	; 0x17ae <MDIO_Error_State_SetPortValue+0x5e>
    177a:	2c 81       	ldd	r18, Y+4	; 0x04
    177c:	3d 81       	ldd	r19, Y+5	; 0x05
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	2c f4       	brge	.+10     	; 0x178e <MDIO_Error_State_SetPortValue+0x3e>
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	61 f0       	breq	.+24     	; 0x17a4 <MDIO_Error_State_SetPortValue+0x54>
    178c:	1f c0       	rjmp	.+62     	; 0x17cc <MDIO_Error_State_SetPortValue+0x7c>
    178e:	2c 81       	ldd	r18, Y+4	; 0x04
    1790:	3d 81       	ldd	r19, Y+5	; 0x05
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	81 f0       	breq	.+32     	; 0x17b8 <MDIO_Error_State_SetPortValue+0x68>
    1798:	8c 81       	ldd	r24, Y+4	; 0x04
    179a:	9d 81       	ldd	r25, Y+5	; 0x05
    179c:	83 30       	cpi	r24, 0x03	; 3
    179e:	91 05       	cpc	r25, r1
    17a0:	81 f0       	breq	.+32     	; 0x17c2 <MDIO_Error_State_SetPortValue+0x72>
    17a2:	14 c0       	rjmp	.+40     	; 0x17cc <MDIO_Error_State_SetPortValue+0x7c>
	{
	case MDIO_PORTA:
		PORTA=Copy_u8PortValue;
    17a4:	eb e3       	ldi	r30, 0x3B	; 59
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	80 83       	st	Z, r24
    17ac:	10 c0       	rjmp	.+32     	; 0x17ce <MDIO_Error_State_SetPortValue+0x7e>
		break;
	case MDIO_PORTB:
		PORTB=Copy_u8PortValue;
    17ae:	e8 e3       	ldi	r30, 0x38	; 56
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	80 83       	st	Z, r24
    17b6:	0b c0       	rjmp	.+22     	; 0x17ce <MDIO_Error_State_SetPortValue+0x7e>
		break;
	case MDIO_PORTC:
		PORTC=Copy_u8PortValue;
    17b8:	e5 e3       	ldi	r30, 0x35	; 53
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	80 83       	st	Z, r24
    17c0:	06 c0       	rjmp	.+12     	; 0x17ce <MDIO_Error_State_SetPortValue+0x7e>
		break;	
	case MDIO_PORTD:
		PORTD=Copy_u8PortValue;
    17c2:	e2 e3       	ldi	r30, 0x32	; 50
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	80 83       	st	Z, r24
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <MDIO_Error_State_SetPortValue+0x7e>
		break;	
	default:
		LOC_Error_State_ReturnState=NOK;
    17cc:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return LOC_Error_State_ReturnState;
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <MDIO_Error_State_GetPinValue>:

/*Get Pin Value Function */
Error_State MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	27 97       	sbiw	r28, 0x07	; 7
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	8a 83       	std	Y+2, r24	; 0x02
    17f6:	6b 83       	std	Y+3, r22	; 0x03
    17f8:	5d 83       	std	Y+5, r21	; 0x05
    17fa:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue!=NULL_POINTER))
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	88 30       	cpi	r24, 0x08	; 8
    1804:	08 f0       	brcs	.+2      	; 0x1808 <MDIO_Error_State_GetPinValue+0x28>
    1806:	79 c0       	rjmp	.+242    	; 0x18fa <MDIO_Error_State_GetPinValue+0x11a>
    1808:	8c 81       	ldd	r24, Y+4	; 0x04
    180a:	9d 81       	ldd	r25, Y+5	; 0x05
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	91 05       	cpc	r25, r1
    1810:	09 f4       	brne	.+2      	; 0x1814 <MDIO_Error_State_GetPinValue+0x34>
    1812:	73 c0       	rjmp	.+230    	; 0x18fa <MDIO_Error_State_GetPinValue+0x11a>
	{
		switch(Copy_u8PortNumber)
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	3f 83       	std	Y+7, r19	; 0x07
    181c:	2e 83       	std	Y+6, r18	; 0x06
    181e:	4e 81       	ldd	r20, Y+6	; 0x06
    1820:	5f 81       	ldd	r21, Y+7	; 0x07
    1822:	41 30       	cpi	r20, 0x01	; 1
    1824:	51 05       	cpc	r21, r1
    1826:	59 f1       	breq	.+86     	; 0x187e <MDIO_Error_State_GetPinValue+0x9e>
    1828:	8e 81       	ldd	r24, Y+6	; 0x06
    182a:	9f 81       	ldd	r25, Y+7	; 0x07
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	91 05       	cpc	r25, r1
    1830:	34 f4       	brge	.+12     	; 0x183e <MDIO_Error_State_GetPinValue+0x5e>
    1832:	2e 81       	ldd	r18, Y+6	; 0x06
    1834:	3f 81       	ldd	r19, Y+7	; 0x07
    1836:	21 15       	cp	r18, r1
    1838:	31 05       	cpc	r19, r1
    183a:	69 f0       	breq	.+26     	; 0x1856 <MDIO_Error_State_GetPinValue+0x76>
    183c:	5c c0       	rjmp	.+184    	; 0x18f6 <MDIO_Error_State_GetPinValue+0x116>
    183e:	4e 81       	ldd	r20, Y+6	; 0x06
    1840:	5f 81       	ldd	r21, Y+7	; 0x07
    1842:	42 30       	cpi	r20, 0x02	; 2
    1844:	51 05       	cpc	r21, r1
    1846:	79 f1       	breq	.+94     	; 0x18a6 <MDIO_Error_State_GetPinValue+0xc6>
    1848:	8e 81       	ldd	r24, Y+6	; 0x06
    184a:	9f 81       	ldd	r25, Y+7	; 0x07
    184c:	83 30       	cpi	r24, 0x03	; 3
    184e:	91 05       	cpc	r25, r1
    1850:	09 f4       	brne	.+2      	; 0x1854 <MDIO_Error_State_GetPinValue+0x74>
    1852:	3d c0       	rjmp	.+122    	; 0x18ce <MDIO_Error_State_GetPinValue+0xee>
    1854:	50 c0       	rjmp	.+160    	; 0x18f6 <MDIO_Error_State_GetPinValue+0x116>
		{
		case MDIO_PORTA:
			*P_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
    1856:	e9 e3       	ldi	r30, 0x39	; 57
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a9 01       	movw	r20, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <MDIO_Error_State_GetPinValue+0x8e>
    186a:	55 95       	asr	r21
    186c:	47 95       	ror	r20
    186e:	8a 95       	dec	r24
    1870:	e2 f7       	brpl	.-8      	; 0x186a <MDIO_Error_State_GetPinValue+0x8a>
    1872:	ca 01       	movw	r24, r20
    1874:	81 70       	andi	r24, 0x01	; 1
    1876:	ec 81       	ldd	r30, Y+4	; 0x04
    1878:	fd 81       	ldd	r31, Y+5	; 0x05
    187a:	80 83       	st	Z, r24
    187c:	3f c0       	rjmp	.+126    	; 0x18fc <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTB:
			*P_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
    187e:	e6 e3       	ldi	r30, 0x36	; 54
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a9 01       	movw	r20, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <MDIO_Error_State_GetPinValue+0xb6>
    1892:	55 95       	asr	r21
    1894:	47 95       	ror	r20
    1896:	8a 95       	dec	r24
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <MDIO_Error_State_GetPinValue+0xb2>
    189a:	ca 01       	movw	r24, r20
    189c:	81 70       	andi	r24, 0x01	; 1
    189e:	ec 81       	ldd	r30, Y+4	; 0x04
    18a0:	fd 81       	ldd	r31, Y+5	; 0x05
    18a2:	80 83       	st	Z, r24
    18a4:	2b c0       	rjmp	.+86     	; 0x18fc <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTC:
			*P_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
    18a6:	e3 e3       	ldi	r30, 0x33	; 51
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	a9 01       	movw	r20, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <MDIO_Error_State_GetPinValue+0xde>
    18ba:	55 95       	asr	r21
    18bc:	47 95       	ror	r20
    18be:	8a 95       	dec	r24
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <MDIO_Error_State_GetPinValue+0xda>
    18c2:	ca 01       	movw	r24, r20
    18c4:	81 70       	andi	r24, 0x01	; 1
    18c6:	ec 81       	ldd	r30, Y+4	; 0x04
    18c8:	fd 81       	ldd	r31, Y+5	; 0x05
    18ca:	80 83       	st	Z, r24
    18cc:	17 c0       	rjmp	.+46     	; 0x18fc <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTD:
			*P_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
    18ce:	e0 e3       	ldi	r30, 0x30	; 48
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	88 2f       	mov	r24, r24
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a9 01       	movw	r20, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <MDIO_Error_State_GetPinValue+0x106>
    18e2:	55 95       	asr	r21
    18e4:	47 95       	ror	r20
    18e6:	8a 95       	dec	r24
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <MDIO_Error_State_GetPinValue+0x102>
    18ea:	ca 01       	movw	r24, r20
    18ec:	81 70       	andi	r24, 0x01	; 1
    18ee:	ec 81       	ldd	r30, Y+4	; 0x04
    18f0:	fd 81       	ldd	r31, Y+5	; 0x05
    18f2:	80 83       	st	Z, r24
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <MDIO_Error_State_GetPinValue+0x11c>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    18f6:	19 82       	std	Y+1, r1	; 0x01
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <MDIO_Error_State_GetPinValue+0x11c>
			break;		
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    18fa:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18fe:	27 96       	adiw	r28, 0x07	; 7
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <MDIO_Error_State_SetNippleValue>:
/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	00 d0       	rcall	.+0      	; 0x1916 <MDIO_Error_State_SetNippleValue+0x6>
    1916:	00 d0       	rcall	.+0      	; 0x1918 <MDIO_Error_State_SetNippleValue+0x8>
    1918:	00 d0       	rcall	.+0      	; 0x191a <MDIO_Error_State_SetNippleValue+0xa>
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	8a 83       	std	Y+2, r24	; 0x02
    1920:	6b 83       	std	Y+3, r22	; 0x03
    1922:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	85 30       	cpi	r24, 0x05	; 5
    192c:	08 f0       	brcs	.+2      	; 0x1930 <MDIO_Error_State_SetNippleValue+0x20>
    192e:	97 c0       	rjmp	.+302    	; 0x1a5e <MDIO_Error_State_SetNippleValue+0x14e>
	{
		switch(Copy_u8PortNumber)
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	3e 83       	std	Y+6, r19	; 0x06
    1938:	2d 83       	std	Y+5, r18	; 0x05
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	9e 81       	ldd	r25, Y+6	; 0x06
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	91 05       	cpc	r25, r1
    1942:	a1 f1       	breq	.+104    	; 0x19ac <MDIO_Error_State_SetNippleValue+0x9c>
    1944:	2d 81       	ldd	r18, Y+5	; 0x05
    1946:	3e 81       	ldd	r19, Y+6	; 0x06
    1948:	22 30       	cpi	r18, 0x02	; 2
    194a:	31 05       	cpc	r19, r1
    194c:	2c f4       	brge	.+10     	; 0x1958 <MDIO_Error_State_SetNippleValue+0x48>
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	9e 81       	ldd	r25, Y+6	; 0x06
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	71 f0       	breq	.+28     	; 0x1972 <MDIO_Error_State_SetNippleValue+0x62>
    1956:	81 c0       	rjmp	.+258    	; 0x1a5a <MDIO_Error_State_SetNippleValue+0x14a>
    1958:	2d 81       	ldd	r18, Y+5	; 0x05
    195a:	3e 81       	ldd	r19, Y+6	; 0x06
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	09 f4       	brne	.+2      	; 0x1964 <MDIO_Error_State_SetNippleValue+0x54>
    1962:	41 c0       	rjmp	.+130    	; 0x19e6 <MDIO_Error_State_SetNippleValue+0xd6>
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	83 30       	cpi	r24, 0x03	; 3
    196a:	91 05       	cpc	r25, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <MDIO_Error_State_SetNippleValue+0x60>
    196e:	58 c0       	rjmp	.+176    	; 0x1a20 <MDIO_Error_State_SetNippleValue+0x110>
    1970:	74 c0       	rjmp	.+232    	; 0x1a5a <MDIO_Error_State_SetNippleValue+0x14a>
		case MDIO_PORTA:
		/*for(u8 i=Copy_u8PinStart;i<=7;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1972:	ab e3       	ldi	r26, 0x3B	; 59
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	eb e3       	ldi	r30, 0x3B	; 59
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	8f e0       	ldi	r24, 0x0F	; 15
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <MDIO_Error_State_SetNippleValue+0x80>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <MDIO_Error_State_SetNippleValue+0x7c>
    1994:	80 95       	com	r24
    1996:	84 23       	and	r24, r20
    1998:	8c 93       	st	X, r24
			PORTA|=Copy_u8Value;
    199a:	ab e3       	ldi	r26, 0x3B	; 59
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	eb e3       	ldi	r30, 0x3B	; 59
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	90 81       	ld	r25, Z
    19a4:	8c 81       	ldd	r24, Y+4	; 0x04
    19a6:	89 2b       	or	r24, r25
    19a8:	8c 93       	st	X, r24
    19aa:	5a c0       	rjmp	.+180    	; 0x1a60 <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTB:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    19ac:	a8 e3       	ldi	r26, 0x38	; 56
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e8 e3       	ldi	r30, 0x38	; 56
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	48 2f       	mov	r20, r24
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	8f e0       	ldi	r24, 0x0F	; 15
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	02 2e       	mov	r0, r18
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <MDIO_Error_State_SetNippleValue+0xba>
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	0a 94       	dec	r0
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <MDIO_Error_State_SetNippleValue+0xb6>
    19ce:	80 95       	com	r24
    19d0:	84 23       	and	r24, r20
    19d2:	8c 93       	st	X, r24
			PORTB|=Copy_u8Value;
    19d4:	a8 e3       	ldi	r26, 0x38	; 56
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e8 e3       	ldi	r30, 0x38	; 56
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	90 81       	ld	r25, Z
    19de:	8c 81       	ldd	r24, Y+4	; 0x04
    19e0:	89 2b       	or	r24, r25
    19e2:	8c 93       	st	X, r24
    19e4:	3d c0       	rjmp	.+122    	; 0x1a60 <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTC:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    19e6:	a5 e3       	ldi	r26, 0x35	; 53
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e5 e3       	ldi	r30, 0x35	; 53
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	8f e0       	ldi	r24, 0x0F	; 15
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <MDIO_Error_State_SetNippleValue+0xf4>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <MDIO_Error_State_SetNippleValue+0xf0>
    1a08:	80 95       	com	r24
    1a0a:	84 23       	and	r24, r20
    1a0c:	8c 93       	st	X, r24
			PORTC|=Copy_u8Value;
    1a0e:	a5 e3       	ldi	r26, 0x35	; 53
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e5 e3       	ldi	r30, 0x35	; 53
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	90 81       	ld	r25, Z
    1a18:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1a:	89 2b       	or	r24, r25
    1a1c:	8c 93       	st	X, r24
    1a1e:	20 c0       	rjmp	.+64     	; 0x1a60 <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTD:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1a20:	a2 e3       	ldi	r26, 0x32	; 50
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e2 e3       	ldi	r30, 0x32	; 50
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	8f e0       	ldi	r24, 0x0F	; 15
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <MDIO_Error_State_SetNippleValue+0x12e>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <MDIO_Error_State_SetNippleValue+0x12a>
    1a42:	80 95       	com	r24
    1a44:	84 23       	and	r24, r20
    1a46:	8c 93       	st	X, r24
			PORTD|=Copy_u8Value;
    1a48:	a2 e3       	ldi	r26, 0x32	; 50
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e2 e3       	ldi	r30, 0x32	; 50
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	90 81       	ld	r25, Z
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	89 2b       	or	r24, r25
    1a56:	8c 93       	st	X, r24
    1a58:	03 c0       	rjmp	.+6      	; 0x1a60 <MDIO_Error_State_SetNippleValue+0x150>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1a5a:	19 82       	std	Y+1, r1	; 0x01
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <MDIO_Error_State_SetNippleValue+0x150>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1a5e:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a62:	26 96       	adiw	r28, 0x06	; 6
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <MADC_VidInit>:

void (*MADC_CallBack)(void);

/*ADC Initialization*/
void MADC_VidInit(void)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    1a7c:	a7 e2       	ldi	r26, 0x27	; 39
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e7 e2       	ldi	r30, 0x27	; 39
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	80 64       	ori	r24, 0x40	; 64
    1a88:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1a8a:	a7 e2       	ldi	r26, 0x27	; 39
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e7 e2       	ldi	r30, 0x27	; 39
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8f 77       	andi	r24, 0x7F	; 127
    1a96:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
/*Set Prescaler*/
ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1a98:	a6 e2       	ldi	r26, 0x26	; 38
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e6 e2       	ldi	r30, 0x26	; 38
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	88 7f       	andi	r24, 0xF8	; 248
    1aa4:	8c 93       	st	X, r24
ADCSRA|=MADC_SET_PRESCALER;
    1aa6:	a6 e2       	ldi	r26, 0x26	; 38
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e6 e2       	ldi	r30, 0x26	; 38
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	87 60       	ori	r24, 0x07	; 7
    1ab2:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1ab4:	a7 e2       	ldi	r26, 0x27	; 39
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e7 e2       	ldi	r30, 0x27	; 39
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	8f 7d       	andi	r24, 0xDF	; 223
    1ac0:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif
/*Enable To ADC*/
SET_BIT(ADCSRA,7);
    1ac2:	a6 e2       	ldi	r26, 0x26	; 38
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e6 e2       	ldi	r30, 0x26	; 38
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	80 68       	ori	r24, 0x80	; 128
    1ace:	8c 93       	st	X, r24
}
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <MADC_VidADCInterruptEnable>:
void MADC_VidADCInterruptEnable(void)
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,3);
    1ade:	a6 e2       	ldi	r26, 0x26	; 38
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e6 e2       	ldi	r30, 0x26	; 38
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	88 60       	ori	r24, 0x08	; 8
    1aea:	8c 93       	st	X, r24
}
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <MADC_u16ADC_StartConversion>:
/*ADC Start Conversion-->Polling , Return ADC Value*/
u16 MADC_u16ADC_StartConversion(u8 Copy_u8Channel)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	0f 92       	push	r0
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	87 70       	andi	r24, 0x07	; 7
    1b02:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1b04:	a7 e2       	ldi	r26, 0x27	; 39
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e7 e2       	ldi	r30, 0x27	; 39
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	80 7e       	andi	r24, 0xE0	; 224
    1b10:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1b12:	a7 e2       	ldi	r26, 0x27	; 39
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e7 e2       	ldi	r30, 0x27	; 39
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	90 81       	ld	r25, Z
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	89 2b       	or	r24, r25
    1b20:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    1b22:	a6 e2       	ldi	r26, 0x26	; 38
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e6 e2       	ldi	r30, 0x26	; 38
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	80 64       	ori	r24, 0x40	; 64
    1b2e:	8c 93       	st	X, r24
	/*Wait On ADC Conversion Completed Flag is set to one */
	while(GET_BIT(ADCSRA,4)==0);
    1b30:	e6 e2       	ldi	r30, 0x26	; 38
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	82 95       	swap	r24
    1b38:	8f 70       	andi	r24, 0x0F	; 15
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	81 70       	andi	r24, 0x01	; 1
    1b40:	90 70       	andi	r25, 0x00	; 0
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	a9 f3       	breq	.-22     	; 0x1b30 <MADC_u16ADC_StartConversion+0x3e>

	return ADC;
    1b46:	e4 e2       	ldi	r30, 0x24	; 36
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <MADC_u16ADC_StartConversion_With_Interrupt>:
void MADC_u16ADC_StartConversion_With_Interrupt(u8 Copy_u8Channel)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	0f 92       	push	r0
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	87 70       	andi	r24, 0x07	; 7
    1b66:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1b68:	a7 e2       	ldi	r26, 0x27	; 39
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e7 e2       	ldi	r30, 0x27	; 39
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	80 7e       	andi	r24, 0xE0	; 224
    1b74:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1b76:	a7 e2       	ldi	r26, 0x27	; 39
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e7 e2       	ldi	r30, 0x27	; 39
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	90 81       	ld	r25, Z
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	89 2b       	or	r24, r25
    1b84:	8c 93       	st	X, r24
   /*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    1b86:	a6 e2       	ldi	r26, 0x26	; 38
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e6 e2       	ldi	r30, 0x26	; 38
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	80 64       	ori	r24, 0x40	; 64
    1b92:	8c 93       	st	X, r24
}
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <MADC_u16ADCRead>:
u16 MADC_u16ADCRead(void)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
	return ADC;
    1ba4:	e4 e2       	ldi	r30, 0x24	; 36
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	91 81       	ldd	r25, Z+1	; 0x01
}
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <MADC_VidSetCallBack>:
void MADC_VidSetCallBack(void (*Copy_pFun)(void))
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <MADC_VidSetCallBack+0x6>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
	MADC_CallBack=Copy_pFun;
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	90 93 2a 05 	sts	0x052A, r25
    1bc8:	80 93 29 05 	sts	0x0529, r24
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <__vector_16>:

void __vector_16(void)
{
    1bd6:	1f 92       	push	r1
    1bd8:	0f 92       	push	r0
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	0f 92       	push	r0
    1bde:	11 24       	eor	r1, r1
    1be0:	2f 93       	push	r18
    1be2:	3f 93       	push	r19
    1be4:	4f 93       	push	r20
    1be6:	5f 93       	push	r21
    1be8:	6f 93       	push	r22
    1bea:	7f 93       	push	r23
    1bec:	8f 93       	push	r24
    1bee:	9f 93       	push	r25
    1bf0:	af 93       	push	r26
    1bf2:	bf 93       	push	r27
    1bf4:	ef 93       	push	r30
    1bf6:	ff 93       	push	r31
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
	MADC_CallBack();
    1c00:	e0 91 29 05 	lds	r30, 0x0529
    1c04:	f0 91 2a 05 	lds	r31, 0x052A
    1c08:	09 95       	icall
}
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	ff 91       	pop	r31
    1c10:	ef 91       	pop	r30
    1c12:	bf 91       	pop	r27
    1c14:	af 91       	pop	r26
    1c16:	9f 91       	pop	r25
    1c18:	8f 91       	pop	r24
    1c1a:	7f 91       	pop	r23
    1c1c:	6f 91       	pop	r22
    1c1e:	5f 91       	pop	r21
    1c20:	4f 91       	pop	r20
    1c22:	3f 91       	pop	r19
    1c24:	2f 91       	pop	r18
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	0f 90       	pop	r0
    1c2c:	1f 90       	pop	r1
    1c2e:	18 95       	reti

00001c30 <HLED_VidInit>:
#include"..\..\LIB\LSTD_TYPES.h"
#include"..\..\MCAL\MDIO\MDIO_Interface.h"
#include"HLED_Interface.h"

void HLED_VidInit(LED_t *Copy_Led)
{
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <HLED_VidInit+0x6>
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    1c3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c40:	fa 81       	ldd	r31, Y+2	; 0x02
    1c42:	81 81       	ldd	r24, Z+1	; 0x01
    1c44:	e9 81       	ldd	r30, Y+1	; 0x01
    1c46:	fa 81       	ldd	r31, Y+2	; 0x02
    1c48:	90 81       	ld	r25, Z
    1c4a:	69 2f       	mov	r22, r25
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_Error_State_SetPinDirection>
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <HLED_VidLed_On>:
void HLED_VidLed_On(LED_t *Copy_Led)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <HLED_VidLed_On+0x6>
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    1c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6e:	81 81       	ldd	r24, Z+1	; 0x01
    1c70:	e9 81       	ldd	r30, Y+1	; 0x01
    1c72:	fa 81       	ldd	r31, Y+2	; 0x02
    1c74:	90 81       	ld	r25, Z
    1c76:	69 2f       	mov	r22, r25
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <HLED_VidLed_Off>:
void HLED_VidLed_Off(LED_t *Copy_Led)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <HLED_VidLed_Off+0x6>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	9a 83       	std	Y+2, r25	; 0x02
    1c94:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1c96:	e9 81       	ldd	r30, Y+1	; 0x01
    1c98:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9a:	81 81       	ldd	r24, Z+1	; 0x01
    1c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca0:	90 81       	ld	r25, Z
    1ca2:	69 2f       	mov	r22, r25
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <HLED_VidLed_Toggle+0x6>
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	9a 83       	std	Y+2, r25	; 0x02
    1cc0:	89 83       	std	Y+1, r24	; 0x01
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    1cc2:	80 91 8e 00 	lds	r24, 0x008E
    1cc6:	88 23       	and	r24, r24
    1cc8:	69 f4       	brne	.+26     	; 0x1ce4 <HLED_VidLed_Toggle+0x30>
	{
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    1cca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ccc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cce:	81 81       	ldd	r24, Z+1	; 0x01
    1cd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd4:	90 81       	ld	r25, Z
    1cd6:	69 2f       	mov	r22, r25
    1cd8:	41 e0       	ldi	r20, 0x01	; 1
    1cda:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
	Flag=1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	80 93 8e 00 	sts	0x008E, r24
	}
	if(Flag==1)
    1ce4:	80 91 8e 00 	lds	r24, 0x008E
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	61 f4       	brne	.+24     	; 0x1d04 <HLED_VidLed_Toggle+0x50>
	{
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1cec:	e9 81       	ldd	r30, Y+1	; 0x01
    1cee:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf0:	81 81       	ldd	r24, Z+1	; 0x01
    1cf2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf6:	90 81       	ld	r25, Z
    1cf8:	69 2f       	mov	r22, r25
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
	Flag=0;
    1d00:	10 92 8e 00 	sts	0x008E, r1
	}

}
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <HEEPROM_VidSendDataByte>:
#include<util\delay.h>


/*Send byte to EEPROM*/
void HEEPROM_VidSendDataByte(u8 Copy_u8LocationAddress,u8 Copy_u8ChipNum,u8 Copy_u8BlockNum,u8 Copy_u8DataByte)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	63 97       	sbiw	r28, 0x13	; 19
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	88 8b       	std	Y+16, r24	; 0x10
    1d24:	69 8b       	std	Y+17, r22	; 0x11
    1d26:	4a 8b       	std	Y+18, r20	; 0x12
    1d28:	2b 8b       	std	Y+19, r18	; 0x13
	u8 Local_u8AddressPacket;
	Local_u8AddressPacket=EEPROM_FIXED_ADDRESS|(Copy_u8ChipNum<<2);
    1d2a:	89 89       	ldd	r24, Y+17	; 0x11
    1d2c:	88 2f       	mov	r24, r24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	80 65       	ori	r24, 0x50	; 80
    1d3a:	8f 87       	std	Y+15, r24	; 0x0f
	Local_u8AddressPacket=Local_u8AddressPacket|Copy_u8BlockNum;
    1d3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d3e:	8a 89       	ldd	r24, Y+18	; 0x12
    1d40:	89 2b       	or	r24, r25
    1d42:	8f 87       	std	Y+15, r24	; 0x0f
	/*Start Condition*/
	MTWI_SendStartCondition();
    1d44:	0e 94 79 07 	call	0xef2	; 0xef2 <MTWI_SendStartCondition>
	/*Send Address Packet--> Address Of Chip and block*/
	MTWI_SendSlaveAddresWithWrite(Local_u8AddressPacket);
    1d48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d4a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <MTWI_SendSlaveAddresWithWrite>
	/*Send the rest 8bit of location address*/
	MTWI_MasterWriteDataByte(Copy_u8LocationAddress);
    1d4e:	88 89       	ldd	r24, Y+16	; 0x10
    1d50:	0e 94 3d 08 	call	0x107a	; 0x107a <MTWI_MasterWriteDataByte>
	/*Send the data byte to memory location */
	MTWI_MasterWriteDataByte(Copy_u8DataByte);
    1d54:	8b 89       	ldd	r24, Y+19	; 0x13
    1d56:	0e 94 3d 08 	call	0x107a	; 0x107a <MTWI_MasterWriteDataByte>
	/*Send Stop condition*/
	MTWI_SendStopCondition();
    1d5a:	0e 94 95 08 	call	0x112a	; 0x112a <MTWI_SendStopCondition>
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	a0 e2       	ldi	r26, 0x20	; 32
    1d64:	b1 e4       	ldi	r27, 0x41	; 65
    1d66:	8b 87       	std	Y+11, r24	; 0x0b
    1d68:	9c 87       	std	Y+12, r25	; 0x0c
    1d6a:	ad 87       	std	Y+13, r26	; 0x0d
    1d6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	4a e7       	ldi	r20, 0x7A	; 122
    1d7c:	55 e4       	ldi	r21, 0x45	; 69
    1d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	8f 83       	std	Y+7, r24	; 0x07
    1d88:	98 87       	std	Y+8, r25	; 0x08
    1d8a:	a9 87       	std	Y+9, r26	; 0x09
    1d8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d90:	78 85       	ldd	r23, Y+8	; 0x08
    1d92:	89 85       	ldd	r24, Y+9	; 0x09
    1d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e8       	ldi	r20, 0x80	; 128
    1d9c:	5f e3       	ldi	r21, 0x3F	; 63
    1d9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da2:	88 23       	and	r24, r24
    1da4:	2c f4       	brge	.+10     	; 0x1db0 <HEEPROM_VidSendDataByte+0xa2>
		__ticks = 1;
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
    1dae:	3f c0       	rjmp	.+126    	; 0x1e2e <HEEPROM_VidSendDataByte+0x120>
	else if (__tmp > 65535)
    1db0:	6f 81       	ldd	r22, Y+7	; 0x07
    1db2:	78 85       	ldd	r23, Y+8	; 0x08
    1db4:	89 85       	ldd	r24, Y+9	; 0x09
    1db6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	3f ef       	ldi	r19, 0xFF	; 255
    1dbc:	4f e7       	ldi	r20, 0x7F	; 127
    1dbe:	57 e4       	ldi	r21, 0x47	; 71
    1dc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc4:	18 16       	cp	r1, r24
    1dc6:	4c f5       	brge	.+82     	; 0x1e1a <HEEPROM_VidSendDataByte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e2       	ldi	r20, 0x20	; 32
    1dd6:	51 e4       	ldi	r21, 0x41	; 65
    1dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	bc 01       	movw	r22, r24
    1de2:	cd 01       	movw	r24, r26
    1de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	0f c0       	rjmp	.+30     	; 0x1e10 <HEEPROM_VidSendDataByte+0x102>
    1df2:	80 e9       	ldi	r24, 0x90	; 144
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	9c 83       	std	Y+4, r25	; 0x04
    1df8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <HEEPROM_VidSendDataByte+0xf0>
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e06:	8d 81       	ldd	r24, Y+5	; 0x05
    1e08:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	9e 83       	std	Y+6, r25	; 0x06
    1e0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	69 f7       	brne	.-38     	; 0x1df2 <HEEPROM_VidSendDataByte+0xe4>
    1e18:	14 c0       	rjmp	.+40     	; 0x1e42 <HEEPROM_VidSendDataByte+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1c:	78 85       	ldd	r23, Y+8	; 0x08
    1e1e:	89 85       	ldd	r24, Y+9	; 0x09
    1e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <HEEPROM_VidSendDataByte+0x12c>
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
	/*Delay until the write cycle is finished*/
	_delay_ms(10);

}
    1e42:	63 96       	adiw	r28, 0x13	; 19
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <HEEPROM_VidReadDataByte>:
/*Read byte to EEPROM*/
u8 HEEPROM_VidReadDataByte(u8 Copy_u8LocationAddress,u8 Copy_u8ChipNum,u8 Copy_u8BlockNum)
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <HEEPROM_VidReadDataByte+0x6>
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <HEEPROM_VidReadDataByte+0x8>
    1e5c:	0f 92       	push	r0
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	8b 83       	std	Y+3, r24	; 0x03
    1e64:	6c 83       	std	Y+4, r22	; 0x04
    1e66:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8AddressPacket;
	u8 Local_u8DataByte;
	Local_u8AddressPacket=EEPROM_FIXED_ADDRESS|(Copy_u8ChipNum<<2);
    1e68:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	80 65       	ori	r24, 0x50	; 80
    1e78:	89 83       	std	Y+1, r24	; 0x01
	Local_u8AddressPacket=Local_u8AddressPacket|Copy_u8BlockNum;
    1e7a:	99 81       	ldd	r25, Y+1	; 0x01
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	89 2b       	or	r24, r25
    1e80:	89 83       	std	Y+1, r24	; 0x01
	/*Start Condition*/
	MTWI_SendStartCondition();
    1e82:	0e 94 79 07 	call	0xef2	; 0xef2 <MTWI_SendStartCondition>
	/*Send Address Packet--> Address Of Chip and block*/
	MTWI_SendSlaveAddresWithWrite(Local_u8AddressPacket);
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	0e 94 cd 07 	call	0xf9a	; 0xf9a <MTWI_SendSlaveAddresWithWrite>
	/*Send the rest 8bit of location address*/
	MTWI_MasterWriteDataByte(Copy_u8LocationAddress);
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	0e 94 3d 08 	call	0x107a	; 0x107a <MTWI_MasterWriteDataByte>
	/*Send Repeated Start*/
	MTWI_SendRepeatedStart();
    1e92:	0e 94 a3 07 	call	0xf46	; 0xf46 <MTWI_SendRepeatedStart>
	/*Send Address Packet With Read--> Address Of Chip and block*/
	MTWI_SendSlaveAddresWithRead(Local_u8AddressPacket);
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	0e 94 05 08 	call	0x100a	; 0x100a <MTWI_SendSlaveAddresWithRead>
	/*Get the data from memory*/
	MTWI_MasterReadDataByte(&Local_u8DataByte);
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	02 96       	adiw	r24, 0x02	; 2
    1ea0:	0e 94 66 08 	call	0x10cc	; 0x10cc <MTWI_MasterReadDataByte>
	/*Send Stop condition*/
	MTWI_SendStopCondition();
    1ea4:	0e 94 95 08 	call	0x112a	; 0x112a <MTWI_SendStopCondition>

	return Local_u8DataByte;
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <HCLCD_VidWriteCommand_8Bits>:
#include"HCLCD_Interface.h"

#include"util/delay.h"

void HCLCD_VidWriteCommand_8Bits(u8 Copy_u8Command)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	6d 97       	sbiw	r28, 0x1d	; 29
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	8d 8f       	std	Y+29, r24	; 0x1d
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	//MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ede:	0e 94 a8 0b 	call	0x1750	; 0x1750 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a0 e0       	ldi	r26, 0x00	; 0
    1ef2:	b0 e4       	ldi	r27, 0x40	; 64
    1ef4:	89 8f       	std	Y+25, r24	; 0x19
    1ef6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ef8:	ab 8f       	std	Y+27, r26	; 0x1b
    1efa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	69 8d       	ldd	r22, Y+25	; 0x19
    1efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a ef       	ldi	r20, 0xFA	; 250
    1f0a:	54 e4       	ldi	r21, 0x44	; 68
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8d 8b       	std	Y+21, r24	; 0x15
    1f16:	9e 8b       	std	Y+22, r25	; 0x16
    1f18:	af 8b       	std	Y+23, r26	; 0x17
    1f1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f20:	8f 89       	ldd	r24, Y+23	; 0x17
    1f22:	98 8d       	ldd	r25, Y+24	; 0x18
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <HCLCD_VidWriteCommand_8Bits+0x84>
		__ticks = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9c 8b       	std	Y+20, r25	; 0x14
    1f3a:	8b 8b       	std	Y+19, r24	; 0x13
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <HCLCD_VidWriteCommand_8Bits+0x102>
	else if (__tmp > 65535)
    1f3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f40:	7e 89       	ldd	r23, Y+22	; 0x16
    1f42:	8f 89       	ldd	r24, Y+23	; 0x17
    1f44:	98 8d       	ldd	r25, Y+24	; 0x18
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	4c f5       	brge	.+82     	; 0x1fa8 <HCLCD_VidWriteCommand_8Bits+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f56:	69 8d       	ldd	r22, Y+25	; 0x19
    1f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9c 8b       	std	Y+20, r25	; 0x14
    1f7c:	8b 8b       	std	Y+19, r24	; 0x13
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <HCLCD_VidWriteCommand_8Bits+0xe4>
    1f80:	88 ec       	ldi	r24, 0xC8	; 200
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9a 8b       	std	Y+18, r25	; 0x12
    1f86:	89 8b       	std	Y+17, r24	; 0x11
    1f88:	89 89       	ldd	r24, Y+17	; 0x11
    1f8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <HCLCD_VidWriteCommand_8Bits+0xd2>
    1f90:	9a 8b       	std	Y+18, r25	; 0x12
    1f92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f94:	8b 89       	ldd	r24, Y+19	; 0x13
    1f96:	9c 89       	ldd	r25, Y+20	; 0x14
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	9c 8b       	std	Y+20, r25	; 0x14
    1f9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <HCLCD_VidWriteCommand_8Bits+0xc6>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <HCLCD_VidWriteCommand_8Bits+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1faa:	7e 89       	ldd	r23, Y+22	; 0x16
    1fac:	8f 89       	ldd	r24, Y+23	; 0x17
    1fae:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9c 8b       	std	Y+20, r25	; 0x14
    1fba:	8b 8b       	std	Y+19, r24	; 0x13
    1fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc0:	98 8b       	std	Y+16, r25	; 0x10
    1fc2:	8f 87       	std	Y+15, r24	; 0x0f
    1fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc6:	98 89       	ldd	r25, Y+16	; 0x10
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <HCLCD_VidWriteCommand_8Bits+0x10e>
    1fcc:	98 8b       	std	Y+16, r25	; 0x10
    1fce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 e0       	ldi	r26, 0x00	; 0
    1fe0:	b0 e4       	ldi	r27, 0x40	; 64
    1fe2:	8b 87       	std	Y+11, r24	; 0x0b
    1fe4:	9c 87       	std	Y+12, r25	; 0x0c
    1fe6:	ad 87       	std	Y+13, r26	; 0x0d
    1fe8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a ef       	ldi	r20, 0xFA	; 250
    1ff8:	54 e4       	ldi	r21, 0x44	; 68
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	8f 83       	std	Y+7, r24	; 0x07
    2004:	98 87       	std	Y+8, r25	; 0x08
    2006:	a9 87       	std	Y+9, r26	; 0x09
    2008:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200a:	6f 81       	ldd	r22, Y+7	; 0x07
    200c:	78 85       	ldd	r23, Y+8	; 0x08
    200e:	89 85       	ldd	r24, Y+9	; 0x09
    2010:	9a 85       	ldd	r25, Y+10	; 0x0a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e8       	ldi	r20, 0x80	; 128
    2018:	5f e3       	ldi	r21, 0x3F	; 63
    201a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201e:	88 23       	and	r24, r24
    2020:	2c f4       	brge	.+10     	; 0x202c <HCLCD_VidWriteCommand_8Bits+0x172>
		__ticks = 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
    202a:	3f c0       	rjmp	.+126    	; 0x20aa <HCLCD_VidWriteCommand_8Bits+0x1f0>
	else if (__tmp > 65535)
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	3f ef       	ldi	r19, 0xFF	; 255
    2038:	4f e7       	ldi	r20, 0x7F	; 127
    203a:	57 e4       	ldi	r21, 0x47	; 71
    203c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2040:	18 16       	cp	r1, r24
    2042:	4c f5       	brge	.+82     	; 0x2096 <HCLCD_VidWriteCommand_8Bits+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	6b 85       	ldd	r22, Y+11	; 0x0b
    2046:	7c 85       	ldd	r23, Y+12	; 0x0c
    2048:	8d 85       	ldd	r24, Y+13	; 0x0d
    204a:	9e 85       	ldd	r25, Y+14	; 0x0e
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9e 83       	std	Y+6, r25	; 0x06
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	0f c0       	rjmp	.+30     	; 0x208c <HCLCD_VidWriteCommand_8Bits+0x1d2>
    206e:	88 ec       	ldi	r24, 0xC8	; 200
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9c 83       	std	Y+4, r25	; 0x04
    2074:	8b 83       	std	Y+3, r24	; 0x03
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <HCLCD_VidWriteCommand_8Bits+0x1c0>
    207e:	9c 83       	std	Y+4, r25	; 0x04
    2080:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	9e 81       	ldd	r25, Y+6	; 0x06
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	69 f7       	brne	.-38     	; 0x206e <HCLCD_VidWriteCommand_8Bits+0x1b4>
    2094:	14 c0       	rjmp	.+40     	; 0x20be <HCLCD_VidWriteCommand_8Bits+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <HCLCD_VidWriteCommand_8Bits+0x1fc>
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);	
    20be:	82 e0       	ldi	r24, 0x02	; 2
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
}
    20c8:	6d 96       	adiw	r28, 0x1d	; 29
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <HCLCD_Vid8Bits_Init>:

void HCLCD_Vid8Bits_Init(void)
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	e8 97       	sbiw	r28, 0x38	; 56
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and control port intialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	6f ef       	ldi	r22, 0xFF	; 255
    20f2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	41 e0       	ldi	r20, 0x01	; 1
    20fc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_Error_State_SetPinDirection>
	//MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_Error_State_SetPinDirection>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	a0 ef       	ldi	r26, 0xF0	; 240
    2110:	b1 e4       	ldi	r27, 0x41	; 65
    2112:	8d ab       	std	Y+53, r24	; 0x35
    2114:	9e ab       	std	Y+54, r25	; 0x36
    2116:	af ab       	std	Y+55, r26	; 0x37
    2118:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211a:	6d a9       	ldd	r22, Y+53	; 0x35
    211c:	7e a9       	ldd	r23, Y+54	; 0x36
    211e:	8f a9       	ldd	r24, Y+55	; 0x37
    2120:	98 ad       	ldd	r25, Y+56	; 0x38
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	4a ef       	ldi	r20, 0xFA	; 250
    2128:	54 e4       	ldi	r21, 0x44	; 68
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	89 ab       	std	Y+49, r24	; 0x31
    2134:	9a ab       	std	Y+50, r25	; 0x32
    2136:	ab ab       	std	Y+51, r26	; 0x33
    2138:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    213a:	69 a9       	ldd	r22, Y+49	; 0x31
    213c:	7a a9       	ldd	r23, Y+50	; 0x32
    213e:	8b a9       	ldd	r24, Y+51	; 0x33
    2140:	9c a9       	ldd	r25, Y+52	; 0x34
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e8       	ldi	r20, 0x80	; 128
    2148:	5f e3       	ldi	r21, 0x3F	; 63
    214a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214e:	88 23       	and	r24, r24
    2150:	2c f4       	brge	.+10     	; 0x215c <HCLCD_Vid8Bits_Init+0x82>
		__ticks = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	98 ab       	std	Y+48, r25	; 0x30
    2158:	8f a7       	std	Y+47, r24	; 0x2f
    215a:	3f c0       	rjmp	.+126    	; 0x21da <HCLCD_Vid8Bits_Init+0x100>
	else if (__tmp > 65535)
    215c:	69 a9       	ldd	r22, Y+49	; 0x31
    215e:	7a a9       	ldd	r23, Y+50	; 0x32
    2160:	8b a9       	ldd	r24, Y+51	; 0x33
    2162:	9c a9       	ldd	r25, Y+52	; 0x34
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	3f ef       	ldi	r19, 0xFF	; 255
    2168:	4f e7       	ldi	r20, 0x7F	; 127
    216a:	57 e4       	ldi	r21, 0x47	; 71
    216c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2170:	18 16       	cp	r1, r24
    2172:	4c f5       	brge	.+82     	; 0x21c6 <HCLCD_Vid8Bits_Init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2174:	6d a9       	ldd	r22, Y+53	; 0x35
    2176:	7e a9       	ldd	r23, Y+54	; 0x36
    2178:	8f a9       	ldd	r24, Y+55	; 0x37
    217a:	98 ad       	ldd	r25, Y+56	; 0x38
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e2       	ldi	r20, 0x20	; 32
    2182:	51 e4       	ldi	r21, 0x41	; 65
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	98 ab       	std	Y+48, r25	; 0x30
    219a:	8f a7       	std	Y+47, r24	; 0x2f
    219c:	0f c0       	rjmp	.+30     	; 0x21bc <HCLCD_Vid8Bits_Init+0xe2>
    219e:	88 ec       	ldi	r24, 0xC8	; 200
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	9e a7       	std	Y+46, r25	; 0x2e
    21a4:	8d a7       	std	Y+45, r24	; 0x2d
    21a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    21a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <HCLCD_Vid8Bits_Init+0xd0>
    21ae:	9e a7       	std	Y+46, r25	; 0x2e
    21b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b4:	98 a9       	ldd	r25, Y+48	; 0x30
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	98 ab       	std	Y+48, r25	; 0x30
    21ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    21be:	98 a9       	ldd	r25, Y+48	; 0x30
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	69 f7       	brne	.-38     	; 0x219e <HCLCD_Vid8Bits_Init+0xc4>
    21c4:	14 c0       	rjmp	.+40     	; 0x21ee <HCLCD_Vid8Bits_Init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c6:	69 a9       	ldd	r22, Y+49	; 0x31
    21c8:	7a a9       	ldd	r23, Y+50	; 0x32
    21ca:	8b a9       	ldd	r24, Y+51	; 0x33
    21cc:	9c a9       	ldd	r25, Y+52	; 0x34
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	98 ab       	std	Y+48, r25	; 0x30
    21d8:	8f a7       	std	Y+47, r24	; 0x2f
    21da:	8f a5       	ldd	r24, Y+47	; 0x2f
    21dc:	98 a9       	ldd	r25, Y+48	; 0x30
    21de:	9c a7       	std	Y+44, r25	; 0x2c
    21e0:	8b a7       	std	Y+43, r24	; 0x2b
    21e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <HCLCD_Vid8Bits_Init+0x10c>
    21ea:	9c a7       	std	Y+44, r25	; 0x2c
    21ec:	8b a7       	std	Y+43, r24	; 0x2b

	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_VidWriteCommand_8Bits(HCLCD_FUNCTION_SET);
    21ee:	88 e2       	ldi	r24, 0x28	; 40
    21f0:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <HCLCD_VidWriteCommand_8Bits>
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	a0 e8       	ldi	r26, 0x80	; 128
    21fa:	bf e3       	ldi	r27, 0x3F	; 63
    21fc:	8f a3       	std	Y+39, r24	; 0x27
    21fe:	98 a7       	std	Y+40, r25	; 0x28
    2200:	a9 a7       	std	Y+41, r26	; 0x29
    2202:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2204:	6f a1       	ldd	r22, Y+39	; 0x27
    2206:	78 a5       	ldd	r23, Y+40	; 0x28
    2208:	89 a5       	ldd	r24, Y+41	; 0x29
    220a:	9a a5       	ldd	r25, Y+42	; 0x2a
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	4a ef       	ldi	r20, 0xFA	; 250
    2212:	54 e4       	ldi	r21, 0x44	; 68
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	8b a3       	std	Y+35, r24	; 0x23
    221e:	9c a3       	std	Y+36, r25	; 0x24
    2220:	ad a3       	std	Y+37, r26	; 0x25
    2222:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2224:	6b a1       	ldd	r22, Y+35	; 0x23
    2226:	7c a1       	ldd	r23, Y+36	; 0x24
    2228:	8d a1       	ldd	r24, Y+37	; 0x25
    222a:	9e a1       	ldd	r25, Y+38	; 0x26
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5f e3       	ldi	r21, 0x3F	; 63
    2234:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2238:	88 23       	and	r24, r24
    223a:	2c f4       	brge	.+10     	; 0x2246 <HCLCD_Vid8Bits_Init+0x16c>
		__ticks = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9a a3       	std	Y+34, r25	; 0x22
    2242:	89 a3       	std	Y+33, r24	; 0x21
    2244:	3f c0       	rjmp	.+126    	; 0x22c4 <HCLCD_Vid8Bits_Init+0x1ea>
	else if (__tmp > 65535)
    2246:	6b a1       	ldd	r22, Y+35	; 0x23
    2248:	7c a1       	ldd	r23, Y+36	; 0x24
    224a:	8d a1       	ldd	r24, Y+37	; 0x25
    224c:	9e a1       	ldd	r25, Y+38	; 0x26
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	3f ef       	ldi	r19, 0xFF	; 255
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	57 e4       	ldi	r21, 0x47	; 71
    2256:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	4c f5       	brge	.+82     	; 0x22b0 <HCLCD_Vid8Bits_Init+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	6f a1       	ldd	r22, Y+39	; 0x27
    2260:	78 a5       	ldd	r23, Y+40	; 0x28
    2262:	89 a5       	ldd	r24, Y+41	; 0x29
    2264:	9a a5       	ldd	r25, Y+42	; 0x2a
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9a a3       	std	Y+34, r25	; 0x22
    2284:	89 a3       	std	Y+33, r24	; 0x21
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <HCLCD_Vid8Bits_Init+0x1cc>
    2288:	88 ec       	ldi	r24, 0xC8	; 200
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	98 a3       	std	Y+32, r25	; 0x20
    228e:	8f 8f       	std	Y+31, r24	; 0x1f
    2290:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2292:	98 a1       	ldd	r25, Y+32	; 0x20
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <HCLCD_Vid8Bits_Init+0x1ba>
    2298:	98 a3       	std	Y+32, r25	; 0x20
    229a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	89 a1       	ldd	r24, Y+33	; 0x21
    229e:	9a a1       	ldd	r25, Y+34	; 0x22
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9a a3       	std	Y+34, r25	; 0x22
    22a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	89 a1       	ldd	r24, Y+33	; 0x21
    22a8:	9a a1       	ldd	r25, Y+34	; 0x22
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <HCLCD_Vid8Bits_Init+0x1ae>
    22ae:	14 c0       	rjmp	.+40     	; 0x22d8 <HCLCD_Vid8Bits_Init+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	6b a1       	ldd	r22, Y+35	; 0x23
    22b2:	7c a1       	ldd	r23, Y+36	; 0x24
    22b4:	8d a1       	ldd	r24, Y+37	; 0x25
    22b6:	9e a1       	ldd	r25, Y+38	; 0x26
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9a a3       	std	Y+34, r25	; 0x22
    22c2:	89 a3       	std	Y+33, r24	; 0x21
    22c4:	89 a1       	ldd	r24, Y+33	; 0x21
    22c6:	9a a1       	ldd	r25, Y+34	; 0x22
    22c8:	9e 8f       	std	Y+30, r25	; 0x1e
    22ca:	8d 8f       	std	Y+29, r24	; 0x1d
    22cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <HCLCD_Vid8Bits_Init+0x1f6>
    22d4:	9e 8f       	std	Y+30, r25	; 0x1e
    22d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_VidWriteCommand_8Bits(HCLCD_DISPLAY_ON_OFF);
    22d8:	8f e0       	ldi	r24, 0x0F	; 15
    22da:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <HCLCD_VidWriteCommand_8Bits>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 e8       	ldi	r26, 0x80	; 128
    22e4:	bf e3       	ldi	r27, 0x3F	; 63
    22e6:	89 8f       	std	Y+25, r24	; 0x19
    22e8:	9a 8f       	std	Y+26, r25	; 0x1a
    22ea:	ab 8f       	std	Y+27, r26	; 0x1b
    22ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ee:	69 8d       	ldd	r22, Y+25	; 0x19
    22f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	4a ef       	ldi	r20, 0xFA	; 250
    22fc:	54 e4       	ldi	r21, 0x44	; 68
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	8d 8b       	std	Y+21, r24	; 0x15
    2308:	9e 8b       	std	Y+22, r25	; 0x16
    230a:	af 8b       	std	Y+23, r26	; 0x17
    230c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    230e:	6d 89       	ldd	r22, Y+21	; 0x15
    2310:	7e 89       	ldd	r23, Y+22	; 0x16
    2312:	8f 89       	ldd	r24, Y+23	; 0x17
    2314:	98 8d       	ldd	r25, Y+24	; 0x18
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e8       	ldi	r20, 0x80	; 128
    231c:	5f e3       	ldi	r21, 0x3F	; 63
    231e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2322:	88 23       	and	r24, r24
    2324:	2c f4       	brge	.+10     	; 0x2330 <HCLCD_Vid8Bits_Init+0x256>
		__ticks = 1;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9c 8b       	std	Y+20, r25	; 0x14
    232c:	8b 8b       	std	Y+19, r24	; 0x13
    232e:	3f c0       	rjmp	.+126    	; 0x23ae <HCLCD_Vid8Bits_Init+0x2d4>
	else if (__tmp > 65535)
    2330:	6d 89       	ldd	r22, Y+21	; 0x15
    2332:	7e 89       	ldd	r23, Y+22	; 0x16
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	3f ef       	ldi	r19, 0xFF	; 255
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	57 e4       	ldi	r21, 0x47	; 71
    2340:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	4c f5       	brge	.+82     	; 0x239a <HCLCD_Vid8Bits_Init+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2348:	69 8d       	ldd	r22, Y+25	; 0x19
    234a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    234c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    234e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9c 8b       	std	Y+20, r25	; 0x14
    236e:	8b 8b       	std	Y+19, r24	; 0x13
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <HCLCD_Vid8Bits_Init+0x2b6>
    2372:	88 ec       	ldi	r24, 0xC8	; 200
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9a 8b       	std	Y+18, r25	; 0x12
    2378:	89 8b       	std	Y+17, r24	; 0x11
    237a:	89 89       	ldd	r24, Y+17	; 0x11
    237c:	9a 89       	ldd	r25, Y+18	; 0x12
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <HCLCD_Vid8Bits_Init+0x2a4>
    2382:	9a 8b       	std	Y+18, r25	; 0x12
    2384:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2386:	8b 89       	ldd	r24, Y+19	; 0x13
    2388:	9c 89       	ldd	r25, Y+20	; 0x14
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	9c 8b       	std	Y+20, r25	; 0x14
    238e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2390:	8b 89       	ldd	r24, Y+19	; 0x13
    2392:	9c 89       	ldd	r25, Y+20	; 0x14
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	69 f7       	brne	.-38     	; 0x2372 <HCLCD_Vid8Bits_Init+0x298>
    2398:	14 c0       	rjmp	.+40     	; 0x23c2 <HCLCD_Vid8Bits_Init+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239a:	6d 89       	ldd	r22, Y+21	; 0x15
    239c:	7e 89       	ldd	r23, Y+22	; 0x16
    239e:	8f 89       	ldd	r24, Y+23	; 0x17
    23a0:	98 8d       	ldd	r25, Y+24	; 0x18
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9c 8b       	std	Y+20, r25	; 0x14
    23ac:	8b 8b       	std	Y+19, r24	; 0x13
    23ae:	8b 89       	ldd	r24, Y+19	; 0x13
    23b0:	9c 89       	ldd	r25, Y+20	; 0x14
    23b2:	98 8b       	std	Y+16, r25	; 0x10
    23b4:	8f 87       	std	Y+15, r24	; 0x0f
    23b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b8:	98 89       	ldd	r25, Y+16	; 0x10
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <HCLCD_Vid8Bits_Init+0x2e0>
    23be:	98 8b       	std	Y+16, r25	; 0x10
    23c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_VidWriteCommand_8Bits(DISPLAY_CLEAR);
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <HCLCD_VidWriteCommand_8Bits>
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	a0 e0       	ldi	r26, 0x00	; 0
    23ce:	b0 e4       	ldi	r27, 0x40	; 64
    23d0:	8b 87       	std	Y+11, r24	; 0x0b
    23d2:	9c 87       	std	Y+12, r25	; 0x0c
    23d4:	ad 87       	std	Y+13, r26	; 0x0d
    23d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23da:	7c 85       	ldd	r23, Y+12	; 0x0c
    23dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23de:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	4a ef       	ldi	r20, 0xFA	; 250
    23e6:	54 e4       	ldi	r21, 0x44	; 68
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	8f 83       	std	Y+7, r24	; 0x07
    23f2:	98 87       	std	Y+8, r25	; 0x08
    23f4:	a9 87       	std	Y+9, r26	; 0x09
    23f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23f8:	6f 81       	ldd	r22, Y+7	; 0x07
    23fa:	78 85       	ldd	r23, Y+8	; 0x08
    23fc:	89 85       	ldd	r24, Y+9	; 0x09
    23fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e8       	ldi	r20, 0x80	; 128
    2406:	5f e3       	ldi	r21, 0x3F	; 63
    2408:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    240c:	88 23       	and	r24, r24
    240e:	2c f4       	brge	.+10     	; 0x241a <HCLCD_Vid8Bits_Init+0x340>
		__ticks = 1;
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
    2418:	3f c0       	rjmp	.+126    	; 0x2498 <HCLCD_Vid8Bits_Init+0x3be>
	else if (__tmp > 65535)
    241a:	6f 81       	ldd	r22, Y+7	; 0x07
    241c:	78 85       	ldd	r23, Y+8	; 0x08
    241e:	89 85       	ldd	r24, Y+9	; 0x09
    2420:	9a 85       	ldd	r25, Y+10	; 0x0a
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	3f ef       	ldi	r19, 0xFF	; 255
    2426:	4f e7       	ldi	r20, 0x7F	; 127
    2428:	57 e4       	ldi	r21, 0x47	; 71
    242a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    242e:	18 16       	cp	r1, r24
    2430:	4c f5       	brge	.+82     	; 0x2484 <HCLCD_Vid8Bits_Init+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2432:	6b 85       	ldd	r22, Y+11	; 0x0b
    2434:	7c 85       	ldd	r23, Y+12	; 0x0c
    2436:	8d 85       	ldd	r24, Y+13	; 0x0d
    2438:	9e 85       	ldd	r25, Y+14	; 0x0e
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	51 e4       	ldi	r21, 0x41	; 65
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	9e 83       	std	Y+6, r25	; 0x06
    2458:	8d 83       	std	Y+5, r24	; 0x05
    245a:	0f c0       	rjmp	.+30     	; 0x247a <HCLCD_Vid8Bits_Init+0x3a0>
    245c:	88 ec       	ldi	r24, 0xC8	; 200
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9c 83       	std	Y+4, r25	; 0x04
    2462:	8b 83       	std	Y+3, r24	; 0x03
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <HCLCD_Vid8Bits_Init+0x38e>
    246c:	9c 83       	std	Y+4, r25	; 0x04
    246e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2470:	8d 81       	ldd	r24, Y+5	; 0x05
    2472:	9e 81       	ldd	r25, Y+6	; 0x06
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247a:	8d 81       	ldd	r24, Y+5	; 0x05
    247c:	9e 81       	ldd	r25, Y+6	; 0x06
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	69 f7       	brne	.-38     	; 0x245c <HCLCD_Vid8Bits_Init+0x382>
    2482:	14 c0       	rjmp	.+40     	; 0x24ac <HCLCD_Vid8Bits_Init+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2484:	6f 81       	ldd	r22, Y+7	; 0x07
    2486:	78 85       	ldd	r23, Y+8	; 0x08
    2488:	89 85       	ldd	r24, Y+9	; 0x09
    248a:	9a 85       	ldd	r25, Y+10	; 0x0a
    248c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <HCLCD_Vid8Bits_Init+0x3ca>
    24a8:	9a 83       	std	Y+2, r25	; 0x02
    24aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_VidWriteCommand_8Bits(HCLCD_ENTRY_MODE_SET);
    24ac:	86 e0       	ldi	r24, 0x06	; 6
    24ae:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <HCLCD_VidWriteCommand_8Bits>
}
    24b2:	e8 96       	adiw	r28, 0x38	; 56
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <HCLCD_VidWriteChar_8Bits>:
void HCLCD_VidWriteChar_8Bits(u8 Copy_u8Data)
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	6d 97       	sbiw	r28, 0x1d	; 29
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	8d 8f       	std	Y+29, r24	; 0x1d
	/*select Data register--> Write one on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	//MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    24e8:	0e 94 a8 0b 	call	0x1750	; 0x1750 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a0 e0       	ldi	r26, 0x00	; 0
    24fc:	b0 e4       	ldi	r27, 0x40	; 64
    24fe:	89 8f       	std	Y+25, r24	; 0x19
    2500:	9a 8f       	std	Y+26, r25	; 0x1a
    2502:	ab 8f       	std	Y+27, r26	; 0x1b
    2504:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2506:	69 8d       	ldd	r22, Y+25	; 0x19
    2508:	7a 8d       	ldd	r23, Y+26	; 0x1a
    250a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    250c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	4a ef       	ldi	r20, 0xFA	; 250
    2514:	54 e4       	ldi	r21, 0x44	; 68
    2516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	8d 8b       	std	Y+21, r24	; 0x15
    2520:	9e 8b       	std	Y+22, r25	; 0x16
    2522:	af 8b       	std	Y+23, r26	; 0x17
    2524:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2526:	6d 89       	ldd	r22, Y+21	; 0x15
    2528:	7e 89       	ldd	r23, Y+22	; 0x16
    252a:	8f 89       	ldd	r24, Y+23	; 0x17
    252c:	98 8d       	ldd	r25, Y+24	; 0x18
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	2c f4       	brge	.+10     	; 0x2548 <HCLCD_VidWriteChar_8Bits+0x84>
		__ticks = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9c 8b       	std	Y+20, r25	; 0x14
    2544:	8b 8b       	std	Y+19, r24	; 0x13
    2546:	3f c0       	rjmp	.+126    	; 0x25c6 <HCLCD_VidWriteChar_8Bits+0x102>
	else if (__tmp > 65535)
    2548:	6d 89       	ldd	r22, Y+21	; 0x15
    254a:	7e 89       	ldd	r23, Y+22	; 0x16
    254c:	8f 89       	ldd	r24, Y+23	; 0x17
    254e:	98 8d       	ldd	r25, Y+24	; 0x18
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3f ef       	ldi	r19, 0xFF	; 255
    2554:	4f e7       	ldi	r20, 0x7F	; 127
    2556:	57 e4       	ldi	r21, 0x47	; 71
    2558:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255c:	18 16       	cp	r1, r24
    255e:	4c f5       	brge	.+82     	; 0x25b2 <HCLCD_VidWriteChar_8Bits+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	69 8d       	ldd	r22, Y+25	; 0x19
    2562:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2564:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2566:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e2       	ldi	r20, 0x20	; 32
    256e:	51 e4       	ldi	r21, 0x41	; 65
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9c 8b       	std	Y+20, r25	; 0x14
    2586:	8b 8b       	std	Y+19, r24	; 0x13
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <HCLCD_VidWriteChar_8Bits+0xe4>
    258a:	88 ec       	ldi	r24, 0xC8	; 200
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9a 8b       	std	Y+18, r25	; 0x12
    2590:	89 8b       	std	Y+17, r24	; 0x11
    2592:	89 89       	ldd	r24, Y+17	; 0x11
    2594:	9a 89       	ldd	r25, Y+18	; 0x12
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <HCLCD_VidWriteChar_8Bits+0xd2>
    259a:	9a 8b       	std	Y+18, r25	; 0x12
    259c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259e:	8b 89       	ldd	r24, Y+19	; 0x13
    25a0:	9c 89       	ldd	r25, Y+20	; 0x14
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	9c 8b       	std	Y+20, r25	; 0x14
    25a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a8:	8b 89       	ldd	r24, Y+19	; 0x13
    25aa:	9c 89       	ldd	r25, Y+20	; 0x14
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	69 f7       	brne	.-38     	; 0x258a <HCLCD_VidWriteChar_8Bits+0xc6>
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <HCLCD_VidWriteChar_8Bits+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b2:	6d 89       	ldd	r22, Y+21	; 0x15
    25b4:	7e 89       	ldd	r23, Y+22	; 0x16
    25b6:	8f 89       	ldd	r24, Y+23	; 0x17
    25b8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9c 8b       	std	Y+20, r25	; 0x14
    25c4:	8b 8b       	std	Y+19, r24	; 0x13
    25c6:	8b 89       	ldd	r24, Y+19	; 0x13
    25c8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ca:	98 8b       	std	Y+16, r25	; 0x10
    25cc:	8f 87       	std	Y+15, r24	; 0x0f
    25ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d0:	98 89       	ldd	r25, Y+16	; 0x10
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <HCLCD_VidWriteChar_8Bits+0x10e>
    25d6:	98 8b       	std	Y+16, r25	; 0x10
    25d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    25da:	82 e0       	ldi	r24, 0x02	; 2
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	a0 e0       	ldi	r26, 0x00	; 0
    25ea:	b0 e4       	ldi	r27, 0x40	; 64
    25ec:	8b 87       	std	Y+11, r24	; 0x0b
    25ee:	9c 87       	std	Y+12, r25	; 0x0c
    25f0:	ad 87       	std	Y+13, r26	; 0x0d
    25f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	4a ef       	ldi	r20, 0xFA	; 250
    2602:	54 e4       	ldi	r21, 0x44	; 68
    2604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	8f 83       	std	Y+7, r24	; 0x07
    260e:	98 87       	std	Y+8, r25	; 0x08
    2610:	a9 87       	std	Y+9, r26	; 0x09
    2612:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2614:	6f 81       	ldd	r22, Y+7	; 0x07
    2616:	78 85       	ldd	r23, Y+8	; 0x08
    2618:	89 85       	ldd	r24, Y+9	; 0x09
    261a:	9a 85       	ldd	r25, Y+10	; 0x0a
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e8       	ldi	r20, 0x80	; 128
    2622:	5f e3       	ldi	r21, 0x3F	; 63
    2624:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2628:	88 23       	and	r24, r24
    262a:	2c f4       	brge	.+10     	; 0x2636 <HCLCD_VidWriteChar_8Bits+0x172>
		__ticks = 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
    2634:	3f c0       	rjmp	.+126    	; 0x26b4 <HCLCD_VidWriteChar_8Bits+0x1f0>
	else if (__tmp > 65535)
    2636:	6f 81       	ldd	r22, Y+7	; 0x07
    2638:	78 85       	ldd	r23, Y+8	; 0x08
    263a:	89 85       	ldd	r24, Y+9	; 0x09
    263c:	9a 85       	ldd	r25, Y+10	; 0x0a
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	3f ef       	ldi	r19, 0xFF	; 255
    2642:	4f e7       	ldi	r20, 0x7F	; 127
    2644:	57 e4       	ldi	r21, 0x47	; 71
    2646:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    264a:	18 16       	cp	r1, r24
    264c:	4c f5       	brge	.+82     	; 0x26a0 <HCLCD_VidWriteChar_8Bits+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2650:	7c 85       	ldd	r23, Y+12	; 0x0c
    2652:	8d 85       	ldd	r24, Y+13	; 0x0d
    2654:	9e 85       	ldd	r25, Y+14	; 0x0e
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e2       	ldi	r20, 0x20	; 32
    265c:	51 e4       	ldi	r21, 0x41	; 65
    265e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	bc 01       	movw	r22, r24
    2668:	cd 01       	movw	r24, r26
    266a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
    2676:	0f c0       	rjmp	.+30     	; 0x2696 <HCLCD_VidWriteChar_8Bits+0x1d2>
    2678:	88 ec       	ldi	r24, 0xC8	; 200
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	9c 83       	std	Y+4, r25	; 0x04
    267e:	8b 83       	std	Y+3, r24	; 0x03
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	f1 f7       	brne	.-4      	; 0x2684 <HCLCD_VidWriteChar_8Bits+0x1c0>
    2688:	9c 83       	std	Y+4, r25	; 0x04
    268a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268c:	8d 81       	ldd	r24, Y+5	; 0x05
    268e:	9e 81       	ldd	r25, Y+6	; 0x06
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2696:	8d 81       	ldd	r24, Y+5	; 0x05
    2698:	9e 81       	ldd	r25, Y+6	; 0x06
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	69 f7       	brne	.-38     	; 0x2678 <HCLCD_VidWriteChar_8Bits+0x1b4>
    269e:	14 c0       	rjmp	.+40     	; 0x26c8 <HCLCD_VidWriteChar_8Bits+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9e 83       	std	Y+6, r25	; 0x06
    26b2:	8d 83       	std	Y+5, r24	; 0x05
    26b4:	8d 81       	ldd	r24, Y+5	; 0x05
    26b6:	9e 81       	ldd	r25, Y+6	; 0x06
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	89 83       	std	Y+1, r24	; 0x01
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <HCLCD_VidWriteChar_8Bits+0x1fc>
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);	
    26c8:	82 e0       	ldi	r24, 0x02	; 2
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	41 e0       	ldi	r20, 0x01	; 1
    26ce:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
}
    26d2:	6d 96       	adiw	r28, 0x1d	; 29
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <HCLCD_VidWriteString_8Bits>:

void HCLCD_VidWriteString_8Bits(u8* PCopy_u8String)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <HCLCD_VidWriteString_8Bits+0x6>
    26ea:	0f 92       	push	r0
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	9b 83       	std	Y+3, r25	; 0x03
    26f2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    26f4:	19 82       	std	Y+1, r1	; 0x01
    26f6:	0e c0       	rjmp	.+28     	; 0x2714 <HCLCD_VidWriteString_8Bits+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_VidWriteChar_8Bits(PCopy_u8String[Loc_u8Count]);
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	28 2f       	mov	r18, r24
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	9b 81       	ldd	r25, Y+3	; 0x03
    2702:	fc 01       	movw	r30, r24
    2704:	e2 0f       	add	r30, r18
    2706:	f3 1f       	adc	r31, r19
    2708:	80 81       	ld	r24, Z
    270a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <HCLCD_VidWriteChar_8Bits>
		Loc_u8Count++;
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	8f 5f       	subi	r24, 0xFF	; 255
    2712:	89 83       	std	Y+1, r24	; 0x01
}

void HCLCD_VidWriteString_8Bits(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	9b 81       	ldd	r25, Y+3	; 0x03
    271e:	fc 01       	movw	r30, r24
    2720:	e2 0f       	add	r30, r18
    2722:	f3 1f       	adc	r31, r19
    2724:	80 81       	ld	r24, Z
    2726:	88 23       	and	r24, r24
    2728:	39 f7       	brne	.-50     	; 0x26f8 <HCLCD_VidWriteString_8Bits+0x14>
	{
		HCLCD_VidWriteChar_8Bits(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <HCLCD_VidWriteNumber_8Bits>:
void HCLCD_VidWriteNumber_8Bits(u32 Copy_u8Number)
{
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	60 97       	sbiw	r28, 0x10	; 16
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	6d 87       	std	Y+13, r22	; 0x0d
    2750:	7e 87       	std	Y+14, r23	; 0x0e
    2752:	8f 87       	std	Y+15, r24	; 0x0f
    2754:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2756:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2758:	8d 85       	ldd	r24, Y+13	; 0x0d
    275a:	9e 85       	ldd	r25, Y+14	; 0x0e
    275c:	af 85       	ldd	r26, Y+15	; 0x0f
    275e:	b8 89       	ldd	r27, Y+16	; 0x10
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	a1 05       	cpc	r26, r1
    2764:	b1 05       	cpc	r27, r1
    2766:	09 f4       	brne	.+2      	; 0x276a <HCLCD_VidWriteNumber_8Bits+0x34>
    2768:	4f c0       	rjmp	.+158    	; 0x2808 <HCLCD_VidWriteNumber_8Bits+0xd2>
    276a:	2d c0       	rjmp	.+90     	; 0x27c6 <HCLCD_VidWriteNumber_8Bits+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	08 2f       	mov	r16, r24
    2770:	10 e0       	ldi	r17, 0x00	; 0
    2772:	8d 85       	ldd	r24, Y+13	; 0x0d
    2774:	9e 85       	ldd	r25, Y+14	; 0x0e
    2776:	af 85       	ldd	r26, Y+15	; 0x0f
    2778:	b8 89       	ldd	r27, Y+16	; 0x10
    277a:	2a e0       	ldi	r18, 0x0A	; 10
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__udivmodsi4>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	28 2f       	mov	r18, r24
    2790:	ce 01       	movw	r24, r28
    2792:	03 96       	adiw	r24, 0x03	; 3
    2794:	fc 01       	movw	r30, r24
    2796:	e0 0f       	add	r30, r16
    2798:	f1 1f       	adc	r31, r17
    279a:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    279c:	8d 85       	ldd	r24, Y+13	; 0x0d
    279e:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a0:	af 85       	ldd	r26, Y+15	; 0x0f
    27a2:	b8 89       	ldd	r27, Y+16	; 0x10
    27a4:	2a e0       	ldi	r18, 0x0A	; 10
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e0       	ldi	r20, 0x00	; 0
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__udivmodsi4>
    27b4:	da 01       	movw	r26, r20
    27b6:	c9 01       	movw	r24, r18
    27b8:	8d 87       	std	Y+13, r24	; 0x0d
    27ba:	9e 87       	std	Y+14, r25	; 0x0e
    27bc:	af 87       	std	Y+15, r26	; 0x0f
    27be:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    27c0:	8a 81       	ldd	r24, Y+2	; 0x02
    27c2:	8f 5f       	subi	r24, 0xFF	; 255
    27c4:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    27c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ca:	af 85       	ldd	r26, Y+15	; 0x0f
    27cc:	b8 89       	ldd	r27, Y+16	; 0x10
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	a1 05       	cpc	r26, r1
    27d2:	b1 05       	cpc	r27, r1
    27d4:	59 f6       	brne	.-106    	; 0x276c <HCLCD_VidWriteNumber_8Bits+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	81 50       	subi	r24, 0x01	; 1
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	11 c0       	rjmp	.+34     	; 0x2800 <HCLCD_VidWriteNumber_8Bits+0xca>
		{
			HCLCD_VidWriteChar_8Bits(ARR_Digits[i]+'0');
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	28 2f       	mov	r18, r24
    27e2:	33 27       	eor	r19, r19
    27e4:	27 fd       	sbrc	r18, 7
    27e6:	30 95       	com	r19
    27e8:	ce 01       	movw	r24, r28
    27ea:	03 96       	adiw	r24, 0x03	; 3
    27ec:	fc 01       	movw	r30, r24
    27ee:	e2 0f       	add	r30, r18
    27f0:	f3 1f       	adc	r31, r19
    27f2:	80 81       	ld	r24, Z
    27f4:	80 5d       	subi	r24, 0xD0	; 208
    27f6:	0e 94 62 12 	call	0x24c4	; 0x24c4 <HCLCD_VidWriteChar_8Bits>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	81 50       	subi	r24, 0x01	; 1
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	88 23       	and	r24, r24
    2804:	64 f7       	brge	.-40     	; 0x27de <HCLCD_VidWriteNumber_8Bits+0xa8>
    2806:	03 c0       	rjmp	.+6      	; 0x280e <HCLCD_VidWriteNumber_8Bits+0xd8>
			HCLCD_VidWriteChar_8Bits(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_VidWriteChar_8Bits('0');
    2808:	80 e3       	ldi	r24, 0x30	; 48
    280a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <HCLCD_VidWriteChar_8Bits>
	}
}
    280e:	60 96       	adiw	r28, 0x10	; 16
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	1f 91       	pop	r17
    2820:	0f 91       	pop	r16
    2822:	08 95       	ret

00002824 <HCLCD_VidSetPosition>:
void HCLCD_VidSetPosition(u8 Copy_u8LineNumber , u8 Copy_u8PositionNumber)
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	00 d0       	rcall	.+0      	; 0x282a <HCLCD_VidSetPosition+0x6>
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	89 83       	std	Y+1, r24	; 0x01
    2830:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	81 30       	cpi	r24, 0x01	; 1
    2836:	41 f4       	brne	.+16     	; 0x2848 <HCLCD_VidSetPosition+0x24>
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	80 31       	cpi	r24, 0x10	; 16
    283c:	28 f4       	brcc	.+10     	; 0x2848 <HCLCD_VidSetPosition+0x24>
	{
		HCLCD_VidWriteCommand_8Bits((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	80 58       	subi	r24, 0x80	; 128
    2842:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <HCLCD_VidWriteCommand_8Bits>
    2846:	0a c0       	rjmp	.+20     	; 0x285c <HCLCD_VidSetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	82 30       	cpi	r24, 0x02	; 2
    284c:	39 f4       	brne	.+14     	; 0x285c <HCLCD_VidSetPosition+0x38>
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	80 31       	cpi	r24, 0x10	; 16
    2852:	20 f4       	brcc	.+8      	; 0x285c <HCLCD_VidSetPosition+0x38>
	{
		HCLCD_VidWriteCommand_8Bits((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	80 54       	subi	r24, 0x40	; 64
    2858:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <HCLCD_VidWriteCommand_8Bits>
	}
	else
	{
		/*Do Nothing*/
	}
}
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <HCLCD_VidWriteCommand_4Bits>:

void HCLCD_VidWriteCommand_4Bits(u8 Copy_u8Command)
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	60 97       	sbiw	r28, 0x10	; 16
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	88 8b       	std	Y+16, r24	; 0x10
	u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	60 e0       	ldi	r22, 0x00	; 0
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	//MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
	/*Send  Command*/
	LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
    2886:	88 89       	ldd	r24, Y+16	; 0x10
    2888:	8f 70       	andi	r24, 0x0F	; 15
    288a:	88 0f       	add	r24, r24
    288c:	88 0f       	add	r24, r24
    288e:	88 0f       	add	r24, r24
    2890:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,LOC_u8CopyCommand);
    2892:	83 e0       	ldi	r24, 0x03	; 3
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	4f 85       	ldd	r20, Y+15	; 0x0f
    2898:	0e 94 88 0c 	call	0x1910	; 0x1910 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	60 e0       	ldi	r22, 0x00	; 0
    28a0:	41 e0       	ldi	r20, 0x01	; 1
    28a2:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	a0 e0       	ldi	r26, 0x00	; 0
    28ac:	b0 e4       	ldi	r27, 0x40	; 64
    28ae:	8b 87       	std	Y+11, r24	; 0x0b
    28b0:	9c 87       	std	Y+12, r25	; 0x0c
    28b2:	ad 87       	std	Y+13, r26	; 0x0d
    28b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    28bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	4a ef       	ldi	r20, 0xFA	; 250
    28c4:	54 e4       	ldi	r21, 0x44	; 68
    28c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	8f 83       	std	Y+7, r24	; 0x07
    28d0:	98 87       	std	Y+8, r25	; 0x08
    28d2:	a9 87       	std	Y+9, r26	; 0x09
    28d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28d6:	6f 81       	ldd	r22, Y+7	; 0x07
    28d8:	78 85       	ldd	r23, Y+8	; 0x08
    28da:	89 85       	ldd	r24, Y+9	; 0x09
    28dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e8       	ldi	r20, 0x80	; 128
    28e4:	5f e3       	ldi	r21, 0x3F	; 63
    28e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ea:	88 23       	and	r24, r24
    28ec:	2c f4       	brge	.+10     	; 0x28f8 <HCLCD_VidWriteCommand_4Bits+0x92>
		__ticks = 1;
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	9e 83       	std	Y+6, r25	; 0x06
    28f4:	8d 83       	std	Y+5, r24	; 0x05
    28f6:	3f c0       	rjmp	.+126    	; 0x2976 <HCLCD_VidWriteCommand_4Bits+0x110>
	else if (__tmp > 65535)
    28f8:	6f 81       	ldd	r22, Y+7	; 0x07
    28fa:	78 85       	ldd	r23, Y+8	; 0x08
    28fc:	89 85       	ldd	r24, Y+9	; 0x09
    28fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	3f ef       	ldi	r19, 0xFF	; 255
    2904:	4f e7       	ldi	r20, 0x7F	; 127
    2906:	57 e4       	ldi	r21, 0x47	; 71
    2908:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    290c:	18 16       	cp	r1, r24
    290e:	4c f5       	brge	.+82     	; 0x2962 <HCLCD_VidWriteCommand_4Bits+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2910:	6b 85       	ldd	r22, Y+11	; 0x0b
    2912:	7c 85       	ldd	r23, Y+12	; 0x0c
    2914:	8d 85       	ldd	r24, Y+13	; 0x0d
    2916:	9e 85       	ldd	r25, Y+14	; 0x0e
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e2       	ldi	r20, 0x20	; 32
    291e:	51 e4       	ldi	r21, 0x41	; 65
    2920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	bc 01       	movw	r22, r24
    292a:	cd 01       	movw	r24, r26
    292c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	9e 83       	std	Y+6, r25	; 0x06
    2936:	8d 83       	std	Y+5, r24	; 0x05
    2938:	0f c0       	rjmp	.+30     	; 0x2958 <HCLCD_VidWriteCommand_4Bits+0xf2>
    293a:	88 ec       	ldi	r24, 0xC8	; 200
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	9c 83       	std	Y+4, r25	; 0x04
    2940:	8b 83       	std	Y+3, r24	; 0x03
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	9c 81       	ldd	r25, Y+4	; 0x04
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	f1 f7       	brne	.-4      	; 0x2946 <HCLCD_VidWriteCommand_4Bits+0xe0>
    294a:	9c 83       	std	Y+4, r25	; 0x04
    294c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294e:	8d 81       	ldd	r24, Y+5	; 0x05
    2950:	9e 81       	ldd	r25, Y+6	; 0x06
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	9e 83       	std	Y+6, r25	; 0x06
    2956:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	9e 81       	ldd	r25, Y+6	; 0x06
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	69 f7       	brne	.-38     	; 0x293a <HCLCD_VidWriteCommand_4Bits+0xd4>
    2960:	14 c0       	rjmp	.+40     	; 0x298a <HCLCD_VidWriteCommand_4Bits+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2962:	6f 81       	ldd	r22, Y+7	; 0x07
    2964:	78 85       	ldd	r23, Y+8	; 0x08
    2966:	89 85       	ldd	r24, Y+9	; 0x09
    2968:	9a 85       	ldd	r25, Y+10	; 0x0a
    296a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	9e 83       	std	Y+6, r25	; 0x06
    2974:	8d 83       	std	Y+5, r24	; 0x05
    2976:	8d 81       	ldd	r24, Y+5	; 0x05
    2978:	9e 81       	ldd	r25, Y+6	; 0x06
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	9a 81       	ldd	r25, Y+2	; 0x02
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	f1 f7       	brne	.-4      	; 0x2982 <HCLCD_VidWriteCommand_4Bits+0x11c>
    2986:	9a 83       	std	Y+2, r25	; 0x02
    2988:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    298a:	82 e0       	ldi	r24, 0x02	; 2
    298c:	60 e0       	ldi	r22, 0x00	; 0
    298e:	40 e0       	ldi	r20, 0x00	; 0
    2990:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
}
    2994:	60 96       	adiw	r28, 0x10	; 16
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <HCLCD_Vid4Bits_Init>:
void HCLCD_Vid4Bits_Init(void)
{
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	e9 97       	sbiw	r28, 0x39	; 57
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    29ba:	86 e0       	ldi	r24, 0x06	; 6
    29bc:	89 af       	std	Y+57, r24	; 0x39
    29be:	08 c0       	rjmp	.+16     	; 0x29d0 <HCLCD_Vid4Bits_Init+0x2a>
	{
	MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    29c0:	89 ad       	ldd	r24, Y+57	; 0x39
    29c2:	60 e0       	ldi	r22, 0x00	; 0
    29c4:	41 e0       	ldi	r20, 0x01	; 1
    29c6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_Error_State_SetPinDirection>
}
void HCLCD_Vid4Bits_Init(void)
{
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    29ca:	89 ad       	ldd	r24, Y+57	; 0x39
    29cc:	81 50       	subi	r24, 0x01	; 1
    29ce:	89 af       	std	Y+57, r24	; 0x39
    29d0:	89 ad       	ldd	r24, Y+57	; 0x39
    29d2:	83 30       	cpi	r24, 0x03	; 3
    29d4:	ac f7       	brge	.-22     	; 0x29c0 <HCLCD_Vid4Bits_Init+0x1a>
	{
	MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	41 e0       	ldi	r20, 0x01	; 1
    29dc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_Error_State_SetPinDirection>
	//MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    29e0:	82 e0       	ldi	r24, 0x02	; 2
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	41 e0       	ldi	r20, 0x01	; 1
    29e6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_Error_State_SetPinDirection>
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	a0 ef       	ldi	r26, 0xF0	; 240
    29f0:	b1 e4       	ldi	r27, 0x41	; 65
    29f2:	8d ab       	std	Y+53, r24	; 0x35
    29f4:	9e ab       	std	Y+54, r25	; 0x36
    29f6:	af ab       	std	Y+55, r26	; 0x37
    29f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fa:	6d a9       	ldd	r22, Y+53	; 0x35
    29fc:	7e a9       	ldd	r23, Y+54	; 0x36
    29fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2a00:	98 ad       	ldd	r25, Y+56	; 0x38
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	4a ef       	ldi	r20, 0xFA	; 250
    2a08:	54 e4       	ldi	r21, 0x44	; 68
    2a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	89 ab       	std	Y+49, r24	; 0x31
    2a14:	9a ab       	std	Y+50, r25	; 0x32
    2a16:	ab ab       	std	Y+51, r26	; 0x33
    2a18:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a20:	9c a9       	ldd	r25, Y+52	; 0x34
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e8       	ldi	r20, 0x80	; 128
    2a28:	5f e3       	ldi	r21, 0x3F	; 63
    2a2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a2e:	88 23       	and	r24, r24
    2a30:	2c f4       	brge	.+10     	; 0x2a3c <HCLCD_Vid4Bits_Init+0x96>
		__ticks = 1;
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	98 ab       	std	Y+48, r25	; 0x30
    2a38:	8f a7       	std	Y+47, r24	; 0x2f
    2a3a:	3f c0       	rjmp	.+126    	; 0x2aba <HCLCD_Vid4Bits_Init+0x114>
	else if (__tmp > 65535)
    2a3c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a3e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a40:	8b a9       	ldd	r24, Y+51	; 0x33
    2a42:	9c a9       	ldd	r25, Y+52	; 0x34
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	3f ef       	ldi	r19, 0xFF	; 255
    2a48:	4f e7       	ldi	r20, 0x7F	; 127
    2a4a:	57 e4       	ldi	r21, 0x47	; 71
    2a4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a50:	18 16       	cp	r1, r24
    2a52:	4c f5       	brge	.+82     	; 0x2aa6 <HCLCD_Vid4Bits_Init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a54:	6d a9       	ldd	r22, Y+53	; 0x35
    2a56:	7e a9       	ldd	r23, Y+54	; 0x36
    2a58:	8f a9       	ldd	r24, Y+55	; 0x37
    2a5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e2       	ldi	r20, 0x20	; 32
    2a62:	51 e4       	ldi	r21, 0x41	; 65
    2a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	bc 01       	movw	r22, r24
    2a6e:	cd 01       	movw	r24, r26
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	98 ab       	std	Y+48, r25	; 0x30
    2a7a:	8f a7       	std	Y+47, r24	; 0x2f
    2a7c:	0f c0       	rjmp	.+30     	; 0x2a9c <HCLCD_Vid4Bits_Init+0xf6>
    2a7e:	88 ec       	ldi	r24, 0xC8	; 200
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9e a7       	std	Y+46, r25	; 0x2e
    2a84:	8d a7       	std	Y+45, r24	; 0x2d
    2a86:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a88:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <HCLCD_Vid4Bits_Init+0xe4>
    2a8e:	9e a7       	std	Y+46, r25	; 0x2e
    2a90:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a94:	98 a9       	ldd	r25, Y+48	; 0x30
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	98 ab       	std	Y+48, r25	; 0x30
    2a9a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a9e:	98 a9       	ldd	r25, Y+48	; 0x30
    2aa0:	00 97       	sbiw	r24, 0x00	; 0
    2aa2:	69 f7       	brne	.-38     	; 0x2a7e <HCLCD_Vid4Bits_Init+0xd8>
    2aa4:	14 c0       	rjmp	.+40     	; 0x2ace <HCLCD_Vid4Bits_Init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa6:	69 a9       	ldd	r22, Y+49	; 0x31
    2aa8:	7a a9       	ldd	r23, Y+50	; 0x32
    2aaa:	8b a9       	ldd	r24, Y+51	; 0x33
    2aac:	9c a9       	ldd	r25, Y+52	; 0x34
    2aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	98 ab       	std	Y+48, r25	; 0x30
    2ab8:	8f a7       	std	Y+47, r24	; 0x2f
    2aba:	8f a5       	ldd	r24, Y+47	; 0x2f
    2abc:	98 a9       	ldd	r25, Y+48	; 0x30
    2abe:	9c a7       	std	Y+44, r25	; 0x2c
    2ac0:	8b a7       	std	Y+43, r24	; 0x2b
    2ac2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ac4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <HCLCD_Vid4Bits_Init+0x120>
    2aca:	9c a7       	std	Y+44, r25	; 0x2c
    2acc:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_VidWriteCommand_4Bits(HCLCD_FUNCTION_SET>>4);
    2ace:	82 e0       	ldi	r24, 0x02	; 2
    2ad0:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(HCLCD_FUNCTION_SET>>4);
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(HCLCD_FUNCTION_SET);
    2ada:	88 e2       	ldi	r24, 0x28	; 40
    2adc:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	a0 e8       	ldi	r26, 0x80	; 128
    2ae6:	bf e3       	ldi	r27, 0x3F	; 63
    2ae8:	8f a3       	std	Y+39, r24	; 0x27
    2aea:	98 a7       	std	Y+40, r25	; 0x28
    2aec:	a9 a7       	std	Y+41, r26	; 0x29
    2aee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af0:	6f a1       	ldd	r22, Y+39	; 0x27
    2af2:	78 a5       	ldd	r23, Y+40	; 0x28
    2af4:	89 a5       	ldd	r24, Y+41	; 0x29
    2af6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	4a ef       	ldi	r20, 0xFA	; 250
    2afe:	54 e4       	ldi	r21, 0x44	; 68
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8b a3       	std	Y+35, r24	; 0x23
    2b0a:	9c a3       	std	Y+36, r25	; 0x24
    2b0c:	ad a3       	std	Y+37, r26	; 0x25
    2b0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b10:	6b a1       	ldd	r22, Y+35	; 0x23
    2b12:	7c a1       	ldd	r23, Y+36	; 0x24
    2b14:	8d a1       	ldd	r24, Y+37	; 0x25
    2b16:	9e a1       	ldd	r25, Y+38	; 0x26
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e8       	ldi	r20, 0x80	; 128
    2b1e:	5f e3       	ldi	r21, 0x3F	; 63
    2b20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b24:	88 23       	and	r24, r24
    2b26:	2c f4       	brge	.+10     	; 0x2b32 <HCLCD_Vid4Bits_Init+0x18c>
		__ticks = 1;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	9a a3       	std	Y+34, r25	; 0x22
    2b2e:	89 a3       	std	Y+33, r24	; 0x21
    2b30:	3f c0       	rjmp	.+126    	; 0x2bb0 <HCLCD_Vid4Bits_Init+0x20a>
	else if (__tmp > 65535)
    2b32:	6b a1       	ldd	r22, Y+35	; 0x23
    2b34:	7c a1       	ldd	r23, Y+36	; 0x24
    2b36:	8d a1       	ldd	r24, Y+37	; 0x25
    2b38:	9e a1       	ldd	r25, Y+38	; 0x26
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	3f ef       	ldi	r19, 0xFF	; 255
    2b3e:	4f e7       	ldi	r20, 0x7F	; 127
    2b40:	57 e4       	ldi	r21, 0x47	; 71
    2b42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b46:	18 16       	cp	r1, r24
    2b48:	4c f5       	brge	.+82     	; 0x2b9c <HCLCD_Vid4Bits_Init+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e2       	ldi	r20, 0x20	; 32
    2b58:	51 e4       	ldi	r21, 0x41	; 65
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9a a3       	std	Y+34, r25	; 0x22
    2b70:	89 a3       	std	Y+33, r24	; 0x21
    2b72:	0f c0       	rjmp	.+30     	; 0x2b92 <HCLCD_Vid4Bits_Init+0x1ec>
    2b74:	88 ec       	ldi	r24, 0xC8	; 200
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	98 a3       	std	Y+32, r25	; 0x20
    2b7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2b7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b7e:	98 a1       	ldd	r25, Y+32	; 0x20
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <HCLCD_Vid4Bits_Init+0x1da>
    2b84:	98 a3       	std	Y+32, r25	; 0x20
    2b86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b88:	89 a1       	ldd	r24, Y+33	; 0x21
    2b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	9a a3       	std	Y+34, r25	; 0x22
    2b90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b92:	89 a1       	ldd	r24, Y+33	; 0x21
    2b94:	9a a1       	ldd	r25, Y+34	; 0x22
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	69 f7       	brne	.-38     	; 0x2b74 <HCLCD_Vid4Bits_Init+0x1ce>
    2b9a:	14 c0       	rjmp	.+40     	; 0x2bc4 <HCLCD_Vid4Bits_Init+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	9a a3       	std	Y+34, r25	; 0x22
    2bae:	89 a3       	std	Y+33, r24	; 0x21
    2bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2bb6:	8d 8f       	std	Y+29, r24	; 0x1d
    2bb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <HCLCD_Vid4Bits_Init+0x216>
    2bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2bc2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_VidWriteCommand_4Bits(HCLCD_DISPLAY_ON_OFF>>4);
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(HCLCD_DISPLAY_ON_OFF);
    2bca:	8f e0       	ldi	r24, 0x0F	; 15
    2bcc:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	a0 e8       	ldi	r26, 0x80	; 128
    2bd6:	bf e3       	ldi	r27, 0x3F	; 63
    2bd8:	89 8f       	std	Y+25, r24	; 0x19
    2bda:	9a 8f       	std	Y+26, r25	; 0x1a
    2bdc:	ab 8f       	std	Y+27, r26	; 0x1b
    2bde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be0:	69 8d       	ldd	r22, Y+25	; 0x19
    2be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	4a ef       	ldi	r20, 0xFA	; 250
    2bee:	54 e4       	ldi	r21, 0x44	; 68
    2bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	8d 8b       	std	Y+21, r24	; 0x15
    2bfa:	9e 8b       	std	Y+22, r25	; 0x16
    2bfc:	af 8b       	std	Y+23, r26	; 0x17
    2bfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c00:	6d 89       	ldd	r22, Y+21	; 0x15
    2c02:	7e 89       	ldd	r23, Y+22	; 0x16
    2c04:	8f 89       	ldd	r24, Y+23	; 0x17
    2c06:	98 8d       	ldd	r25, Y+24	; 0x18
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e8       	ldi	r20, 0x80	; 128
    2c0e:	5f e3       	ldi	r21, 0x3F	; 63
    2c10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c14:	88 23       	and	r24, r24
    2c16:	2c f4       	brge	.+10     	; 0x2c22 <HCLCD_Vid4Bits_Init+0x27c>
		__ticks = 1;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	9c 8b       	std	Y+20, r25	; 0x14
    2c1e:	8b 8b       	std	Y+19, r24	; 0x13
    2c20:	3f c0       	rjmp	.+126    	; 0x2ca0 <HCLCD_Vid4Bits_Init+0x2fa>
	else if (__tmp > 65535)
    2c22:	6d 89       	ldd	r22, Y+21	; 0x15
    2c24:	7e 89       	ldd	r23, Y+22	; 0x16
    2c26:	8f 89       	ldd	r24, Y+23	; 0x17
    2c28:	98 8d       	ldd	r25, Y+24	; 0x18
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	3f ef       	ldi	r19, 0xFF	; 255
    2c2e:	4f e7       	ldi	r20, 0x7F	; 127
    2c30:	57 e4       	ldi	r21, 0x47	; 71
    2c32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c36:	18 16       	cp	r1, r24
    2c38:	4c f5       	brge	.+82     	; 0x2c8c <HCLCD_Vid4Bits_Init+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	40 e2       	ldi	r20, 0x20	; 32
    2c48:	51 e4       	ldi	r21, 0x41	; 65
    2c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	9c 8b       	std	Y+20, r25	; 0x14
    2c60:	8b 8b       	std	Y+19, r24	; 0x13
    2c62:	0f c0       	rjmp	.+30     	; 0x2c82 <HCLCD_Vid4Bits_Init+0x2dc>
    2c64:	88 ec       	ldi	r24, 0xC8	; 200
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	9a 8b       	std	Y+18, r25	; 0x12
    2c6a:	89 8b       	std	Y+17, r24	; 0x11
    2c6c:	89 89       	ldd	r24, Y+17	; 0x11
    2c6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	f1 f7       	brne	.-4      	; 0x2c70 <HCLCD_Vid4Bits_Init+0x2ca>
    2c74:	9a 8b       	std	Y+18, r25	; 0x12
    2c76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c78:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	9c 8b       	std	Y+20, r25	; 0x14
    2c80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c82:	8b 89       	ldd	r24, Y+19	; 0x13
    2c84:	9c 89       	ldd	r25, Y+20	; 0x14
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	69 f7       	brne	.-38     	; 0x2c64 <HCLCD_Vid4Bits_Init+0x2be>
    2c8a:	14 c0       	rjmp	.+40     	; 0x2cb4 <HCLCD_Vid4Bits_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c90:	8f 89       	ldd	r24, Y+23	; 0x17
    2c92:	98 8d       	ldd	r25, Y+24	; 0x18
    2c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9c 8b       	std	Y+20, r25	; 0x14
    2c9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca4:	98 8b       	std	Y+16, r25	; 0x10
    2ca6:	8f 87       	std	Y+15, r24	; 0x0f
    2ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2caa:	98 89       	ldd	r25, Y+16	; 0x10
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	f1 f7       	brne	.-4      	; 0x2cac <HCLCD_Vid4Bits_Init+0x306>
    2cb0:	98 8b       	std	Y+16, r25	; 0x10
    2cb2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_VidWriteCommand_4Bits(DISPLAY_CLEAR>>4);
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(DISPLAY_CLEAR);
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	a0 e0       	ldi	r26, 0x00	; 0
    2cc6:	b0 e4       	ldi	r27, 0x40	; 64
    2cc8:	8b 87       	std	Y+11, r24	; 0x0b
    2cca:	9c 87       	std	Y+12, r25	; 0x0c
    2ccc:	ad 87       	std	Y+13, r26	; 0x0d
    2cce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	4a ef       	ldi	r20, 0xFA	; 250
    2cde:	54 e4       	ldi	r21, 0x44	; 68
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	8f 83       	std	Y+7, r24	; 0x07
    2cea:	98 87       	std	Y+8, r25	; 0x08
    2cec:	a9 87       	std	Y+9, r26	; 0x09
    2cee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf2:	78 85       	ldd	r23, Y+8	; 0x08
    2cf4:	89 85       	ldd	r24, Y+9	; 0x09
    2cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e8       	ldi	r20, 0x80	; 128
    2cfe:	5f e3       	ldi	r21, 0x3F	; 63
    2d00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d04:	88 23       	and	r24, r24
    2d06:	2c f4       	brge	.+10     	; 0x2d12 <HCLCD_Vid4Bits_Init+0x36c>
		__ticks = 1;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	9e 83       	std	Y+6, r25	; 0x06
    2d0e:	8d 83       	std	Y+5, r24	; 0x05
    2d10:	3f c0       	rjmp	.+126    	; 0x2d90 <HCLCD_Vid4Bits_Init+0x3ea>
	else if (__tmp > 65535)
    2d12:	6f 81       	ldd	r22, Y+7	; 0x07
    2d14:	78 85       	ldd	r23, Y+8	; 0x08
    2d16:	89 85       	ldd	r24, Y+9	; 0x09
    2d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	3f ef       	ldi	r19, 0xFF	; 255
    2d1e:	4f e7       	ldi	r20, 0x7F	; 127
    2d20:	57 e4       	ldi	r21, 0x47	; 71
    2d22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d26:	18 16       	cp	r1, r24
    2d28:	4c f5       	brge	.+82     	; 0x2d7c <HCLCD_Vid4Bits_Init+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e2       	ldi	r20, 0x20	; 32
    2d38:	51 e4       	ldi	r21, 0x41	; 65
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	9e 83       	std	Y+6, r25	; 0x06
    2d50:	8d 83       	std	Y+5, r24	; 0x05
    2d52:	0f c0       	rjmp	.+30     	; 0x2d72 <HCLCD_Vid4Bits_Init+0x3cc>
    2d54:	88 ec       	ldi	r24, 0xC8	; 200
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9c 83       	std	Y+4, r25	; 0x04
    2d5a:	8b 83       	std	Y+3, r24	; 0x03
    2d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <HCLCD_Vid4Bits_Init+0x3ba>
    2d64:	9c 83       	std	Y+4, r25	; 0x04
    2d66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d68:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	9e 83       	std	Y+6, r25	; 0x06
    2d70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d72:	8d 81       	ldd	r24, Y+5	; 0x05
    2d74:	9e 81       	ldd	r25, Y+6	; 0x06
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	69 f7       	brne	.-38     	; 0x2d54 <HCLCD_Vid4Bits_Init+0x3ae>
    2d7a:	14 c0       	rjmp	.+40     	; 0x2da4 <HCLCD_Vid4Bits_Init+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7e:	78 85       	ldd	r23, Y+8	; 0x08
    2d80:	89 85       	ldd	r24, Y+9	; 0x09
    2d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	9e 83       	std	Y+6, r25	; 0x06
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
    2d92:	9e 81       	ldd	r25, Y+6	; 0x06
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    2d96:	89 83       	std	Y+1, r24	; 0x01
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <HCLCD_Vid4Bits_Init+0x3f6>
    2da0:	9a 83       	std	Y+2, r25	; 0x02
    2da2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_VidWriteCommand_4Bits(HCLCD_ENTRY_MODE_SET>>4);
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(HCLCD_ENTRY_MODE_SET);
    2daa:	86 e0       	ldi	r24, 0x06	; 6
    2dac:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
}
    2db0:	e9 96       	adiw	r28, 0x39	; 57
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
    2dbc:	cf 91       	pop	r28
    2dbe:	df 91       	pop	r29
    2dc0:	08 95       	ret

00002dc2 <HCLCD_VidWriteChar_4Bits>:
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	60 97       	sbiw	r28, 0x10	; 16
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	88 8b       	std	Y+16, r24	; 0x10
	u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	60 e0       	ldi	r22, 0x00	; 0
    2ddc:	41 e0       	ldi	r20, 0x01	; 1
    2dde:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	//MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
	/*Send Data*/
	LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
    2de2:	88 89       	ldd	r24, Y+16	; 0x10
    2de4:	8f 70       	andi	r24, 0x0F	; 15
    2de6:	88 0f       	add	r24, r24
    2de8:	88 0f       	add	r24, r24
    2dea:	88 0f       	add	r24, r24
    2dec:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,LOC_u8CopyData);
    2dee:	83 e0       	ldi	r24, 0x03	; 3
    2df0:	60 e0       	ldi	r22, 0x00	; 0
    2df2:	4f 85       	ldd	r20, Y+15	; 0x0f
    2df4:	0e 94 88 0c 	call	0x1910	; 0x1910 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2df8:	82 e0       	ldi	r24, 0x02	; 2
    2dfa:	60 e0       	ldi	r22, 0x00	; 0
    2dfc:	41 e0       	ldi	r20, 0x01	; 1
    2dfe:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	a0 e0       	ldi	r26, 0x00	; 0
    2e08:	b0 e4       	ldi	r27, 0x40	; 64
    2e0a:	8b 87       	std	Y+11, r24	; 0x0b
    2e0c:	9c 87       	std	Y+12, r25	; 0x0c
    2e0e:	ad 87       	std	Y+13, r26	; 0x0d
    2e10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	4a ef       	ldi	r20, 0xFA	; 250
    2e20:	54 e4       	ldi	r21, 0x44	; 68
    2e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	8f 83       	std	Y+7, r24	; 0x07
    2e2c:	98 87       	std	Y+8, r25	; 0x08
    2e2e:	a9 87       	std	Y+9, r26	; 0x09
    2e30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e32:	6f 81       	ldd	r22, Y+7	; 0x07
    2e34:	78 85       	ldd	r23, Y+8	; 0x08
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e8       	ldi	r20, 0x80	; 128
    2e40:	5f e3       	ldi	r21, 0x3F	; 63
    2e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <HCLCD_VidWriteChar_4Bits+0x92>
		__ticks = 1;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9e 83       	std	Y+6, r25	; 0x06
    2e50:	8d 83       	std	Y+5, r24	; 0x05
    2e52:	3f c0       	rjmp	.+126    	; 0x2ed2 <HCLCD_VidWriteChar_4Bits+0x110>
	else if (__tmp > 65535)
    2e54:	6f 81       	ldd	r22, Y+7	; 0x07
    2e56:	78 85       	ldd	r23, Y+8	; 0x08
    2e58:	89 85       	ldd	r24, Y+9	; 0x09
    2e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	3f ef       	ldi	r19, 0xFF	; 255
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	57 e4       	ldi	r21, 0x47	; 71
    2e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e68:	18 16       	cp	r1, r24
    2e6a:	4c f5       	brge	.+82     	; 0x2ebe <HCLCD_VidWriteChar_4Bits+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e2       	ldi	r20, 0x20	; 32
    2e7a:	51 e4       	ldi	r21, 0x41	; 65
    2e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	0f c0       	rjmp	.+30     	; 0x2eb4 <HCLCD_VidWriteChar_4Bits+0xf2>
    2e96:	88 ec       	ldi	r24, 0xC8	; 200
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	9c 83       	std	Y+4, r25	; 0x04
    2e9c:	8b 83       	std	Y+3, r24	; 0x03
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	f1 f7       	brne	.-4      	; 0x2ea2 <HCLCD_VidWriteChar_4Bits+0xe0>
    2ea6:	9c 83       	std	Y+4, r25	; 0x04
    2ea8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2eac:	9e 81       	ldd	r25, Y+6	; 0x06
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	9e 83       	std	Y+6, r25	; 0x06
    2eb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	69 f7       	brne	.-38     	; 0x2e96 <HCLCD_VidWriteChar_4Bits+0xd4>
    2ebc:	14 c0       	rjmp	.+40     	; 0x2ee6 <HCLCD_VidWriteChar_4Bits+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec0:	78 85       	ldd	r23, Y+8	; 0x08
    2ec2:	89 85       	ldd	r24, Y+9	; 0x09
    2ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	9e 83       	std	Y+6, r25	; 0x06
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
    2ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed6:	9a 83       	std	Y+2, r25	; 0x02
    2ed8:	89 83       	std	Y+1, r24	; 0x01
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <HCLCD_VidWriteChar_4Bits+0x11c>
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2ee6:	82 e0       	ldi	r24, 0x02	; 2
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	0e 94 a5 0a 	call	0x154a	; 0x154a <MDIO_Error_State_SetPinValue>
}
    2ef0:	60 96       	adiw	r28, 0x10	; 16
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <HCLCD_VidSendChar_4Bits>:
void HCLCD_VidSendChar_4Bits(u8 Copy_u8Data)
{
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	0f 92       	push	r0
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	82 95       	swap	r24
    2f12:	8f 70       	andi	r24, 0x0F	; 15
    2f14:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <HCLCD_VidWriteChar_4Bits>
}
    2f1e:	0f 90       	pop	r0
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <HCLCD_VidWriteString_4Bits>:
void HCLCD_VidWriteString_4Bits(u8* PCopy_u8String)
{
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <HCLCD_VidWriteString_4Bits+0x6>
    2f2c:	0f 92       	push	r0
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	9b 83       	std	Y+3, r25	; 0x03
    2f34:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2f36:	19 82       	std	Y+1, r1	; 0x01
    2f38:	0e c0       	rjmp	.+28     	; 0x2f56 <HCLCD_VidWriteString_4Bits+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_VidSendChar_4Bits(PCopy_u8String[Loc_u8Count]);
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	28 2f       	mov	r18, r24
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	8a 81       	ldd	r24, Y+2	; 0x02
    2f42:	9b 81       	ldd	r25, Y+3	; 0x03
    2f44:	fc 01       	movw	r30, r24
    2f46:	e2 0f       	add	r30, r18
    2f48:	f3 1f       	adc	r31, r19
    2f4a:	80 81       	ld	r24, Z
    2f4c:	0e 94 81 17 	call	0x2f02	; 0x2f02 <HCLCD_VidSendChar_4Bits>
		Loc_u8Count++;
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	8f 5f       	subi	r24, 0xFF	; 255
    2f54:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
}
void HCLCD_VidWriteString_4Bits(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	28 2f       	mov	r18, r24
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f60:	fc 01       	movw	r30, r24
    2f62:	e2 0f       	add	r30, r18
    2f64:	f3 1f       	adc	r31, r19
    2f66:	80 81       	ld	r24, Z
    2f68:	88 23       	and	r24, r24
    2f6a:	39 f7       	brne	.-50     	; 0x2f3a <HCLCD_VidWriteString_4Bits+0x14>
	{
		HCLCD_VidSendChar_4Bits(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <HCLCD_VidWriteNumber_4Bits>:
void HCLCD_VidWriteNumber_4Bits(u32 Copy_u8Number)
{
    2f78:	0f 93       	push	r16
    2f7a:	1f 93       	push	r17
    2f7c:	df 93       	push	r29
    2f7e:	cf 93       	push	r28
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	60 97       	sbiw	r28, 0x10	; 16
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	6d 87       	std	Y+13, r22	; 0x0d
    2f92:	7e 87       	std	Y+14, r23	; 0x0e
    2f94:	8f 87       	std	Y+15, r24	; 0x0f
    2f96:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2f98:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9e:	af 85       	ldd	r26, Y+15	; 0x0f
    2fa0:	b8 89       	ldd	r27, Y+16	; 0x10
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	a1 05       	cpc	r26, r1
    2fa6:	b1 05       	cpc	r27, r1
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <HCLCD_VidWriteNumber_4Bits+0x34>
    2faa:	4f c0       	rjmp	.+158    	; 0x304a <HCLCD_VidWriteNumber_4Bits+0xd2>
    2fac:	2d c0       	rjmp	.+90     	; 0x3008 <HCLCD_VidWriteNumber_4Bits+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2fae:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb0:	08 2f       	mov	r16, r24
    2fb2:	10 e0       	ldi	r17, 0x00	; 0
    2fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb8:	af 85       	ldd	r26, Y+15	; 0x0f
    2fba:	b8 89       	ldd	r27, Y+16	; 0x10
    2fbc:	2a e0       	ldi	r18, 0x0A	; 10
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e0       	ldi	r20, 0x00	; 0
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	cd 01       	movw	r24, r26
    2fc8:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__udivmodsi4>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	28 2f       	mov	r18, r24
    2fd2:	ce 01       	movw	r24, r28
    2fd4:	03 96       	adiw	r24, 0x03	; 3
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	e0 0f       	add	r30, r16
    2fda:	f1 1f       	adc	r31, r17
    2fdc:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe2:	af 85       	ldd	r26, Y+15	; 0x0f
    2fe4:	b8 89       	ldd	r27, Y+16	; 0x10
    2fe6:	2a e0       	ldi	r18, 0x0A	; 10
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	50 e0       	ldi	r21, 0x00	; 0
    2fee:	bc 01       	movw	r22, r24
    2ff0:	cd 01       	movw	r24, r26
    2ff2:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__udivmodsi4>
    2ff6:	da 01       	movw	r26, r20
    2ff8:	c9 01       	movw	r24, r18
    2ffa:	8d 87       	std	Y+13, r24	; 0x0d
    2ffc:	9e 87       	std	Y+14, r25	; 0x0e
    2ffe:	af 87       	std	Y+15, r26	; 0x0f
    3000:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    3002:	8a 81       	ldd	r24, Y+2	; 0x02
    3004:	8f 5f       	subi	r24, 0xFF	; 255
    3006:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    3008:	8d 85       	ldd	r24, Y+13	; 0x0d
    300a:	9e 85       	ldd	r25, Y+14	; 0x0e
    300c:	af 85       	ldd	r26, Y+15	; 0x0f
    300e:	b8 89       	ldd	r27, Y+16	; 0x10
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	a1 05       	cpc	r26, r1
    3014:	b1 05       	cpc	r27, r1
    3016:	59 f6       	brne	.-106    	; 0x2fae <HCLCD_VidWriteNumber_4Bits+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3018:	8a 81       	ldd	r24, Y+2	; 0x02
    301a:	81 50       	subi	r24, 0x01	; 1
    301c:	89 83       	std	Y+1, r24	; 0x01
    301e:	11 c0       	rjmp	.+34     	; 0x3042 <HCLCD_VidWriteNumber_4Bits+0xca>
		{
			HCLCD_VidSendChar_4Bits(ARR_Digits[i]+'0');
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	28 2f       	mov	r18, r24
    3024:	33 27       	eor	r19, r19
    3026:	27 fd       	sbrc	r18, 7
    3028:	30 95       	com	r19
    302a:	ce 01       	movw	r24, r28
    302c:	03 96       	adiw	r24, 0x03	; 3
    302e:	fc 01       	movw	r30, r24
    3030:	e2 0f       	add	r30, r18
    3032:	f3 1f       	adc	r31, r19
    3034:	80 81       	ld	r24, Z
    3036:	80 5d       	subi	r24, 0xD0	; 208
    3038:	0e 94 81 17 	call	0x2f02	; 0x2f02 <HCLCD_VidSendChar_4Bits>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	81 50       	subi	r24, 0x01	; 1
    3040:	89 83       	std	Y+1, r24	; 0x01
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	88 23       	and	r24, r24
    3046:	64 f7       	brge	.-40     	; 0x3020 <HCLCD_VidWriteNumber_4Bits+0xa8>
    3048:	03 c0       	rjmp	.+6      	; 0x3050 <HCLCD_VidWriteNumber_4Bits+0xd8>
			HCLCD_VidSendChar_4Bits(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_VidWriteChar_8Bits('0');
    304a:	80 e3       	ldi	r24, 0x30	; 48
    304c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <HCLCD_VidWriteChar_8Bits>
	}
}
    3050:	60 96       	adiw	r28, 0x10	; 16
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	1f 91       	pop	r17
    3062:	0f 91       	pop	r16
    3064:	08 95       	ret

00003066 <HCLCD_VidSetPosition_4BitsMode>:
void HCLCD_VidSetPosition_4BitsMode(u8 Copy_u8LineNumber , u8 Copy_u8PositionNumber)
{
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	00 d0       	rcall	.+0      	; 0x306c <HCLCD_VidSetPosition_4BitsMode+0x6>
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	89 83       	std	Y+1, r24	; 0x01
    3072:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	b9 f4       	brne	.+46     	; 0x30a8 <HCLCD_VidSetPosition_4BitsMode+0x42>
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	80 31       	cpi	r24, 0x10	; 16
    307e:	a0 f4       	brcc	.+40     	; 0x30a8 <HCLCD_VidSetPosition_4BitsMode+0x42>
	{
		HCLCD_VidWriteCommand_4Bits((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3080:	8a 81       	ldd	r24, Y+2	; 0x02
    3082:	88 2f       	mov	r24, r24
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	80 58       	subi	r24, 0x80	; 128
    3088:	9f 4f       	sbci	r25, 0xFF	; 255
    308a:	95 95       	asr	r25
    308c:	87 95       	ror	r24
    308e:	95 95       	asr	r25
    3090:	87 95       	ror	r24
    3092:	95 95       	asr	r25
    3094:	87 95       	ror	r24
    3096:	95 95       	asr	r25
    3098:	87 95       	ror	r24
    309a:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
		HCLCD_VidWriteCommand_4Bits((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    309e:	8a 81       	ldd	r24, Y+2	; 0x02
    30a0:	80 58       	subi	r24, 0x80	; 128
    30a2:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
    30a6:	19 c0       	rjmp	.+50     	; 0x30da <HCLCD_VidSetPosition_4BitsMode+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	82 30       	cpi	r24, 0x02	; 2
    30ac:	b1 f4       	brne	.+44     	; 0x30da <HCLCD_VidSetPosition_4BitsMode+0x74>
    30ae:	8a 81       	ldd	r24, Y+2	; 0x02
    30b0:	80 31       	cpi	r24, 0x10	; 16
    30b2:	98 f4       	brcc	.+38     	; 0x30da <HCLCD_VidSetPosition_4BitsMode+0x74>
	{
		HCLCD_VidWriteCommand_4Bits((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    30b4:	8a 81       	ldd	r24, Y+2	; 0x02
    30b6:	88 2f       	mov	r24, r24
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	80 54       	subi	r24, 0x40	; 64
    30bc:	9f 4f       	sbci	r25, 0xFF	; 255
    30be:	95 95       	asr	r25
    30c0:	87 95       	ror	r24
    30c2:	95 95       	asr	r25
    30c4:	87 95       	ror	r24
    30c6:	95 95       	asr	r25
    30c8:	87 95       	ror	r24
    30ca:	95 95       	asr	r25
    30cc:	87 95       	ror	r24
    30ce:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
		HCLCD_VidWriteCommand_4Bits((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    30d2:	8a 81       	ldd	r24, Y+2	; 0x02
    30d4:	80 54       	subi	r24, 0x40	; 64
    30d6:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
	}
	else
	{
		/*Do Nothing*/
	}
}
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	cf 91       	pop	r28
    30e0:	df 91       	pop	r29
    30e2:	08 95       	ret

000030e4 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    30e4:	df 93       	push	r29
    30e6:	cf 93       	push	r28
    30e8:	cd b7       	in	r28, 0x3d	; 61
    30ea:	de b7       	in	r29, 0x3e	; 62
    30ec:	27 97       	sbiw	r28, 0x07	; 7
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	f8 94       	cli
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	cd bf       	out	0x3d, r28	; 61
    30f8:	9d 83       	std	Y+5, r25	; 0x05
    30fa:	8c 83       	std	Y+4, r24	; 0x04
    30fc:	6e 83       	std	Y+6, r22	; 0x06
    30fe:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    3100:	8a e1       	ldi	r24, 0x1A	; 26
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	0e 94 4a 1b 	call	0x3694	; 0x3694 <pvPortMalloc>
    3108:	9a 83       	std	Y+2, r25	; 0x02
    310a:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	9a 81       	ldd	r25, Y+2	; 0x02
    3110:	00 97       	sbiw	r24, 0x00	; 0
    3112:	09 f4       	brne	.+2      	; 0x3116 <xCoRoutineCreate+0x32>
    3114:	6f c0       	rjmp	.+222    	; 0x31f4 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    3116:	80 91 8f 00 	lds	r24, 0x008F
    311a:	90 91 90 00 	lds	r25, 0x0090
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	41 f4       	brne	.+16     	; 0x3132 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    3122:	89 81       	ldd	r24, Y+1	; 0x01
    3124:	9a 81       	ldd	r25, Y+2	; 0x02
    3126:	90 93 90 00 	sts	0x0090, r25
    312a:	80 93 8f 00 	sts	0x008F, r24
			prvInitialiseCoRoutineLists();
    312e:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    3132:	8e 81       	ldd	r24, Y+6	; 0x06
    3134:	82 30       	cpi	r24, 0x02	; 2
    3136:	10 f0       	brcs	.+4      	; 0x313c <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    313c:	e9 81       	ldd	r30, Y+1	; 0x01
    313e:	fa 81       	ldd	r31, Y+2	; 0x02
    3140:	11 8e       	std	Z+25, r1	; 0x19
    3142:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    3144:	e9 81       	ldd	r30, Y+1	; 0x01
    3146:	fa 81       	ldd	r31, Y+2	; 0x02
    3148:	8e 81       	ldd	r24, Y+6	; 0x06
    314a:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    314c:	e9 81       	ldd	r30, Y+1	; 0x01
    314e:	fa 81       	ldd	r31, Y+2	; 0x02
    3150:	8f 81       	ldd	r24, Y+7	; 0x07
    3152:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    3154:	e9 81       	ldd	r30, Y+1	; 0x01
    3156:	fa 81       	ldd	r31, Y+2	; 0x02
    3158:	8c 81       	ldd	r24, Y+4	; 0x04
    315a:	9d 81       	ldd	r25, Y+5	; 0x05
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	9a 81       	ldd	r25, Y+2	; 0x02
    3164:	02 96       	adiw	r24, 0x02	; 2
    3166:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	9a 81       	ldd	r25, Y+2	; 0x02
    316e:	0c 96       	adiw	r24, 0x0c	; 12
    3170:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    3174:	e9 81       	ldd	r30, Y+1	; 0x01
    3176:	fa 81       	ldd	r31, Y+2	; 0x02
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
    317c:	91 87       	std	Z+9, r25	; 0x09
    317e:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    3180:	e9 81       	ldd	r30, Y+1	; 0x01
    3182:	fa 81       	ldd	r31, Y+2	; 0x02
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	9a 81       	ldd	r25, Y+2	; 0x02
    3188:	93 8b       	std	Z+19, r25	; 0x13
    318a:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    318c:	8e 81       	ldd	r24, Y+6	; 0x06
    318e:	28 2f       	mov	r18, r24
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	85 e0       	ldi	r24, 0x05	; 5
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	82 1b       	sub	r24, r18
    3198:	93 0b       	sbc	r25, r19
    319a:	e9 81       	ldd	r30, Y+1	; 0x01
    319c:	fa 81       	ldd	r31, Y+2	; 0x02
    319e:	95 87       	std	Z+13, r25	; 0x0d
    31a0:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    31a2:	e9 81       	ldd	r30, Y+1	; 0x01
    31a4:	fa 81       	ldd	r31, Y+2	; 0x02
    31a6:	96 89       	ldd	r25, Z+22	; 0x16
    31a8:	80 91 91 00 	lds	r24, 0x0091
    31ac:	89 17       	cp	r24, r25
    31ae:	28 f4       	brcc	.+10     	; 0x31ba <xCoRoutineCreate+0xd6>
    31b0:	e9 81       	ldd	r30, Y+1	; 0x01
    31b2:	fa 81       	ldd	r31, Y+2	; 0x02
    31b4:	86 89       	ldd	r24, Z+22	; 0x16
    31b6:	80 93 91 00 	sts	0x0091, r24
    31ba:	e9 81       	ldd	r30, Y+1	; 0x01
    31bc:	fa 81       	ldd	r31, Y+2	; 0x02
    31be:	86 89       	ldd	r24, Z+22	; 0x16
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	c9 01       	movw	r24, r18
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	88 0f       	add	r24, r24
    31cc:	99 1f       	adc	r25, r25
    31ce:	88 0f       	add	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	82 0f       	add	r24, r18
    31d4:	93 1f       	adc	r25, r19
    31d6:	ac 01       	movw	r20, r24
    31d8:	48 56       	subi	r20, 0x68	; 104
    31da:	5f 4f       	sbci	r21, 0xFF	; 255
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	9a 81       	ldd	r25, Y+2	; 0x02
    31e0:	9c 01       	movw	r18, r24
    31e2:	2e 5f       	subi	r18, 0xFE	; 254
    31e4:	3f 4f       	sbci	r19, 0xFF	; 255
    31e6:	ca 01       	movw	r24, r20
    31e8:	b9 01       	movw	r22, r18
    31ea:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <vListInsertEnd>

		xReturn = pdPASS;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	8b 83       	std	Y+3, r24	; 0x03
    31f2:	02 c0       	rjmp	.+4      	; 0x31f8 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    31f4:	8f ef       	ldi	r24, 0xFF	; 255
    31f6:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    31fa:	27 96       	adiw	r28, 0x07	; 7
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	00 d0       	rcall	.+0      	; 0x3212 <vCoRoutineAddToDelayedList+0x6>
    3212:	00 d0       	rcall	.+0      	; 0x3214 <vCoRoutineAddToDelayedList+0x8>
    3214:	00 d0       	rcall	.+0      	; 0x3216 <vCoRoutineAddToDelayedList+0xa>
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
    321a:	9c 83       	std	Y+4, r25	; 0x04
    321c:	8b 83       	std	Y+3, r24	; 0x03
    321e:	7e 83       	std	Y+6, r23	; 0x06
    3220:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    3222:	20 91 92 00 	lds	r18, 0x0092
    3226:	30 91 93 00 	lds	r19, 0x0093
    322a:	8b 81       	ldd	r24, Y+3	; 0x03
    322c:	9c 81       	ldd	r25, Y+4	; 0x04
    322e:	82 0f       	add	r24, r18
    3230:	93 1f       	adc	r25, r19
    3232:	9a 83       	std	Y+2, r25	; 0x02
    3234:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    3236:	80 91 8f 00 	lds	r24, 0x008F
    323a:	90 91 90 00 	lds	r25, 0x0090
    323e:	02 96       	adiw	r24, 0x02	; 2
    3240:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    3244:	e0 91 8f 00 	lds	r30, 0x008F
    3248:	f0 91 90 00 	lds	r31, 0x0090
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	9a 81       	ldd	r25, Y+2	; 0x02
    3250:	93 83       	std	Z+3, r25	; 0x03
    3252:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    3254:	20 91 92 00 	lds	r18, 0x0092
    3258:	30 91 93 00 	lds	r19, 0x0093
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	9a 81       	ldd	r25, Y+2	; 0x02
    3260:	82 17       	cp	r24, r18
    3262:	93 07       	cpc	r25, r19
    3264:	70 f4       	brcc	.+28     	; 0x3282 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    3266:	80 91 be 00 	lds	r24, 0x00BE
    326a:	90 91 bf 00 	lds	r25, 0x00BF
    326e:	20 91 8f 00 	lds	r18, 0x008F
    3272:	30 91 90 00 	lds	r19, 0x0090
    3276:	2e 5f       	subi	r18, 0xFE	; 254
    3278:	3f 4f       	sbci	r19, 0xFF	; 255
    327a:	b9 01       	movw	r22, r18
    327c:	0e 94 3c 1c 	call	0x3878	; 0x3878 <vListInsert>
    3280:	0d c0       	rjmp	.+26     	; 0x329c <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    3282:	80 91 bc 00 	lds	r24, 0x00BC
    3286:	90 91 bd 00 	lds	r25, 0x00BD
    328a:	20 91 8f 00 	lds	r18, 0x008F
    328e:	30 91 90 00 	lds	r19, 0x0090
    3292:	2e 5f       	subi	r18, 0xFE	; 254
    3294:	3f 4f       	sbci	r19, 0xFF	; 255
    3296:	b9 01       	movw	r22, r18
    3298:	0e 94 3c 1c 	call	0x3878	; 0x3878 <vListInsert>
	}

	if( pxEventList )
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	61 f0       	breq	.+24     	; 0x32bc <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    32a4:	80 91 8f 00 	lds	r24, 0x008F
    32a8:	90 91 90 00 	lds	r25, 0x0090
    32ac:	9c 01       	movw	r18, r24
    32ae:	24 5f       	subi	r18, 0xF4	; 244
    32b0:	3f 4f       	sbci	r19, 0xFF	; 255
    32b2:	8d 81       	ldd	r24, Y+5	; 0x05
    32b4:	9e 81       	ldd	r25, Y+6	; 0x06
    32b6:	b9 01       	movw	r22, r18
    32b8:	0e 94 3c 1c 	call	0x3878	; 0x3878 <vListInsert>
	}
}
    32bc:	26 96       	adiw	r28, 0x06	; 6
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	f8 94       	cli
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	cd bf       	out	0x3d, r28	; 61
    32c8:	cf 91       	pop	r28
    32ca:	df 91       	pop	r29
    32cc:	08 95       	ret

000032ce <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <prvCheckPendingReadyList+0x6>
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	3a c0       	rjmp	.+116    	; 0x334e <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    32da:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    32dc:	e0 91 c5 00 	lds	r30, 0x00C5
    32e0:	f0 91 c6 00 	lds	r31, 0x00C6
    32e4:	86 81       	ldd	r24, Z+6	; 0x06
    32e6:	97 81       	ldd	r25, Z+7	; 0x07
    32e8:	9a 83       	std	Y+2, r25	; 0x02
    32ea:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	9a 81       	ldd	r25, Y+2	; 0x02
    32f0:	0c 96       	adiw	r24, 0x0c	; 12
    32f2:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    32f6:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	9a 81       	ldd	r25, Y+2	; 0x02
    32fc:	02 96       	adiw	r24, 0x02	; 2
    32fe:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    3302:	e9 81       	ldd	r30, Y+1	; 0x01
    3304:	fa 81       	ldd	r31, Y+2	; 0x02
    3306:	96 89       	ldd	r25, Z+22	; 0x16
    3308:	80 91 91 00 	lds	r24, 0x0091
    330c:	89 17       	cp	r24, r25
    330e:	28 f4       	brcc	.+10     	; 0x331a <prvCheckPendingReadyList+0x4c>
    3310:	e9 81       	ldd	r30, Y+1	; 0x01
    3312:	fa 81       	ldd	r31, Y+2	; 0x02
    3314:	86 89       	ldd	r24, Z+22	; 0x16
    3316:	80 93 91 00 	sts	0x0091, r24
    331a:	e9 81       	ldd	r30, Y+1	; 0x01
    331c:	fa 81       	ldd	r31, Y+2	; 0x02
    331e:	86 89       	ldd	r24, Z+22	; 0x16
    3320:	28 2f       	mov	r18, r24
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	c9 01       	movw	r24, r18
    3326:	88 0f       	add	r24, r24
    3328:	99 1f       	adc	r25, r25
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	88 0f       	add	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	82 0f       	add	r24, r18
    3334:	93 1f       	adc	r25, r19
    3336:	ac 01       	movw	r20, r24
    3338:	48 56       	subi	r20, 0x68	; 104
    333a:	5f 4f       	sbci	r21, 0xFF	; 255
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	9a 81       	ldd	r25, Y+2	; 0x02
    3340:	9c 01       	movw	r18, r24
    3342:	2e 5f       	subi	r18, 0xFE	; 254
    3344:	3f 4f       	sbci	r19, 0xFF	; 255
    3346:	ca 01       	movw	r24, r20
    3348:	b9 01       	movw	r22, r18
    334a:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    334e:	80 91 c0 00 	lds	r24, 0x00C0
    3352:	88 23       	and	r24, r24
    3354:	09 f0       	breq	.+2      	; 0x3358 <prvCheckPendingReadyList+0x8a>
    3356:	c1 cf       	rjmp	.-126    	; 0x32da <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	00 d0       	rcall	.+0      	; 0x3368 <prvCheckDelayedList+0x6>
    3368:	00 d0       	rcall	.+0      	; 0x336a <prvCheckDelayedList+0x8>
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    336e:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <xTaskGetTickCount>
    3372:	20 91 94 00 	lds	r18, 0x0094
    3376:	30 91 95 00 	lds	r19, 0x0095
    337a:	82 1b       	sub	r24, r18
    337c:	93 0b       	sbc	r25, r19
    337e:	90 93 97 00 	sts	0x0097, r25
    3382:	80 93 96 00 	sts	0x0096, r24
    3386:	85 c0       	rjmp	.+266    	; 0x3492 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    3388:	80 91 92 00 	lds	r24, 0x0092
    338c:	90 91 93 00 	lds	r25, 0x0093
    3390:	01 96       	adiw	r24, 0x01	; 1
    3392:	90 93 93 00 	sts	0x0093, r25
    3396:	80 93 92 00 	sts	0x0092, r24
		xPassedTicks--;
    339a:	80 91 96 00 	lds	r24, 0x0096
    339e:	90 91 97 00 	lds	r25, 0x0097
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	90 93 97 00 	sts	0x0097, r25
    33a8:	80 93 96 00 	sts	0x0096, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    33ac:	80 91 92 00 	lds	r24, 0x0092
    33b0:	90 91 93 00 	lds	r25, 0x0093
    33b4:	00 97       	sbiw	r24, 0x00	; 0
    33b6:	09 f0       	breq	.+2      	; 0x33ba <prvCheckDelayedList+0x58>
    33b8:	64 c0       	rjmp	.+200    	; 0x3482 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    33ba:	80 91 bc 00 	lds	r24, 0x00BC
    33be:	90 91 bd 00 	lds	r25, 0x00BD
    33c2:	9a 83       	std	Y+2, r25	; 0x02
    33c4:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    33c6:	80 91 be 00 	lds	r24, 0x00BE
    33ca:	90 91 bf 00 	lds	r25, 0x00BF
    33ce:	90 93 bd 00 	sts	0x00BD, r25
    33d2:	80 93 bc 00 	sts	0x00BC, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	9a 81       	ldd	r25, Y+2	; 0x02
    33da:	90 93 bf 00 	sts	0x00BF, r25
    33de:	80 93 be 00 	sts	0x00BE, r24
    33e2:	4f c0       	rjmp	.+158    	; 0x3482 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    33e4:	e0 91 bc 00 	lds	r30, 0x00BC
    33e8:	f0 91 bd 00 	lds	r31, 0x00BD
    33ec:	05 80       	ldd	r0, Z+5	; 0x05
    33ee:	f6 81       	ldd	r31, Z+6	; 0x06
    33f0:	e0 2d       	mov	r30, r0
    33f2:	86 81       	ldd	r24, Z+6	; 0x06
    33f4:	97 81       	ldd	r25, Z+7	; 0x07
    33f6:	9c 83       	std	Y+4, r25	; 0x04
    33f8:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    33fa:	eb 81       	ldd	r30, Y+3	; 0x03
    33fc:	fc 81       	ldd	r31, Y+4	; 0x04
    33fe:	22 81       	ldd	r18, Z+2	; 0x02
    3400:	33 81       	ldd	r19, Z+3	; 0x03
    3402:	80 91 92 00 	lds	r24, 0x0092
    3406:	90 91 93 00 	lds	r25, 0x0093
    340a:	82 17       	cp	r24, r18
    340c:	93 07       	cpc	r25, r19
    340e:	08 f4       	brcc	.+2      	; 0x3412 <prvCheckDelayedList+0xb0>
    3410:	40 c0       	rjmp	.+128    	; 0x3492 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    3412:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    3414:	8b 81       	ldd	r24, Y+3	; 0x03
    3416:	9c 81       	ldd	r25, Y+4	; 0x04
    3418:	02 96       	adiw	r24, 0x02	; 2
    341a:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    341e:	eb 81       	ldd	r30, Y+3	; 0x03
    3420:	fc 81       	ldd	r31, Y+4	; 0x04
    3422:	84 89       	ldd	r24, Z+20	; 0x14
    3424:	95 89       	ldd	r25, Z+21	; 0x15
    3426:	00 97       	sbiw	r24, 0x00	; 0
    3428:	29 f0       	breq	.+10     	; 0x3434 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    342a:	8b 81       	ldd	r24, Y+3	; 0x03
    342c:	9c 81       	ldd	r25, Y+4	; 0x04
    342e:	0c 96       	adiw	r24, 0x0c	; 12
    3430:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    3434:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    3436:	eb 81       	ldd	r30, Y+3	; 0x03
    3438:	fc 81       	ldd	r31, Y+4	; 0x04
    343a:	96 89       	ldd	r25, Z+22	; 0x16
    343c:	80 91 91 00 	lds	r24, 0x0091
    3440:	89 17       	cp	r24, r25
    3442:	28 f4       	brcc	.+10     	; 0x344e <prvCheckDelayedList+0xec>
    3444:	eb 81       	ldd	r30, Y+3	; 0x03
    3446:	fc 81       	ldd	r31, Y+4	; 0x04
    3448:	86 89       	ldd	r24, Z+22	; 0x16
    344a:	80 93 91 00 	sts	0x0091, r24
    344e:	eb 81       	ldd	r30, Y+3	; 0x03
    3450:	fc 81       	ldd	r31, Y+4	; 0x04
    3452:	86 89       	ldd	r24, Z+22	; 0x16
    3454:	28 2f       	mov	r18, r24
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	c9 01       	movw	r24, r18
    345a:	88 0f       	add	r24, r24
    345c:	99 1f       	adc	r25, r25
    345e:	88 0f       	add	r24, r24
    3460:	99 1f       	adc	r25, r25
    3462:	88 0f       	add	r24, r24
    3464:	99 1f       	adc	r25, r25
    3466:	82 0f       	add	r24, r18
    3468:	93 1f       	adc	r25, r19
    346a:	ac 01       	movw	r20, r24
    346c:	48 56       	subi	r20, 0x68	; 104
    346e:	5f 4f       	sbci	r21, 0xFF	; 255
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	9c 81       	ldd	r25, Y+4	; 0x04
    3474:	9c 01       	movw	r18, r24
    3476:	2e 5f       	subi	r18, 0xFE	; 254
    3478:	3f 4f       	sbci	r19, 0xFF	; 255
    347a:	ca 01       	movw	r24, r20
    347c:	b9 01       	movw	r22, r18
    347e:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    3482:	e0 91 bc 00 	lds	r30, 0x00BC
    3486:	f0 91 bd 00 	lds	r31, 0x00BD
    348a:	80 81       	ld	r24, Z
    348c:	88 23       	and	r24, r24
    348e:	09 f0       	breq	.+2      	; 0x3492 <prvCheckDelayedList+0x130>
    3490:	a9 cf       	rjmp	.-174    	; 0x33e4 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    3492:	80 91 96 00 	lds	r24, 0x0096
    3496:	90 91 97 00 	lds	r25, 0x0097
    349a:	00 97       	sbiw	r24, 0x00	; 0
    349c:	09 f0       	breq	.+2      	; 0x34a0 <prvCheckDelayedList+0x13e>
    349e:	74 cf       	rjmp	.-280    	; 0x3388 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    34a0:	80 91 92 00 	lds	r24, 0x0092
    34a4:	90 91 93 00 	lds	r25, 0x0093
    34a8:	90 93 95 00 	sts	0x0095, r25
    34ac:	80 93 94 00 	sts	0x0094, r24
}
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	00 d0       	rcall	.+0      	; 0x34c4 <vCoRoutineSchedule+0x6>
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    34c8:	0e 94 67 19 	call	0x32ce	; 0x32ce <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    34cc:	0e 94 b1 19 	call	0x3362	; 0x3362 <prvCheckDelayedList>
    34d0:	0a c0       	rjmp	.+20     	; 0x34e6 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    34d2:	80 91 91 00 	lds	r24, 0x0091
    34d6:	88 23       	and	r24, r24
    34d8:	09 f4       	brne	.+2      	; 0x34dc <vCoRoutineSchedule+0x1e>
    34da:	66 c0       	rjmp	.+204    	; 0x35a8 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    34dc:	80 91 91 00 	lds	r24, 0x0091
    34e0:	81 50       	subi	r24, 0x01	; 1
    34e2:	80 93 91 00 	sts	0x0091, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    34e6:	80 91 91 00 	lds	r24, 0x0091
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	c9 01       	movw	r24, r18
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	88 0f       	add	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	88 0f       	add	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	82 0f       	add	r24, r18
    34fe:	93 1f       	adc	r25, r19
    3500:	fc 01       	movw	r30, r24
    3502:	e8 56       	subi	r30, 0x68	; 104
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	80 81       	ld	r24, Z
    3508:	88 23       	and	r24, r24
    350a:	19 f3       	breq	.-58     	; 0x34d2 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    350c:	80 91 91 00 	lds	r24, 0x0091
    3510:	28 2f       	mov	r18, r24
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	c9 01       	movw	r24, r18
    3516:	88 0f       	add	r24, r24
    3518:	99 1f       	adc	r25, r25
    351a:	88 0f       	add	r24, r24
    351c:	99 1f       	adc	r25, r25
    351e:	88 0f       	add	r24, r24
    3520:	99 1f       	adc	r25, r25
    3522:	82 0f       	add	r24, r18
    3524:	93 1f       	adc	r25, r19
    3526:	88 56       	subi	r24, 0x68	; 104
    3528:	9f 4f       	sbci	r25, 0xFF	; 255
    352a:	9a 83       	std	Y+2, r25	; 0x02
    352c:	89 83       	std	Y+1, r24	; 0x01
    352e:	e9 81       	ldd	r30, Y+1	; 0x01
    3530:	fa 81       	ldd	r31, Y+2	; 0x02
    3532:	01 80       	ldd	r0, Z+1	; 0x01
    3534:	f2 81       	ldd	r31, Z+2	; 0x02
    3536:	e0 2d       	mov	r30, r0
    3538:	82 81       	ldd	r24, Z+2	; 0x02
    353a:	93 81       	ldd	r25, Z+3	; 0x03
    353c:	e9 81       	ldd	r30, Y+1	; 0x01
    353e:	fa 81       	ldd	r31, Y+2	; 0x02
    3540:	92 83       	std	Z+2, r25	; 0x02
    3542:	81 83       	std	Z+1, r24	; 0x01
    3544:	e9 81       	ldd	r30, Y+1	; 0x01
    3546:	fa 81       	ldd	r31, Y+2	; 0x02
    3548:	21 81       	ldd	r18, Z+1	; 0x01
    354a:	32 81       	ldd	r19, Z+2	; 0x02
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	9a 81       	ldd	r25, Y+2	; 0x02
    3550:	03 96       	adiw	r24, 0x03	; 3
    3552:	28 17       	cp	r18, r24
    3554:	39 07       	cpc	r19, r25
    3556:	59 f4       	brne	.+22     	; 0x356e <vCoRoutineSchedule+0xb0>
    3558:	e9 81       	ldd	r30, Y+1	; 0x01
    355a:	fa 81       	ldd	r31, Y+2	; 0x02
    355c:	01 80       	ldd	r0, Z+1	; 0x01
    355e:	f2 81       	ldd	r31, Z+2	; 0x02
    3560:	e0 2d       	mov	r30, r0
    3562:	82 81       	ldd	r24, Z+2	; 0x02
    3564:	93 81       	ldd	r25, Z+3	; 0x03
    3566:	e9 81       	ldd	r30, Y+1	; 0x01
    3568:	fa 81       	ldd	r31, Y+2	; 0x02
    356a:	92 83       	std	Z+2, r25	; 0x02
    356c:	81 83       	std	Z+1, r24	; 0x01
    356e:	e9 81       	ldd	r30, Y+1	; 0x01
    3570:	fa 81       	ldd	r31, Y+2	; 0x02
    3572:	01 80       	ldd	r0, Z+1	; 0x01
    3574:	f2 81       	ldd	r31, Z+2	; 0x02
    3576:	e0 2d       	mov	r30, r0
    3578:	86 81       	ldd	r24, Z+6	; 0x06
    357a:	97 81       	ldd	r25, Z+7	; 0x07
    357c:	90 93 90 00 	sts	0x0090, r25
    3580:	80 93 8f 00 	sts	0x008F, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    3584:	e0 91 8f 00 	lds	r30, 0x008F
    3588:	f0 91 90 00 	lds	r31, 0x0090
    358c:	40 81       	ld	r20, Z
    358e:	51 81       	ldd	r21, Z+1	; 0x01
    3590:	80 91 8f 00 	lds	r24, 0x008F
    3594:	90 91 90 00 	lds	r25, 0x0090
    3598:	e0 91 8f 00 	lds	r30, 0x008F
    359c:	f0 91 90 00 	lds	r31, 0x0090
    35a0:	27 89       	ldd	r18, Z+23	; 0x17
    35a2:	62 2f       	mov	r22, r18
    35a4:	fa 01       	movw	r30, r20
    35a6:	09 95       	icall

	return;
}
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	0f 92       	push	r0
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    35bc:	19 82       	std	Y+1, r1	; 0x01
    35be:	13 c0       	rjmp	.+38     	; 0x35e6 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	28 2f       	mov	r18, r24
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	c9 01       	movw	r24, r18
    35c8:	88 0f       	add	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	82 0f       	add	r24, r18
    35d6:	93 1f       	adc	r25, r19
    35d8:	88 56       	subi	r24, 0x68	; 104
    35da:	9f 4f       	sbci	r25, 0xFF	; 255
    35dc:	0e 94 b6 1b 	call	0x376c	; 0x376c <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    35e0:	89 81       	ldd	r24, Y+1	; 0x01
    35e2:	8f 5f       	subi	r24, 0xFF	; 255
    35e4:	89 83       	std	Y+1, r24	; 0x01
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	82 30       	cpi	r24, 0x02	; 2
    35ea:	50 f3       	brcs	.-44     	; 0x35c0 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    35ec:	8a ea       	ldi	r24, 0xAA	; 170
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	0e 94 b6 1b 	call	0x376c	; 0x376c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    35f4:	83 eb       	ldi	r24, 0xB3	; 179
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	0e 94 b6 1b 	call	0x376c	; 0x376c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    35fc:	80 ec       	ldi	r24, 0xC0	; 192
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	0e 94 b6 1b 	call	0x376c	; 0x376c <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    3604:	8a ea       	ldi	r24, 0xAA	; 170
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	90 93 bd 00 	sts	0x00BD, r25
    360c:	80 93 bc 00 	sts	0x00BC, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    3610:	83 eb       	ldi	r24, 0xB3	; 179
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	90 93 bf 00 	sts	0x00BF, r25
    3618:	80 93 be 00 	sts	0x00BE, r24
}
    361c:	0f 90       	pop	r0
    361e:	cf 91       	pop	r28
    3620:	df 91       	pop	r29
    3622:	08 95       	ret

00003624 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    3624:	df 93       	push	r29
    3626:	cf 93       	push	r28
    3628:	00 d0       	rcall	.+0      	; 0x362a <xCoRoutineRemoveFromEventList+0x6>
    362a:	00 d0       	rcall	.+0      	; 0x362c <xCoRoutineRemoveFromEventList+0x8>
    362c:	0f 92       	push	r0
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
    3632:	9d 83       	std	Y+5, r25	; 0x05
    3634:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3636:	ec 81       	ldd	r30, Y+4	; 0x04
    3638:	fd 81       	ldd	r31, Y+5	; 0x05
    363a:	05 80       	ldd	r0, Z+5	; 0x05
    363c:	f6 81       	ldd	r31, Z+6	; 0x06
    363e:	e0 2d       	mov	r30, r0
    3640:	86 81       	ldd	r24, Z+6	; 0x06
    3642:	97 81       	ldd	r25, Z+7	; 0x07
    3644:	9b 83       	std	Y+3, r25	; 0x03
    3646:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    3648:	8a 81       	ldd	r24, Y+2	; 0x02
    364a:	9b 81       	ldd	r25, Y+3	; 0x03
    364c:	0c 96       	adiw	r24, 0x0c	; 12
    364e:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    3652:	8a 81       	ldd	r24, Y+2	; 0x02
    3654:	9b 81       	ldd	r25, Y+3	; 0x03
    3656:	9c 01       	movw	r18, r24
    3658:	24 5f       	subi	r18, 0xF4	; 244
    365a:	3f 4f       	sbci	r19, 0xFF	; 255
    365c:	80 ec       	ldi	r24, 0xC0	; 192
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	b9 01       	movw	r22, r18
    3662:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    3666:	ea 81       	ldd	r30, Y+2	; 0x02
    3668:	fb 81       	ldd	r31, Y+3	; 0x03
    366a:	96 89       	ldd	r25, Z+22	; 0x16
    366c:	e0 91 8f 00 	lds	r30, 0x008F
    3670:	f0 91 90 00 	lds	r31, 0x0090
    3674:	86 89       	ldd	r24, Z+22	; 0x16
    3676:	98 17       	cp	r25, r24
    3678:	18 f0       	brcs	.+6      	; 0x3680 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	89 83       	std	Y+1, r24	; 0x01
    367e:	01 c0       	rjmp	.+2      	; 0x3682 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    3680:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3682:	89 81       	ldd	r24, Y+1	; 0x01
}
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	cf 91       	pop	r28
    3690:	df 91       	pop	r29
    3692:	08 95       	ret

00003694 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3694:	df 93       	push	r29
    3696:	cf 93       	push	r28
    3698:	00 d0       	rcall	.+0      	; 0x369a <pvPortMalloc+0x6>
    369a:	00 d0       	rcall	.+0      	; 0x369c <pvPortMalloc+0x8>
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	9c 83       	std	Y+4, r25	; 0x04
    36a2:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    36a4:	1a 82       	std	Y+2, r1	; 0x02
    36a6:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    36a8:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    36ac:	80 91 c9 00 	lds	r24, 0x00C9
    36b0:	90 91 ca 00 	lds	r25, 0x00CA
    36b4:	2b 81       	ldd	r18, Y+3	; 0x03
    36b6:	3c 81       	ldd	r19, Y+4	; 0x04
    36b8:	82 0f       	add	r24, r18
    36ba:	93 1f       	adc	r25, r19
    36bc:	23 e0       	ldi	r18, 0x03	; 3
    36be:	88 3e       	cpi	r24, 0xE8	; 232
    36c0:	92 07       	cpc	r25, r18
    36c2:	18 f5       	brcc	.+70     	; 0x370a <pvPortMalloc+0x76>
    36c4:	20 91 c9 00 	lds	r18, 0x00C9
    36c8:	30 91 ca 00 	lds	r19, 0x00CA
    36cc:	8b 81       	ldd	r24, Y+3	; 0x03
    36ce:	9c 81       	ldd	r25, Y+4	; 0x04
    36d0:	28 0f       	add	r18, r24
    36d2:	39 1f       	adc	r19, r25
    36d4:	80 91 c9 00 	lds	r24, 0x00C9
    36d8:	90 91 ca 00 	lds	r25, 0x00CA
    36dc:	82 17       	cp	r24, r18
    36de:	93 07       	cpc	r25, r19
    36e0:	a0 f4       	brcc	.+40     	; 0x370a <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    36e2:	80 91 c9 00 	lds	r24, 0x00C9
    36e6:	90 91 ca 00 	lds	r25, 0x00CA
    36ea:	85 53       	subi	r24, 0x35	; 53
    36ec:	9f 4f       	sbci	r25, 0xFF	; 255
    36ee:	9a 83       	std	Y+2, r25	; 0x02
    36f0:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    36f2:	20 91 c9 00 	lds	r18, 0x00C9
    36f6:	30 91 ca 00 	lds	r19, 0x00CA
    36fa:	8b 81       	ldd	r24, Y+3	; 0x03
    36fc:	9c 81       	ldd	r25, Y+4	; 0x04
    36fe:	82 0f       	add	r24, r18
    3700:	93 1f       	adc	r25, r19
    3702:	90 93 ca 00 	sts	0x00CA, r25
    3706:	80 93 c9 00 	sts	0x00C9, r24
		}	
	}
	xTaskResumeAll();
    370a:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	cf 91       	pop	r28
    371c:	df 91       	pop	r29
    371e:	08 95       	ret

00003720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	00 d0       	rcall	.+0      	; 0x3726 <vPortFree+0x6>
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62
    372a:	9a 83       	std	Y+2, r25	; 0x02
    372c:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    3740:	10 92 ca 00 	sts	0x00CA, r1
    3744:	10 92 c9 00 	sts	0x00C9, r1
}
    3748:	cf 91       	pop	r28
    374a:	df 91       	pop	r29
    374c:	08 95       	ret

0000374e <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    374e:	df 93       	push	r29
    3750:	cf 93       	push	r28
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    3756:	20 91 c9 00 	lds	r18, 0x00C9
    375a:	30 91 ca 00 	lds	r19, 0x00CA
    375e:	88 ee       	ldi	r24, 0xE8	; 232
    3760:	93 e0       	ldi	r25, 0x03	; 3
    3762:	82 1b       	sub	r24, r18
    3764:	93 0b       	sbc	r25, r19
}
    3766:	cf 91       	pop	r28
    3768:	df 91       	pop	r29
    376a:	08 95       	ret

0000376c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    376c:	df 93       	push	r29
    376e:	cf 93       	push	r28
    3770:	00 d0       	rcall	.+0      	; 0x3772 <vListInitialise+0x6>
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
    3776:	9a 83       	std	Y+2, r25	; 0x02
    3778:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	9a 81       	ldd	r25, Y+2	; 0x02
    377e:	03 96       	adiw	r24, 0x03	; 3
    3780:	e9 81       	ldd	r30, Y+1	; 0x01
    3782:	fa 81       	ldd	r31, Y+2	; 0x02
    3784:	92 83       	std	Z+2, r25	; 0x02
    3786:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3788:	e9 81       	ldd	r30, Y+1	; 0x01
    378a:	fa 81       	ldd	r31, Y+2	; 0x02
    378c:	8f ef       	ldi	r24, 0xFF	; 255
    378e:	9f ef       	ldi	r25, 0xFF	; 255
    3790:	94 83       	std	Z+4, r25	; 0x04
    3792:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	9a 81       	ldd	r25, Y+2	; 0x02
    3798:	03 96       	adiw	r24, 0x03	; 3
    379a:	e9 81       	ldd	r30, Y+1	; 0x01
    379c:	fa 81       	ldd	r31, Y+2	; 0x02
    379e:	96 83       	std	Z+6, r25	; 0x06
    37a0:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	9a 81       	ldd	r25, Y+2	; 0x02
    37a6:	03 96       	adiw	r24, 0x03	; 3
    37a8:	e9 81       	ldd	r30, Y+1	; 0x01
    37aa:	fa 81       	ldd	r31, Y+2	; 0x02
    37ac:	90 87       	std	Z+8, r25	; 0x08
    37ae:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    37b0:	e9 81       	ldd	r30, Y+1	; 0x01
    37b2:	fa 81       	ldd	r31, Y+2	; 0x02
    37b4:	10 82       	st	Z, r1
}
    37b6:	0f 90       	pop	r0
    37b8:	0f 90       	pop	r0
    37ba:	cf 91       	pop	r28
    37bc:	df 91       	pop	r29
    37be:	08 95       	ret

000037c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    37c0:	df 93       	push	r29
    37c2:	cf 93       	push	r28
    37c4:	00 d0       	rcall	.+0      	; 0x37c6 <vListInitialiseItem+0x6>
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
    37ca:	9a 83       	std	Y+2, r25	; 0x02
    37cc:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    37ce:	e9 81       	ldd	r30, Y+1	; 0x01
    37d0:	fa 81       	ldd	r31, Y+2	; 0x02
    37d2:	11 86       	std	Z+9, r1	; 0x09
    37d4:	10 86       	std	Z+8, r1	; 0x08
}
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	cf 91       	pop	r28
    37dc:	df 91       	pop	r29
    37de:	08 95       	ret

000037e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	00 d0       	rcall	.+0      	; 0x37e6 <vListInsertEnd+0x6>
    37e6:	00 d0       	rcall	.+0      	; 0x37e8 <vListInsertEnd+0x8>
    37e8:	00 d0       	rcall	.+0      	; 0x37ea <vListInsertEnd+0xa>
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62
    37ee:	9c 83       	std	Y+4, r25	; 0x04
    37f0:	8b 83       	std	Y+3, r24	; 0x03
    37f2:	7e 83       	std	Y+6, r23	; 0x06
    37f4:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    37f6:	eb 81       	ldd	r30, Y+3	; 0x03
    37f8:	fc 81       	ldd	r31, Y+4	; 0x04
    37fa:	81 81       	ldd	r24, Z+1	; 0x01
    37fc:	92 81       	ldd	r25, Z+2	; 0x02
    37fe:	9a 83       	std	Y+2, r25	; 0x02
    3800:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    3802:	e9 81       	ldd	r30, Y+1	; 0x01
    3804:	fa 81       	ldd	r31, Y+2	; 0x02
    3806:	82 81       	ldd	r24, Z+2	; 0x02
    3808:	93 81       	ldd	r25, Z+3	; 0x03
    380a:	ed 81       	ldd	r30, Y+5	; 0x05
    380c:	fe 81       	ldd	r31, Y+6	; 0x06
    380e:	93 83       	std	Z+3, r25	; 0x03
    3810:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3812:	eb 81       	ldd	r30, Y+3	; 0x03
    3814:	fc 81       	ldd	r31, Y+4	; 0x04
    3816:	81 81       	ldd	r24, Z+1	; 0x01
    3818:	92 81       	ldd	r25, Z+2	; 0x02
    381a:	ed 81       	ldd	r30, Y+5	; 0x05
    381c:	fe 81       	ldd	r31, Y+6	; 0x06
    381e:	95 83       	std	Z+5, r25	; 0x05
    3820:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3822:	e9 81       	ldd	r30, Y+1	; 0x01
    3824:	fa 81       	ldd	r31, Y+2	; 0x02
    3826:	02 80       	ldd	r0, Z+2	; 0x02
    3828:	f3 81       	ldd	r31, Z+3	; 0x03
    382a:	e0 2d       	mov	r30, r0
    382c:	8d 81       	ldd	r24, Y+5	; 0x05
    382e:	9e 81       	ldd	r25, Y+6	; 0x06
    3830:	95 83       	std	Z+5, r25	; 0x05
    3832:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3834:	8d 81       	ldd	r24, Y+5	; 0x05
    3836:	9e 81       	ldd	r25, Y+6	; 0x06
    3838:	e9 81       	ldd	r30, Y+1	; 0x01
    383a:	fa 81       	ldd	r31, Y+2	; 0x02
    383c:	93 83       	std	Z+3, r25	; 0x03
    383e:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3840:	8d 81       	ldd	r24, Y+5	; 0x05
    3842:	9e 81       	ldd	r25, Y+6	; 0x06
    3844:	eb 81       	ldd	r30, Y+3	; 0x03
    3846:	fc 81       	ldd	r31, Y+4	; 0x04
    3848:	92 83       	std	Z+2, r25	; 0x02
    384a:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    384c:	ed 81       	ldd	r30, Y+5	; 0x05
    384e:	fe 81       	ldd	r31, Y+6	; 0x06
    3850:	8b 81       	ldd	r24, Y+3	; 0x03
    3852:	9c 81       	ldd	r25, Y+4	; 0x04
    3854:	91 87       	std	Z+9, r25	; 0x09
    3856:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    3858:	eb 81       	ldd	r30, Y+3	; 0x03
    385a:	fc 81       	ldd	r31, Y+4	; 0x04
    385c:	80 81       	ld	r24, Z
    385e:	8f 5f       	subi	r24, 0xFF	; 255
    3860:	eb 81       	ldd	r30, Y+3	; 0x03
    3862:	fc 81       	ldd	r31, Y+4	; 0x04
    3864:	80 83       	st	Z, r24
}
    3866:	26 96       	adiw	r28, 0x06	; 6
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	de bf       	out	0x3e, r29	; 62
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	cd bf       	out	0x3d, r28	; 61
    3872:	cf 91       	pop	r28
    3874:	df 91       	pop	r29
    3876:	08 95       	ret

00003878 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3878:	df 93       	push	r29
    387a:	cf 93       	push	r28
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
    3880:	28 97       	sbiw	r28, 0x08	; 8
    3882:	0f b6       	in	r0, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	de bf       	out	0x3e, r29	; 62
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	cd bf       	out	0x3d, r28	; 61
    388c:	9e 83       	std	Y+6, r25	; 0x06
    388e:	8d 83       	std	Y+5, r24	; 0x05
    3890:	78 87       	std	Y+8, r23	; 0x08
    3892:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3894:	ef 81       	ldd	r30, Y+7	; 0x07
    3896:	f8 85       	ldd	r31, Y+8	; 0x08
    3898:	80 81       	ld	r24, Z
    389a:	91 81       	ldd	r25, Z+1	; 0x01
    389c:	9a 83       	std	Y+2, r25	; 0x02
    389e:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	9a 81       	ldd	r25, Y+2	; 0x02
    38a4:	2f ef       	ldi	r18, 0xFF	; 255
    38a6:	8f 3f       	cpi	r24, 0xFF	; 255
    38a8:	92 07       	cpc	r25, r18
    38aa:	39 f4       	brne	.+14     	; 0x38ba <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    38ac:	ed 81       	ldd	r30, Y+5	; 0x05
    38ae:	fe 81       	ldd	r31, Y+6	; 0x06
    38b0:	87 81       	ldd	r24, Z+7	; 0x07
    38b2:	90 85       	ldd	r25, Z+8	; 0x08
    38b4:	9c 83       	std	Y+4, r25	; 0x04
    38b6:	8b 83       	std	Y+3, r24	; 0x03
    38b8:	18 c0       	rjmp	.+48     	; 0x38ea <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    38ba:	8d 81       	ldd	r24, Y+5	; 0x05
    38bc:	9e 81       	ldd	r25, Y+6	; 0x06
    38be:	03 96       	adiw	r24, 0x03	; 3
    38c0:	9c 83       	std	Y+4, r25	; 0x04
    38c2:	8b 83       	std	Y+3, r24	; 0x03
    38c4:	06 c0       	rjmp	.+12     	; 0x38d2 <vListInsert+0x5a>
    38c6:	eb 81       	ldd	r30, Y+3	; 0x03
    38c8:	fc 81       	ldd	r31, Y+4	; 0x04
    38ca:	82 81       	ldd	r24, Z+2	; 0x02
    38cc:	93 81       	ldd	r25, Z+3	; 0x03
    38ce:	9c 83       	std	Y+4, r25	; 0x04
    38d0:	8b 83       	std	Y+3, r24	; 0x03
    38d2:	eb 81       	ldd	r30, Y+3	; 0x03
    38d4:	fc 81       	ldd	r31, Y+4	; 0x04
    38d6:	02 80       	ldd	r0, Z+2	; 0x02
    38d8:	f3 81       	ldd	r31, Z+3	; 0x03
    38da:	e0 2d       	mov	r30, r0
    38dc:	20 81       	ld	r18, Z
    38de:	31 81       	ldd	r19, Z+1	; 0x01
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	9a 81       	ldd	r25, Y+2	; 0x02
    38e4:	82 17       	cp	r24, r18
    38e6:	93 07       	cpc	r25, r19
    38e8:	70 f7       	brcc	.-36     	; 0x38c6 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    38ea:	eb 81       	ldd	r30, Y+3	; 0x03
    38ec:	fc 81       	ldd	r31, Y+4	; 0x04
    38ee:	82 81       	ldd	r24, Z+2	; 0x02
    38f0:	93 81       	ldd	r25, Z+3	; 0x03
    38f2:	ef 81       	ldd	r30, Y+7	; 0x07
    38f4:	f8 85       	ldd	r31, Y+8	; 0x08
    38f6:	93 83       	std	Z+3, r25	; 0x03
    38f8:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    38fa:	ef 81       	ldd	r30, Y+7	; 0x07
    38fc:	f8 85       	ldd	r31, Y+8	; 0x08
    38fe:	02 80       	ldd	r0, Z+2	; 0x02
    3900:	f3 81       	ldd	r31, Z+3	; 0x03
    3902:	e0 2d       	mov	r30, r0
    3904:	8f 81       	ldd	r24, Y+7	; 0x07
    3906:	98 85       	ldd	r25, Y+8	; 0x08
    3908:	95 83       	std	Z+5, r25	; 0x05
    390a:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    390c:	ef 81       	ldd	r30, Y+7	; 0x07
    390e:	f8 85       	ldd	r31, Y+8	; 0x08
    3910:	8b 81       	ldd	r24, Y+3	; 0x03
    3912:	9c 81       	ldd	r25, Y+4	; 0x04
    3914:	95 83       	std	Z+5, r25	; 0x05
    3916:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3918:	8f 81       	ldd	r24, Y+7	; 0x07
    391a:	98 85       	ldd	r25, Y+8	; 0x08
    391c:	eb 81       	ldd	r30, Y+3	; 0x03
    391e:	fc 81       	ldd	r31, Y+4	; 0x04
    3920:	93 83       	std	Z+3, r25	; 0x03
    3922:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3924:	ef 81       	ldd	r30, Y+7	; 0x07
    3926:	f8 85       	ldd	r31, Y+8	; 0x08
    3928:	8d 81       	ldd	r24, Y+5	; 0x05
    392a:	9e 81       	ldd	r25, Y+6	; 0x06
    392c:	91 87       	std	Z+9, r25	; 0x09
    392e:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    3930:	ed 81       	ldd	r30, Y+5	; 0x05
    3932:	fe 81       	ldd	r31, Y+6	; 0x06
    3934:	80 81       	ld	r24, Z
    3936:	8f 5f       	subi	r24, 0xFF	; 255
    3938:	ed 81       	ldd	r30, Y+5	; 0x05
    393a:	fe 81       	ldd	r31, Y+6	; 0x06
    393c:	80 83       	st	Z, r24
}
    393e:	28 96       	adiw	r28, 0x08	; 8
    3940:	0f b6       	in	r0, 0x3f	; 63
    3942:	f8 94       	cli
    3944:	de bf       	out	0x3e, r29	; 62
    3946:	0f be       	out	0x3f, r0	; 63
    3948:	cd bf       	out	0x3d, r28	; 61
    394a:	cf 91       	pop	r28
    394c:	df 91       	pop	r29
    394e:	08 95       	ret

00003950 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	00 d0       	rcall	.+0      	; 0x3956 <vListRemove+0x6>
    3956:	00 d0       	rcall	.+0      	; 0x3958 <vListRemove+0x8>
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
    395c:	9c 83       	std	Y+4, r25	; 0x04
    395e:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3960:	eb 81       	ldd	r30, Y+3	; 0x03
    3962:	fc 81       	ldd	r31, Y+4	; 0x04
    3964:	a2 81       	ldd	r26, Z+2	; 0x02
    3966:	b3 81       	ldd	r27, Z+3	; 0x03
    3968:	eb 81       	ldd	r30, Y+3	; 0x03
    396a:	fc 81       	ldd	r31, Y+4	; 0x04
    396c:	84 81       	ldd	r24, Z+4	; 0x04
    396e:	95 81       	ldd	r25, Z+5	; 0x05
    3970:	15 96       	adiw	r26, 0x05	; 5
    3972:	9c 93       	st	X, r25
    3974:	8e 93       	st	-X, r24
    3976:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3978:	eb 81       	ldd	r30, Y+3	; 0x03
    397a:	fc 81       	ldd	r31, Y+4	; 0x04
    397c:	a4 81       	ldd	r26, Z+4	; 0x04
    397e:	b5 81       	ldd	r27, Z+5	; 0x05
    3980:	eb 81       	ldd	r30, Y+3	; 0x03
    3982:	fc 81       	ldd	r31, Y+4	; 0x04
    3984:	82 81       	ldd	r24, Z+2	; 0x02
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	13 96       	adiw	r26, 0x03	; 3
    398a:	9c 93       	st	X, r25
    398c:	8e 93       	st	-X, r24
    398e:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3990:	eb 81       	ldd	r30, Y+3	; 0x03
    3992:	fc 81       	ldd	r31, Y+4	; 0x04
    3994:	80 85       	ldd	r24, Z+8	; 0x08
    3996:	91 85       	ldd	r25, Z+9	; 0x09
    3998:	9a 83       	std	Y+2, r25	; 0x02
    399a:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    399c:	e9 81       	ldd	r30, Y+1	; 0x01
    399e:	fa 81       	ldd	r31, Y+2	; 0x02
    39a0:	21 81       	ldd	r18, Z+1	; 0x01
    39a2:	32 81       	ldd	r19, Z+2	; 0x02
    39a4:	8b 81       	ldd	r24, Y+3	; 0x03
    39a6:	9c 81       	ldd	r25, Y+4	; 0x04
    39a8:	28 17       	cp	r18, r24
    39aa:	39 07       	cpc	r19, r25
    39ac:	41 f4       	brne	.+16     	; 0x39be <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    39ae:	eb 81       	ldd	r30, Y+3	; 0x03
    39b0:	fc 81       	ldd	r31, Y+4	; 0x04
    39b2:	84 81       	ldd	r24, Z+4	; 0x04
    39b4:	95 81       	ldd	r25, Z+5	; 0x05
    39b6:	e9 81       	ldd	r30, Y+1	; 0x01
    39b8:	fa 81       	ldd	r31, Y+2	; 0x02
    39ba:	92 83       	std	Z+2, r25	; 0x02
    39bc:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    39be:	eb 81       	ldd	r30, Y+3	; 0x03
    39c0:	fc 81       	ldd	r31, Y+4	; 0x04
    39c2:	11 86       	std	Z+9, r1	; 0x09
    39c4:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    39c6:	e9 81       	ldd	r30, Y+1	; 0x01
    39c8:	fa 81       	ldd	r31, Y+2	; 0x02
    39ca:	80 81       	ld	r24, Z
    39cc:	81 50       	subi	r24, 0x01	; 1
    39ce:	e9 81       	ldd	r30, Y+1	; 0x01
    39d0:	fa 81       	ldd	r31, Y+2	; 0x02
    39d2:	80 83       	st	Z, r24
}
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	0f 90       	pop	r0
    39da:	0f 90       	pop	r0
    39dc:	cf 91       	pop	r28
    39de:	df 91       	pop	r29
    39e0:	08 95       	ret

000039e2 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    39e2:	df 93       	push	r29
    39e4:	cf 93       	push	r28
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
    39ea:	28 97       	sbiw	r28, 0x08	; 8
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	cd bf       	out	0x3d, r28	; 61
    39f6:	9c 83       	std	Y+4, r25	; 0x04
    39f8:	8b 83       	std	Y+3, r24	; 0x03
    39fa:	7e 83       	std	Y+6, r23	; 0x06
    39fc:	6d 83       	std	Y+5, r22	; 0x05
    39fe:	58 87       	std	Y+8, r21	; 0x08
    3a00:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    3a02:	eb 81       	ldd	r30, Y+3	; 0x03
    3a04:	fc 81       	ldd	r31, Y+4	; 0x04
    3a06:	81 e1       	ldi	r24, 0x11	; 17
    3a08:	80 83       	st	Z, r24
	pxTopOfStack--;
    3a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a0e:	01 97       	sbiw	r24, 0x01	; 1
    3a10:	9c 83       	std	Y+4, r25	; 0x04
    3a12:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    3a14:	eb 81       	ldd	r30, Y+3	; 0x03
    3a16:	fc 81       	ldd	r31, Y+4	; 0x04
    3a18:	82 e2       	ldi	r24, 0x22	; 34
    3a1a:	80 83       	st	Z, r24
	pxTopOfStack--;
    3a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a20:	01 97       	sbiw	r24, 0x01	; 1
    3a22:	9c 83       	std	Y+4, r25	; 0x04
    3a24:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    3a26:	eb 81       	ldd	r30, Y+3	; 0x03
    3a28:	fc 81       	ldd	r31, Y+4	; 0x04
    3a2a:	83 e3       	ldi	r24, 0x33	; 51
    3a2c:	80 83       	st	Z, r24
	pxTopOfStack--;
    3a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a30:	9c 81       	ldd	r25, Y+4	; 0x04
    3a32:	01 97       	sbiw	r24, 0x01	; 1
    3a34:	9c 83       	std	Y+4, r25	; 0x04
    3a36:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    3a38:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3c:	9a 83       	std	Y+2, r25	; 0x02
    3a3e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    3a40:	89 81       	ldd	r24, Y+1	; 0x01
    3a42:	eb 81       	ldd	r30, Y+3	; 0x03
    3a44:	fc 81       	ldd	r31, Y+4	; 0x04
    3a46:	80 83       	st	Z, r24
	pxTopOfStack--;
    3a48:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	9c 83       	std	Y+4, r25	; 0x04
    3a50:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	9a 81       	ldd	r25, Y+2	; 0x02
    3a56:	89 2f       	mov	r24, r25
    3a58:	99 27       	eor	r25, r25
    3a5a:	9a 83       	std	Y+2, r25	; 0x02
    3a5c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    3a5e:	89 81       	ldd	r24, Y+1	; 0x01
    3a60:	eb 81       	ldd	r30, Y+3	; 0x03
    3a62:	fc 81       	ldd	r31, Y+4	; 0x04
    3a64:	80 83       	st	Z, r24
	pxTopOfStack--;
    3a66:	8b 81       	ldd	r24, Y+3	; 0x03
    3a68:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6a:	01 97       	sbiw	r24, 0x01	; 1
    3a6c:	9c 83       	std	Y+4, r25	; 0x04
    3a6e:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    3a70:	eb 81       	ldd	r30, Y+3	; 0x03
    3a72:	fc 81       	ldd	r31, Y+4	; 0x04
    3a74:	10 82       	st	Z, r1
	pxTopOfStack--;
    3a76:	8b 81       	ldd	r24, Y+3	; 0x03
    3a78:	9c 81       	ldd	r25, Y+4	; 0x04
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	9c 83       	std	Y+4, r25	; 0x04
    3a7e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    3a80:	eb 81       	ldd	r30, Y+3	; 0x03
    3a82:	fc 81       	ldd	r31, Y+4	; 0x04
    3a84:	80 e8       	ldi	r24, 0x80	; 128
    3a86:	80 83       	st	Z, r24
	pxTopOfStack--;
    3a88:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8c:	01 97       	sbiw	r24, 0x01	; 1
    3a8e:	9c 83       	std	Y+4, r25	; 0x04
    3a90:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    3a92:	eb 81       	ldd	r30, Y+3	; 0x03
    3a94:	fc 81       	ldd	r31, Y+4	; 0x04
    3a96:	10 82       	st	Z, r1
	pxTopOfStack--;
    3a98:	8b 81       	ldd	r24, Y+3	; 0x03
    3a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	9c 83       	std	Y+4, r25	; 0x04
    3aa0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    3aa2:	eb 81       	ldd	r30, Y+3	; 0x03
    3aa4:	fc 81       	ldd	r31, Y+4	; 0x04
    3aa6:	82 e0       	ldi	r24, 0x02	; 2
    3aa8:	80 83       	st	Z, r24
	pxTopOfStack--;
    3aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    3aac:	9c 81       	ldd	r25, Y+4	; 0x04
    3aae:	01 97       	sbiw	r24, 0x01	; 1
    3ab0:	9c 83       	std	Y+4, r25	; 0x04
    3ab2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    3ab4:	eb 81       	ldd	r30, Y+3	; 0x03
    3ab6:	fc 81       	ldd	r31, Y+4	; 0x04
    3ab8:	83 e0       	ldi	r24, 0x03	; 3
    3aba:	80 83       	st	Z, r24
	pxTopOfStack--;
    3abc:	8b 81       	ldd	r24, Y+3	; 0x03
    3abe:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac0:	01 97       	sbiw	r24, 0x01	; 1
    3ac2:	9c 83       	std	Y+4, r25	; 0x04
    3ac4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    3ac6:	eb 81       	ldd	r30, Y+3	; 0x03
    3ac8:	fc 81       	ldd	r31, Y+4	; 0x04
    3aca:	84 e0       	ldi	r24, 0x04	; 4
    3acc:	80 83       	st	Z, r24
	pxTopOfStack--;
    3ace:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	9c 83       	std	Y+4, r25	; 0x04
    3ad6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    3ad8:	eb 81       	ldd	r30, Y+3	; 0x03
    3ada:	fc 81       	ldd	r31, Y+4	; 0x04
    3adc:	85 e0       	ldi	r24, 0x05	; 5
    3ade:	80 83       	st	Z, r24
	pxTopOfStack--;
    3ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	9c 83       	std	Y+4, r25	; 0x04
    3ae8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    3aea:	eb 81       	ldd	r30, Y+3	; 0x03
    3aec:	fc 81       	ldd	r31, Y+4	; 0x04
    3aee:	86 e0       	ldi	r24, 0x06	; 6
    3af0:	80 83       	st	Z, r24
	pxTopOfStack--;
    3af2:	8b 81       	ldd	r24, Y+3	; 0x03
    3af4:	9c 81       	ldd	r25, Y+4	; 0x04
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	9c 83       	std	Y+4, r25	; 0x04
    3afa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    3afc:	eb 81       	ldd	r30, Y+3	; 0x03
    3afe:	fc 81       	ldd	r31, Y+4	; 0x04
    3b00:	87 e0       	ldi	r24, 0x07	; 7
    3b02:	80 83       	st	Z, r24
	pxTopOfStack--;
    3b04:	8b 81       	ldd	r24, Y+3	; 0x03
    3b06:	9c 81       	ldd	r25, Y+4	; 0x04
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	9c 83       	std	Y+4, r25	; 0x04
    3b0c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    3b0e:	eb 81       	ldd	r30, Y+3	; 0x03
    3b10:	fc 81       	ldd	r31, Y+4	; 0x04
    3b12:	88 e0       	ldi	r24, 0x08	; 8
    3b14:	80 83       	st	Z, r24
	pxTopOfStack--;
    3b16:	8b 81       	ldd	r24, Y+3	; 0x03
    3b18:	9c 81       	ldd	r25, Y+4	; 0x04
    3b1a:	01 97       	sbiw	r24, 0x01	; 1
    3b1c:	9c 83       	std	Y+4, r25	; 0x04
    3b1e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    3b20:	eb 81       	ldd	r30, Y+3	; 0x03
    3b22:	fc 81       	ldd	r31, Y+4	; 0x04
    3b24:	89 e0       	ldi	r24, 0x09	; 9
    3b26:	80 83       	st	Z, r24
	pxTopOfStack--;
    3b28:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b2c:	01 97       	sbiw	r24, 0x01	; 1
    3b2e:	9c 83       	std	Y+4, r25	; 0x04
    3b30:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    3b32:	eb 81       	ldd	r30, Y+3	; 0x03
    3b34:	fc 81       	ldd	r31, Y+4	; 0x04
    3b36:	80 e1       	ldi	r24, 0x10	; 16
    3b38:	80 83       	st	Z, r24
	pxTopOfStack--;
    3b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3e:	01 97       	sbiw	r24, 0x01	; 1
    3b40:	9c 83       	std	Y+4, r25	; 0x04
    3b42:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    3b44:	eb 81       	ldd	r30, Y+3	; 0x03
    3b46:	fc 81       	ldd	r31, Y+4	; 0x04
    3b48:	81 e1       	ldi	r24, 0x11	; 17
    3b4a:	80 83       	st	Z, r24
	pxTopOfStack--;
    3b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b50:	01 97       	sbiw	r24, 0x01	; 1
    3b52:	9c 83       	std	Y+4, r25	; 0x04
    3b54:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    3b56:	eb 81       	ldd	r30, Y+3	; 0x03
    3b58:	fc 81       	ldd	r31, Y+4	; 0x04
    3b5a:	82 e1       	ldi	r24, 0x12	; 18
    3b5c:	80 83       	st	Z, r24
	pxTopOfStack--;
    3b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b60:	9c 81       	ldd	r25, Y+4	; 0x04
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	9c 83       	std	Y+4, r25	; 0x04
    3b66:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    3b68:	eb 81       	ldd	r30, Y+3	; 0x03
    3b6a:	fc 81       	ldd	r31, Y+4	; 0x04
    3b6c:	83 e1       	ldi	r24, 0x13	; 19
    3b6e:	80 83       	st	Z, r24
	pxTopOfStack--;
    3b70:	8b 81       	ldd	r24, Y+3	; 0x03
    3b72:	9c 81       	ldd	r25, Y+4	; 0x04
    3b74:	01 97       	sbiw	r24, 0x01	; 1
    3b76:	9c 83       	std	Y+4, r25	; 0x04
    3b78:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    3b7a:	eb 81       	ldd	r30, Y+3	; 0x03
    3b7c:	fc 81       	ldd	r31, Y+4	; 0x04
    3b7e:	84 e1       	ldi	r24, 0x14	; 20
    3b80:	80 83       	st	Z, r24
	pxTopOfStack--;
    3b82:	8b 81       	ldd	r24, Y+3	; 0x03
    3b84:	9c 81       	ldd	r25, Y+4	; 0x04
    3b86:	01 97       	sbiw	r24, 0x01	; 1
    3b88:	9c 83       	std	Y+4, r25	; 0x04
    3b8a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    3b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b90:	85 e1       	ldi	r24, 0x15	; 21
    3b92:	80 83       	st	Z, r24
	pxTopOfStack--;
    3b94:	8b 81       	ldd	r24, Y+3	; 0x03
    3b96:	9c 81       	ldd	r25, Y+4	; 0x04
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	9c 83       	std	Y+4, r25	; 0x04
    3b9c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    3b9e:	eb 81       	ldd	r30, Y+3	; 0x03
    3ba0:	fc 81       	ldd	r31, Y+4	; 0x04
    3ba2:	86 e1       	ldi	r24, 0x16	; 22
    3ba4:	80 83       	st	Z, r24
	pxTopOfStack--;
    3ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	9c 83       	std	Y+4, r25	; 0x04
    3bae:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    3bb0:	eb 81       	ldd	r30, Y+3	; 0x03
    3bb2:	fc 81       	ldd	r31, Y+4	; 0x04
    3bb4:	87 e1       	ldi	r24, 0x17	; 23
    3bb6:	80 83       	st	Z, r24
	pxTopOfStack--;
    3bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bba:	9c 81       	ldd	r25, Y+4	; 0x04
    3bbc:	01 97       	sbiw	r24, 0x01	; 1
    3bbe:	9c 83       	std	Y+4, r25	; 0x04
    3bc0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    3bc2:	eb 81       	ldd	r30, Y+3	; 0x03
    3bc4:	fc 81       	ldd	r31, Y+4	; 0x04
    3bc6:	88 e1       	ldi	r24, 0x18	; 24
    3bc8:	80 83       	st	Z, r24
	pxTopOfStack--;
    3bca:	8b 81       	ldd	r24, Y+3	; 0x03
    3bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bce:	01 97       	sbiw	r24, 0x01	; 1
    3bd0:	9c 83       	std	Y+4, r25	; 0x04
    3bd2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    3bd4:	eb 81       	ldd	r30, Y+3	; 0x03
    3bd6:	fc 81       	ldd	r31, Y+4	; 0x04
    3bd8:	89 e1       	ldi	r24, 0x19	; 25
    3bda:	80 83       	st	Z, r24
	pxTopOfStack--;
    3bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bde:	9c 81       	ldd	r25, Y+4	; 0x04
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	9c 83       	std	Y+4, r25	; 0x04
    3be4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    3be6:	eb 81       	ldd	r30, Y+3	; 0x03
    3be8:	fc 81       	ldd	r31, Y+4	; 0x04
    3bea:	80 e2       	ldi	r24, 0x20	; 32
    3bec:	80 83       	st	Z, r24
	pxTopOfStack--;
    3bee:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
    3bf4:	9c 83       	std	Y+4, r25	; 0x04
    3bf6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    3bf8:	eb 81       	ldd	r30, Y+3	; 0x03
    3bfa:	fc 81       	ldd	r31, Y+4	; 0x04
    3bfc:	81 e2       	ldi	r24, 0x21	; 33
    3bfe:	80 83       	st	Z, r24
	pxTopOfStack--;
    3c00:	8b 81       	ldd	r24, Y+3	; 0x03
    3c02:	9c 81       	ldd	r25, Y+4	; 0x04
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	9c 83       	std	Y+4, r25	; 0x04
    3c08:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    3c0a:	eb 81       	ldd	r30, Y+3	; 0x03
    3c0c:	fc 81       	ldd	r31, Y+4	; 0x04
    3c0e:	82 e2       	ldi	r24, 0x22	; 34
    3c10:	80 83       	st	Z, r24
	pxTopOfStack--;
    3c12:	8b 81       	ldd	r24, Y+3	; 0x03
    3c14:	9c 81       	ldd	r25, Y+4	; 0x04
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	9c 83       	std	Y+4, r25	; 0x04
    3c1a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    3c1c:	eb 81       	ldd	r30, Y+3	; 0x03
    3c1e:	fc 81       	ldd	r31, Y+4	; 0x04
    3c20:	83 e2       	ldi	r24, 0x23	; 35
    3c22:	80 83       	st	Z, r24
	pxTopOfStack--;
    3c24:	8b 81       	ldd	r24, Y+3	; 0x03
    3c26:	9c 81       	ldd	r25, Y+4	; 0x04
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	9c 83       	std	Y+4, r25	; 0x04
    3c2c:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    3c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c30:	98 85       	ldd	r25, Y+8	; 0x08
    3c32:	9a 83       	std	Y+2, r25	; 0x02
    3c34:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	eb 81       	ldd	r30, Y+3	; 0x03
    3c3a:	fc 81       	ldd	r31, Y+4	; 0x04
    3c3c:	80 83       	st	Z, r24
	pxTopOfStack--;
    3c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c40:	9c 81       	ldd	r25, Y+4	; 0x04
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	9c 83       	std	Y+4, r25	; 0x04
    3c46:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4c:	89 2f       	mov	r24, r25
    3c4e:	99 27       	eor	r25, r25
    3c50:	9a 83       	std	Y+2, r25	; 0x02
    3c52:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	eb 81       	ldd	r30, Y+3	; 0x03
    3c58:	fc 81       	ldd	r31, Y+4	; 0x04
    3c5a:	80 83       	st	Z, r24
	pxTopOfStack--;
    3c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	9c 83       	std	Y+4, r25	; 0x04
    3c64:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    3c66:	eb 81       	ldd	r30, Y+3	; 0x03
    3c68:	fc 81       	ldd	r31, Y+4	; 0x04
    3c6a:	86 e2       	ldi	r24, 0x26	; 38
    3c6c:	80 83       	st	Z, r24
	pxTopOfStack--;
    3c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c70:	9c 81       	ldd	r25, Y+4	; 0x04
    3c72:	01 97       	sbiw	r24, 0x01	; 1
    3c74:	9c 83       	std	Y+4, r25	; 0x04
    3c76:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    3c78:	eb 81       	ldd	r30, Y+3	; 0x03
    3c7a:	fc 81       	ldd	r31, Y+4	; 0x04
    3c7c:	87 e2       	ldi	r24, 0x27	; 39
    3c7e:	80 83       	st	Z, r24
	pxTopOfStack--;
    3c80:	8b 81       	ldd	r24, Y+3	; 0x03
    3c82:	9c 81       	ldd	r25, Y+4	; 0x04
    3c84:	01 97       	sbiw	r24, 0x01	; 1
    3c86:	9c 83       	std	Y+4, r25	; 0x04
    3c88:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    3c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    3c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    3c8e:	88 e2       	ldi	r24, 0x28	; 40
    3c90:	80 83       	st	Z, r24
	pxTopOfStack--;
    3c92:	8b 81       	ldd	r24, Y+3	; 0x03
    3c94:	9c 81       	ldd	r25, Y+4	; 0x04
    3c96:	01 97       	sbiw	r24, 0x01	; 1
    3c98:	9c 83       	std	Y+4, r25	; 0x04
    3c9a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    3c9c:	eb 81       	ldd	r30, Y+3	; 0x03
    3c9e:	fc 81       	ldd	r31, Y+4	; 0x04
    3ca0:	89 e2       	ldi	r24, 0x29	; 41
    3ca2:	80 83       	st	Z, r24
	pxTopOfStack--;
    3ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca8:	01 97       	sbiw	r24, 0x01	; 1
    3caa:	9c 83       	std	Y+4, r25	; 0x04
    3cac:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    3cae:	eb 81       	ldd	r30, Y+3	; 0x03
    3cb0:	fc 81       	ldd	r31, Y+4	; 0x04
    3cb2:	80 e3       	ldi	r24, 0x30	; 48
    3cb4:	80 83       	st	Z, r24
	pxTopOfStack--;
    3cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	9c 83       	std	Y+4, r25	; 0x04
    3cbe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    3cc0:	eb 81       	ldd	r30, Y+3	; 0x03
    3cc2:	fc 81       	ldd	r31, Y+4	; 0x04
    3cc4:	81 e3       	ldi	r24, 0x31	; 49
    3cc6:	80 83       	st	Z, r24
	pxTopOfStack--;
    3cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cca:	9c 81       	ldd	r25, Y+4	; 0x04
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	9c 83       	std	Y+4, r25	; 0x04
    3cd0:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    3cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3cd6:	28 96       	adiw	r28, 0x08	; 8
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
    3ce2:	cf 91       	pop	r28
    3ce4:	df 91       	pop	r29
    3ce6:	08 95       	ret

00003ce8 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    3ce8:	df 93       	push	r29
    3cea:	cf 93       	push	r28
    3cec:	cd b7       	in	r28, 0x3d	; 61
    3cee:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    3cf0:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    3cf4:	a0 91 b3 04 	lds	r26, 0x04B3
    3cf8:	b0 91 b4 04 	lds	r27, 0x04B4
    3cfc:	cd 91       	ld	r28, X+
    3cfe:	cd bf       	out	0x3d, r28	; 61
    3d00:	dd 91       	ld	r29, X+
    3d02:	de bf       	out	0x3e, r29	; 62
    3d04:	ff 91       	pop	r31
    3d06:	ef 91       	pop	r30
    3d08:	df 91       	pop	r29
    3d0a:	cf 91       	pop	r28
    3d0c:	bf 91       	pop	r27
    3d0e:	af 91       	pop	r26
    3d10:	9f 91       	pop	r25
    3d12:	8f 91       	pop	r24
    3d14:	7f 91       	pop	r23
    3d16:	6f 91       	pop	r22
    3d18:	5f 91       	pop	r21
    3d1a:	4f 91       	pop	r20
    3d1c:	3f 91       	pop	r19
    3d1e:	2f 91       	pop	r18
    3d20:	1f 91       	pop	r17
    3d22:	0f 91       	pop	r16
    3d24:	ff 90       	pop	r15
    3d26:	ef 90       	pop	r14
    3d28:	df 90       	pop	r13
    3d2a:	cf 90       	pop	r12
    3d2c:	bf 90       	pop	r11
    3d2e:	af 90       	pop	r10
    3d30:	9f 90       	pop	r9
    3d32:	8f 90       	pop	r8
    3d34:	7f 90       	pop	r7
    3d36:	6f 90       	pop	r6
    3d38:	5f 90       	pop	r5
    3d3a:	4f 90       	pop	r4
    3d3c:	3f 90       	pop	r3
    3d3e:	2f 90       	pop	r2
    3d40:	1f 90       	pop	r1
    3d42:	0f 90       	pop	r0
    3d44:	0f be       	out	0x3f, r0	; 63
    3d46:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    3d48:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
}
    3d4c:	cf 91       	pop	r28
    3d4e:	df 91       	pop	r29
    3d50:	08 95       	ret

00003d52 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    3d52:	df 93       	push	r29
    3d54:	cf 93       	push	r28
    3d56:	cd b7       	in	r28, 0x3d	; 61
    3d58:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    3d5a:	cf 91       	pop	r28
    3d5c:	df 91       	pop	r29
    3d5e:	08 95       	ret

00003d60 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    3d60:	0f 92       	push	r0
    3d62:	0f b6       	in	r0, 0x3f	; 63
    3d64:	f8 94       	cli
    3d66:	0f 92       	push	r0
    3d68:	1f 92       	push	r1
    3d6a:	11 24       	eor	r1, r1
    3d6c:	2f 92       	push	r2
    3d6e:	3f 92       	push	r3
    3d70:	4f 92       	push	r4
    3d72:	5f 92       	push	r5
    3d74:	6f 92       	push	r6
    3d76:	7f 92       	push	r7
    3d78:	8f 92       	push	r8
    3d7a:	9f 92       	push	r9
    3d7c:	af 92       	push	r10
    3d7e:	bf 92       	push	r11
    3d80:	cf 92       	push	r12
    3d82:	df 92       	push	r13
    3d84:	ef 92       	push	r14
    3d86:	ff 92       	push	r15
    3d88:	0f 93       	push	r16
    3d8a:	1f 93       	push	r17
    3d8c:	2f 93       	push	r18
    3d8e:	3f 93       	push	r19
    3d90:	4f 93       	push	r20
    3d92:	5f 93       	push	r21
    3d94:	6f 93       	push	r22
    3d96:	7f 93       	push	r23
    3d98:	8f 93       	push	r24
    3d9a:	9f 93       	push	r25
    3d9c:	af 93       	push	r26
    3d9e:	bf 93       	push	r27
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	ef 93       	push	r30
    3da6:	ff 93       	push	r31
    3da8:	a0 91 b3 04 	lds	r26, 0x04B3
    3dac:	b0 91 b4 04 	lds	r27, 0x04B4
    3db0:	0d b6       	in	r0, 0x3d	; 61
    3db2:	0d 92       	st	X+, r0
    3db4:	0e b6       	in	r0, 0x3e	; 62
    3db6:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    3db8:	0e 94 3f 28 	call	0x507e	; 0x507e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    3dbc:	a0 91 b3 04 	lds	r26, 0x04B3
    3dc0:	b0 91 b4 04 	lds	r27, 0x04B4
    3dc4:	cd 91       	ld	r28, X+
    3dc6:	cd bf       	out	0x3d, r28	; 61
    3dc8:	dd 91       	ld	r29, X+
    3dca:	de bf       	out	0x3e, r29	; 62
    3dcc:	ff 91       	pop	r31
    3dce:	ef 91       	pop	r30
    3dd0:	df 91       	pop	r29
    3dd2:	cf 91       	pop	r28
    3dd4:	bf 91       	pop	r27
    3dd6:	af 91       	pop	r26
    3dd8:	9f 91       	pop	r25
    3dda:	8f 91       	pop	r24
    3ddc:	7f 91       	pop	r23
    3dde:	6f 91       	pop	r22
    3de0:	5f 91       	pop	r21
    3de2:	4f 91       	pop	r20
    3de4:	3f 91       	pop	r19
    3de6:	2f 91       	pop	r18
    3de8:	1f 91       	pop	r17
    3dea:	0f 91       	pop	r16
    3dec:	ff 90       	pop	r15
    3dee:	ef 90       	pop	r14
    3df0:	df 90       	pop	r13
    3df2:	cf 90       	pop	r12
    3df4:	bf 90       	pop	r11
    3df6:	af 90       	pop	r10
    3df8:	9f 90       	pop	r9
    3dfa:	8f 90       	pop	r8
    3dfc:	7f 90       	pop	r7
    3dfe:	6f 90       	pop	r6
    3e00:	5f 90       	pop	r5
    3e02:	4f 90       	pop	r4
    3e04:	3f 90       	pop	r3
    3e06:	2f 90       	pop	r2
    3e08:	1f 90       	pop	r1
    3e0a:	0f 90       	pop	r0
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    3e10:	08 95       	ret

00003e12 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    3e12:	0f 92       	push	r0
    3e14:	0f b6       	in	r0, 0x3f	; 63
    3e16:	f8 94       	cli
    3e18:	0f 92       	push	r0
    3e1a:	1f 92       	push	r1
    3e1c:	11 24       	eor	r1, r1
    3e1e:	2f 92       	push	r2
    3e20:	3f 92       	push	r3
    3e22:	4f 92       	push	r4
    3e24:	5f 92       	push	r5
    3e26:	6f 92       	push	r6
    3e28:	7f 92       	push	r7
    3e2a:	8f 92       	push	r8
    3e2c:	9f 92       	push	r9
    3e2e:	af 92       	push	r10
    3e30:	bf 92       	push	r11
    3e32:	cf 92       	push	r12
    3e34:	df 92       	push	r13
    3e36:	ef 92       	push	r14
    3e38:	ff 92       	push	r15
    3e3a:	0f 93       	push	r16
    3e3c:	1f 93       	push	r17
    3e3e:	2f 93       	push	r18
    3e40:	3f 93       	push	r19
    3e42:	4f 93       	push	r20
    3e44:	5f 93       	push	r21
    3e46:	6f 93       	push	r22
    3e48:	7f 93       	push	r23
    3e4a:	8f 93       	push	r24
    3e4c:	9f 93       	push	r25
    3e4e:	af 93       	push	r26
    3e50:	bf 93       	push	r27
    3e52:	cf 93       	push	r28
    3e54:	df 93       	push	r29
    3e56:	ef 93       	push	r30
    3e58:	ff 93       	push	r31
    3e5a:	a0 91 b3 04 	lds	r26, 0x04B3
    3e5e:	b0 91 b4 04 	lds	r27, 0x04B4
    3e62:	0d b6       	in	r0, 0x3d	; 61
    3e64:	0d 92       	st	X+, r0
    3e66:	0e b6       	in	r0, 0x3e	; 62
    3e68:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    3e6a:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <vTaskIncrementTick>
	vTaskSwitchContext();
    3e6e:	0e 94 3f 28 	call	0x507e	; 0x507e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    3e72:	a0 91 b3 04 	lds	r26, 0x04B3
    3e76:	b0 91 b4 04 	lds	r27, 0x04B4
    3e7a:	cd 91       	ld	r28, X+
    3e7c:	cd bf       	out	0x3d, r28	; 61
    3e7e:	dd 91       	ld	r29, X+
    3e80:	de bf       	out	0x3e, r29	; 62
    3e82:	ff 91       	pop	r31
    3e84:	ef 91       	pop	r30
    3e86:	df 91       	pop	r29
    3e88:	cf 91       	pop	r28
    3e8a:	bf 91       	pop	r27
    3e8c:	af 91       	pop	r26
    3e8e:	9f 91       	pop	r25
    3e90:	8f 91       	pop	r24
    3e92:	7f 91       	pop	r23
    3e94:	6f 91       	pop	r22
    3e96:	5f 91       	pop	r21
    3e98:	4f 91       	pop	r20
    3e9a:	3f 91       	pop	r19
    3e9c:	2f 91       	pop	r18
    3e9e:	1f 91       	pop	r17
    3ea0:	0f 91       	pop	r16
    3ea2:	ff 90       	pop	r15
    3ea4:	ef 90       	pop	r14
    3ea6:	df 90       	pop	r13
    3ea8:	cf 90       	pop	r12
    3eaa:	bf 90       	pop	r11
    3eac:	af 90       	pop	r10
    3eae:	9f 90       	pop	r9
    3eb0:	8f 90       	pop	r8
    3eb2:	7f 90       	pop	r7
    3eb4:	6f 90       	pop	r6
    3eb6:	5f 90       	pop	r5
    3eb8:	4f 90       	pop	r4
    3eba:	3f 90       	pop	r3
    3ebc:	2f 90       	pop	r2
    3ebe:	1f 90       	pop	r1
    3ec0:	0f 90       	pop	r0
    3ec2:	0f be       	out	0x3f, r0	; 63
    3ec4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    3ec6:	08 95       	ret

00003ec8 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    3ec8:	df 93       	push	r29
    3eca:	cf 93       	push	r28
    3ecc:	00 d0       	rcall	.+0      	; 0x3ece <prvSetupTimerInterrupt+0x6>
    3ece:	00 d0       	rcall	.+0      	; 0x3ed0 <prvSetupTimerInterrupt+0x8>
    3ed0:	00 d0       	rcall	.+0      	; 0x3ed2 <prvSetupTimerInterrupt+0xa>
    3ed2:	cd b7       	in	r28, 0x3d	; 61
    3ed4:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    3ed6:	80 e8       	ldi	r24, 0x80	; 128
    3ed8:	9e e3       	ldi	r25, 0x3E	; 62
    3eda:	a0 e0       	ldi	r26, 0x00	; 0
    3edc:	b0 e0       	ldi	r27, 0x00	; 0
    3ede:	8b 83       	std	Y+3, r24	; 0x03
    3ee0:	9c 83       	std	Y+4, r25	; 0x04
    3ee2:	ad 83       	std	Y+5, r26	; 0x05
    3ee4:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    3ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eea:	ad 81       	ldd	r26, Y+5	; 0x05
    3eec:	be 81       	ldd	r27, Y+6	; 0x06
    3eee:	68 94       	set
    3ef0:	15 f8       	bld	r1, 5
    3ef2:	b6 95       	lsr	r27
    3ef4:	a7 95       	ror	r26
    3ef6:	97 95       	ror	r25
    3ef8:	87 95       	ror	r24
    3efa:	16 94       	lsr	r1
    3efc:	d1 f7       	brne	.-12     	; 0x3ef2 <prvSetupTimerInterrupt+0x2a>
    3efe:	8b 83       	std	Y+3, r24	; 0x03
    3f00:	9c 83       	std	Y+4, r25	; 0x04
    3f02:	ad 83       	std	Y+5, r26	; 0x05
    3f04:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    3f06:	8b 81       	ldd	r24, Y+3	; 0x03
    3f08:	9c 81       	ldd	r25, Y+4	; 0x04
    3f0a:	ad 81       	ldd	r26, Y+5	; 0x05
    3f0c:	be 81       	ldd	r27, Y+6	; 0x06
    3f0e:	01 97       	sbiw	r24, 0x01	; 1
    3f10:	a1 09       	sbc	r26, r1
    3f12:	b1 09       	sbc	r27, r1
    3f14:	8b 83       	std	Y+3, r24	; 0x03
    3f16:	9c 83       	std	Y+4, r25	; 0x04
    3f18:	ad 83       	std	Y+5, r26	; 0x05
    3f1a:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    3f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1e:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    3f20:	8b 81       	ldd	r24, Y+3	; 0x03
    3f22:	9c 81       	ldd	r25, Y+4	; 0x04
    3f24:	ad 81       	ldd	r26, Y+5	; 0x05
    3f26:	be 81       	ldd	r27, Y+6	; 0x06
    3f28:	89 2f       	mov	r24, r25
    3f2a:	9a 2f       	mov	r25, r26
    3f2c:	ab 2f       	mov	r26, r27
    3f2e:	bb 27       	eor	r27, r27
    3f30:	8b 83       	std	Y+3, r24	; 0x03
    3f32:	9c 83       	std	Y+4, r25	; 0x04
    3f34:	ad 83       	std	Y+5, r26	; 0x05
    3f36:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    3f38:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3a:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    3f3c:	eb e4       	ldi	r30, 0x4B	; 75
    3f3e:	f0 e0       	ldi	r31, 0x00	; 0
    3f40:	8a 81       	ldd	r24, Y+2	; 0x02
    3f42:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    3f44:	ea e4       	ldi	r30, 0x4A	; 74
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	89 81       	ldd	r24, Y+1	; 0x01
    3f4a:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    3f4c:	8b e0       	ldi	r24, 0x0B	; 11
    3f4e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    3f50:	ee e4       	ldi	r30, 0x4E	; 78
    3f52:	f0 e0       	ldi	r31, 0x00	; 0
    3f54:	89 81       	ldd	r24, Y+1	; 0x01
    3f56:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    3f58:	e9 e5       	ldi	r30, 0x59	; 89
    3f5a:	f0 e0       	ldi	r31, 0x00	; 0
    3f5c:	80 81       	ld	r24, Z
    3f5e:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	80 61       	ori	r24, 0x10	; 16
    3f64:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    3f66:	e9 e5       	ldi	r30, 0x59	; 89
    3f68:	f0 e0       	ldi	r31, 0x00	; 0
    3f6a:	89 81       	ldd	r24, Y+1	; 0x01
    3f6c:	80 83       	st	Z, r24
}
    3f6e:	26 96       	adiw	r28, 0x06	; 6
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	f8 94       	cli
    3f74:	de bf       	out	0x3e, r29	; 62
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	cd bf       	out	0x3d, r28	; 61
    3f7a:	cf 91       	pop	r28
    3f7c:	df 91       	pop	r29
    3f7e:	08 95       	ret

00003f80 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    3f80:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <vPortYieldFromTick>
		asm volatile ( "reti" );
    3f84:	18 95       	reti

00003f86 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    3f86:	df 93       	push	r29
    3f88:	cf 93       	push	r28
    3f8a:	cd b7       	in	r28, 0x3d	; 61
    3f8c:	de b7       	in	r29, 0x3e	; 62
    3f8e:	28 97       	sbiw	r28, 0x08	; 8
    3f90:	0f b6       	in	r0, 0x3f	; 63
    3f92:	f8 94       	cli
    3f94:	de bf       	out	0x3e, r29	; 62
    3f96:	0f be       	out	0x3f, r0	; 63
    3f98:	cd bf       	out	0x3d, r28	; 61
    3f9a:	8f 83       	std	Y+7, r24	; 0x07
    3f9c:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    3f9e:	1a 82       	std	Y+2, r1	; 0x02
    3fa0:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    3fa2:	8f 81       	ldd	r24, Y+7	; 0x07
    3fa4:	88 23       	and	r24, r24
    3fa6:	09 f4       	brne	.+2      	; 0x3faa <xQueueCreate+0x24>
    3fa8:	8c c0       	rjmp	.+280    	; 0x40c2 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3faa:	8f e1       	ldi	r24, 0x1F	; 31
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	0e 94 4a 1b 	call	0x3694	; 0x3694 <pvPortMalloc>
    3fb2:	9e 83       	std	Y+6, r25	; 0x06
    3fb4:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    3fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	09 f4       	brne	.+2      	; 0x3fc0 <xQueueCreate+0x3a>
    3fbe:	81 c0       	rjmp	.+258    	; 0x40c2 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    3fc0:	8f 81       	ldd	r24, Y+7	; 0x07
    3fc2:	28 2f       	mov	r18, r24
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	88 85       	ldd	r24, Y+8	; 0x08
    3fc8:	88 2f       	mov	r24, r24
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	ac 01       	movw	r20, r24
    3fce:	24 9f       	mul	r18, r20
    3fd0:	c0 01       	movw	r24, r0
    3fd2:	25 9f       	mul	r18, r21
    3fd4:	90 0d       	add	r25, r0
    3fd6:	34 9f       	mul	r19, r20
    3fd8:	90 0d       	add	r25, r0
    3fda:	11 24       	eor	r1, r1
    3fdc:	01 96       	adiw	r24, 0x01	; 1
    3fde:	9c 83       	std	Y+4, r25	; 0x04
    3fe0:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    3fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fe6:	0e 94 4a 1b 	call	0x3694	; 0x3694 <pvPortMalloc>
    3fea:	ed 81       	ldd	r30, Y+5	; 0x05
    3fec:	fe 81       	ldd	r31, Y+6	; 0x06
    3fee:	91 83       	std	Z+1, r25	; 0x01
    3ff0:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    3ff2:	ed 81       	ldd	r30, Y+5	; 0x05
    3ff4:	fe 81       	ldd	r31, Y+6	; 0x06
    3ff6:	80 81       	ld	r24, Z
    3ff8:	91 81       	ldd	r25, Z+1	; 0x01
    3ffa:	00 97       	sbiw	r24, 0x00	; 0
    3ffc:	09 f4       	brne	.+2      	; 0x4000 <xQueueCreate+0x7a>
    3ffe:	5d c0       	rjmp	.+186    	; 0x40ba <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    4000:	ed 81       	ldd	r30, Y+5	; 0x05
    4002:	fe 81       	ldd	r31, Y+6	; 0x06
    4004:	40 81       	ld	r20, Z
    4006:	51 81       	ldd	r21, Z+1	; 0x01
    4008:	8f 81       	ldd	r24, Y+7	; 0x07
    400a:	28 2f       	mov	r18, r24
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	88 85       	ldd	r24, Y+8	; 0x08
    4010:	88 2f       	mov	r24, r24
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	bc 01       	movw	r22, r24
    4016:	26 9f       	mul	r18, r22
    4018:	c0 01       	movw	r24, r0
    401a:	27 9f       	mul	r18, r23
    401c:	90 0d       	add	r25, r0
    401e:	36 9f       	mul	r19, r22
    4020:	90 0d       	add	r25, r0
    4022:	11 24       	eor	r1, r1
    4024:	84 0f       	add	r24, r20
    4026:	95 1f       	adc	r25, r21
    4028:	ed 81       	ldd	r30, Y+5	; 0x05
    402a:	fe 81       	ldd	r31, Y+6	; 0x06
    402c:	93 83       	std	Z+3, r25	; 0x03
    402e:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4030:	ed 81       	ldd	r30, Y+5	; 0x05
    4032:	fe 81       	ldd	r31, Y+6	; 0x06
    4034:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    4036:	ed 81       	ldd	r30, Y+5	; 0x05
    4038:	fe 81       	ldd	r31, Y+6	; 0x06
    403a:	80 81       	ld	r24, Z
    403c:	91 81       	ldd	r25, Z+1	; 0x01
    403e:	ed 81       	ldd	r30, Y+5	; 0x05
    4040:	fe 81       	ldd	r31, Y+6	; 0x06
    4042:	95 83       	std	Z+5, r25	; 0x05
    4044:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    4046:	ed 81       	ldd	r30, Y+5	; 0x05
    4048:	fe 81       	ldd	r31, Y+6	; 0x06
    404a:	40 81       	ld	r20, Z
    404c:	51 81       	ldd	r21, Z+1	; 0x01
    404e:	8f 81       	ldd	r24, Y+7	; 0x07
    4050:	88 2f       	mov	r24, r24
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	9c 01       	movw	r18, r24
    4056:	21 50       	subi	r18, 0x01	; 1
    4058:	30 40       	sbci	r19, 0x00	; 0
    405a:	88 85       	ldd	r24, Y+8	; 0x08
    405c:	88 2f       	mov	r24, r24
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	bc 01       	movw	r22, r24
    4062:	26 9f       	mul	r18, r22
    4064:	c0 01       	movw	r24, r0
    4066:	27 9f       	mul	r18, r23
    4068:	90 0d       	add	r25, r0
    406a:	36 9f       	mul	r19, r22
    406c:	90 0d       	add	r25, r0
    406e:	11 24       	eor	r1, r1
    4070:	84 0f       	add	r24, r20
    4072:	95 1f       	adc	r25, r21
    4074:	ed 81       	ldd	r30, Y+5	; 0x05
    4076:	fe 81       	ldd	r31, Y+6	; 0x06
    4078:	97 83       	std	Z+7, r25	; 0x07
    407a:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    407c:	ed 81       	ldd	r30, Y+5	; 0x05
    407e:	fe 81       	ldd	r31, Y+6	; 0x06
    4080:	8f 81       	ldd	r24, Y+7	; 0x07
    4082:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    4084:	ed 81       	ldd	r30, Y+5	; 0x05
    4086:	fe 81       	ldd	r31, Y+6	; 0x06
    4088:	88 85       	ldd	r24, Y+8	; 0x08
    408a:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    408c:	ed 81       	ldd	r30, Y+5	; 0x05
    408e:	fe 81       	ldd	r31, Y+6	; 0x06
    4090:	8f ef       	ldi	r24, 0xFF	; 255
    4092:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    4094:	ed 81       	ldd	r30, Y+5	; 0x05
    4096:	fe 81       	ldd	r31, Y+6	; 0x06
    4098:	8f ef       	ldi	r24, 0xFF	; 255
    409a:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    409c:	8d 81       	ldd	r24, Y+5	; 0x05
    409e:	9e 81       	ldd	r25, Y+6	; 0x06
    40a0:	08 96       	adiw	r24, 0x08	; 8
    40a2:	0e 94 b6 1b 	call	0x376c	; 0x376c <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    40a6:	8d 81       	ldd	r24, Y+5	; 0x05
    40a8:	9e 81       	ldd	r25, Y+6	; 0x06
    40aa:	41 96       	adiw	r24, 0x11	; 17
    40ac:	0e 94 b6 1b 	call	0x376c	; 0x376c <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    40b0:	8d 81       	ldd	r24, Y+5	; 0x05
    40b2:	9e 81       	ldd	r25, Y+6	; 0x06
    40b4:	9a 83       	std	Y+2, r25	; 0x02
    40b6:	89 83       	std	Y+1, r24	; 0x01
    40b8:	04 c0       	rjmp	.+8      	; 0x40c2 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    40ba:	8d 81       	ldd	r24, Y+5	; 0x05
    40bc:	9e 81       	ldd	r25, Y+6	; 0x06
    40be:	0e 94 90 1b 	call	0x3720	; 0x3720 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    40c6:	28 96       	adiw	r28, 0x08	; 8
    40c8:	0f b6       	in	r0, 0x3f	; 63
    40ca:	f8 94       	cli
    40cc:	de bf       	out	0x3e, r29	; 62
    40ce:	0f be       	out	0x3f, r0	; 63
    40d0:	cd bf       	out	0x3d, r28	; 61
    40d2:	cf 91       	pop	r28
    40d4:	df 91       	pop	r29
    40d6:	08 95       	ret

000040d8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
    40d8:	df 93       	push	r29
    40da:	cf 93       	push	r28
    40dc:	00 d0       	rcall	.+0      	; 0x40de <xQueueCreateCountingSemaphore+0x6>
    40de:	00 d0       	rcall	.+0      	; 0x40e0 <xQueueCreateCountingSemaphore+0x8>
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	8b 83       	std	Y+3, r24	; 0x03
    40e6:	6c 83       	std	Y+4, r22	; 0x04
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
    40e8:	8b 81       	ldd	r24, Y+3	; 0x03
    40ea:	60 e0       	ldi	r22, 0x00	; 0
    40ec:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <xQueueCreate>
    40f0:	9a 83       	std	Y+2, r25	; 0x02
    40f2:	89 83       	std	Y+1, r24	; 0x01

		if( pxHandle != NULL )
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	9a 81       	ldd	r25, Y+2	; 0x02
    40f8:	00 97       	sbiw	r24, 0x00	; 0
    40fa:	21 f0       	breq	.+8      	; 0x4104 <xQueueCreateCountingSemaphore+0x2c>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
    40fc:	e9 81       	ldd	r30, Y+1	; 0x01
    40fe:	fa 81       	ldd	r31, Y+2	; 0x02
    4100:	8c 81       	ldd	r24, Y+4	; 0x04
    4102:	82 8f       	std	Z+26, r24	; 0x1a
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    4108:	0f 90       	pop	r0
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	cf 91       	pop	r28
    4112:	df 91       	pop	r29
    4114:	08 95       	ret

00004116 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    4116:	df 93       	push	r29
    4118:	cf 93       	push	r28
    411a:	cd b7       	in	r28, 0x3d	; 61
    411c:	de b7       	in	r29, 0x3e	; 62
    411e:	2c 97       	sbiw	r28, 0x0c	; 12
    4120:	0f b6       	in	r0, 0x3f	; 63
    4122:	f8 94       	cli
    4124:	de bf       	out	0x3e, r29	; 62
    4126:	0f be       	out	0x3f, r0	; 63
    4128:	cd bf       	out	0x3d, r28	; 61
    412a:	9e 83       	std	Y+6, r25	; 0x06
    412c:	8d 83       	std	Y+5, r24	; 0x05
    412e:	78 87       	std	Y+8, r23	; 0x08
    4130:	6f 83       	std	Y+7, r22	; 0x07
    4132:	5a 87       	std	Y+10, r21	; 0x0a
    4134:	49 87       	std	Y+9, r20	; 0x09
    4136:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4138:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    413a:	0f b6       	in	r0, 0x3f	; 63
    413c:	f8 94       	cli
    413e:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    4140:	ed 81       	ldd	r30, Y+5	; 0x05
    4142:	fe 81       	ldd	r31, Y+6	; 0x06
    4144:	92 8d       	ldd	r25, Z+26	; 0x1a
    4146:	ed 81       	ldd	r30, Y+5	; 0x05
    4148:	fe 81       	ldd	r31, Y+6	; 0x06
    414a:	83 8d       	ldd	r24, Z+27	; 0x1b
    414c:	98 17       	cp	r25, r24
    414e:	d8 f4       	brcc	.+54     	; 0x4186 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4150:	8d 81       	ldd	r24, Y+5	; 0x05
    4152:	9e 81       	ldd	r25, Y+6	; 0x06
    4154:	2f 81       	ldd	r18, Y+7	; 0x07
    4156:	38 85       	ldd	r19, Y+8	; 0x08
    4158:	b9 01       	movw	r22, r18
    415a:	4b 85       	ldd	r20, Y+11	; 0x0b
    415c:	0e 94 c6 22 	call	0x458c	; 0x458c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4160:	ed 81       	ldd	r30, Y+5	; 0x05
    4162:	fe 81       	ldd	r31, Y+6	; 0x06
    4164:	81 89       	ldd	r24, Z+17	; 0x11
    4166:	88 23       	and	r24, r24
    4168:	49 f0       	breq	.+18     	; 0x417c <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    416a:	8d 81       	ldd	r24, Y+5	; 0x05
    416c:	9e 81       	ldd	r25, Y+6	; 0x06
    416e:	41 96       	adiw	r24, 0x11	; 17
    4170:	0e 94 db 28 	call	0x51b6	; 0x51b6 <xTaskRemoveFromEventList>
    4174:	81 30       	cpi	r24, 0x01	; 1
    4176:	11 f4       	brne	.+4      	; 0x417c <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    4178:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    417c:	0f 90       	pop	r0
    417e:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4180:	81 e0       	ldi	r24, 0x01	; 1
    4182:	8c 87       	std	Y+12, r24	; 0x0c
    4184:	5c c0       	rjmp	.+184    	; 0x423e <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4186:	89 85       	ldd	r24, Y+9	; 0x09
    4188:	9a 85       	ldd	r25, Y+10	; 0x0a
    418a:	00 97       	sbiw	r24, 0x00	; 0
    418c:	21 f4       	brne	.+8      	; 0x4196 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    418e:	0f 90       	pop	r0
    4190:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4192:	1c 86       	std	Y+12, r1	; 0x0c
    4194:	54 c0       	rjmp	.+168    	; 0x423e <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	88 23       	and	r24, r24
    419a:	31 f4       	brne	.+12     	; 0x41a8 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    419c:	ce 01       	movw	r24, r28
    419e:	02 96       	adiw	r24, 0x02	; 2
    41a0:	0e 94 43 29 	call	0x5286	; 0x5286 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    41a8:	0f 90       	pop	r0
    41aa:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    41ac:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	0f 92       	push	r0
    41b6:	ed 81       	ldd	r30, Y+5	; 0x05
    41b8:	fe 81       	ldd	r31, Y+6	; 0x06
    41ba:	85 8d       	ldd	r24, Z+29	; 0x1d
    41bc:	8f 3f       	cpi	r24, 0xFF	; 255
    41be:	19 f4       	brne	.+6      	; 0x41c6 <xQueueGenericSend+0xb0>
    41c0:	ed 81       	ldd	r30, Y+5	; 0x05
    41c2:	fe 81       	ldd	r31, Y+6	; 0x06
    41c4:	15 8e       	std	Z+29, r1	; 0x1d
    41c6:	ed 81       	ldd	r30, Y+5	; 0x05
    41c8:	fe 81       	ldd	r31, Y+6	; 0x06
    41ca:	86 8d       	ldd	r24, Z+30	; 0x1e
    41cc:	8f 3f       	cpi	r24, 0xFF	; 255
    41ce:	19 f4       	brne	.+6      	; 0x41d6 <xQueueGenericSend+0xc0>
    41d0:	ed 81       	ldd	r30, Y+5	; 0x05
    41d2:	fe 81       	ldd	r31, Y+6	; 0x06
    41d4:	16 8e       	std	Z+30, r1	; 0x1e
    41d6:	0f 90       	pop	r0
    41d8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    41da:	ce 01       	movw	r24, r28
    41dc:	02 96       	adiw	r24, 0x02	; 2
    41de:	9e 01       	movw	r18, r28
    41e0:	27 5f       	subi	r18, 0xF7	; 247
    41e2:	3f 4f       	sbci	r19, 0xFF	; 255
    41e4:	b9 01       	movw	r22, r18
    41e6:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <xTaskCheckForTimeOut>
    41ea:	88 23       	and	r24, r24
    41ec:	09 f5       	brne	.+66     	; 0x4230 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    41ee:	8d 81       	ldd	r24, Y+5	; 0x05
    41f0:	9e 81       	ldd	r25, Y+6	; 0x06
    41f2:	0e 94 2a 24 	call	0x4854	; 0x4854 <prvIsQueueFull>
    41f6:	88 23       	and	r24, r24
    41f8:	a1 f0       	breq	.+40     	; 0x4222 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    41fa:	8d 81       	ldd	r24, Y+5	; 0x05
    41fc:	9e 81       	ldd	r25, Y+6	; 0x06
    41fe:	08 96       	adiw	r24, 0x08	; 8
    4200:	29 85       	ldd	r18, Y+9	; 0x09
    4202:	3a 85       	ldd	r19, Y+10	; 0x0a
    4204:	b9 01       	movw	r22, r18
    4206:	0e 94 a5 28 	call	0x514a	; 0x514a <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    420a:	8d 81       	ldd	r24, Y+5	; 0x05
    420c:	9e 81       	ldd	r25, Y+6	; 0x06
    420e:	0e 94 a3 23 	call	0x4746	; 0x4746 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4212:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <xTaskResumeAll>
    4216:	88 23       	and	r24, r24
    4218:	09 f0       	breq	.+2      	; 0x421c <xQueueGenericSend+0x106>
    421a:	8f cf       	rjmp	.-226    	; 0x413a <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    421c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <vPortYield>
    4220:	8c cf       	rjmp	.-232    	; 0x413a <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4222:	8d 81       	ldd	r24, Y+5	; 0x05
    4224:	9e 81       	ldd	r25, Y+6	; 0x06
    4226:	0e 94 a3 23 	call	0x4746	; 0x4746 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    422a:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <xTaskResumeAll>
    422e:	85 cf       	rjmp	.-246    	; 0x413a <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    4230:	8d 81       	ldd	r24, Y+5	; 0x05
    4232:	9e 81       	ldd	r25, Y+6	; 0x06
    4234:	0e 94 a3 23 	call	0x4746	; 0x4746 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4238:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    423c:	1c 86       	std	Y+12, r1	; 0x0c
    423e:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    4240:	2c 96       	adiw	r28, 0x0c	; 12
    4242:	0f b6       	in	r0, 0x3f	; 63
    4244:	f8 94       	cli
    4246:	de bf       	out	0x3e, r29	; 62
    4248:	0f be       	out	0x3f, r0	; 63
    424a:	cd bf       	out	0x3d, r28	; 61
    424c:	cf 91       	pop	r28
    424e:	df 91       	pop	r29
    4250:	08 95       	ret

00004252 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    4252:	df 93       	push	r29
    4254:	cf 93       	push	r28
    4256:	cd b7       	in	r28, 0x3d	; 61
    4258:	de b7       	in	r29, 0x3e	; 62
    425a:	29 97       	sbiw	r28, 0x09	; 9
    425c:	0f b6       	in	r0, 0x3f	; 63
    425e:	f8 94       	cli
    4260:	de bf       	out	0x3e, r29	; 62
    4262:	0f be       	out	0x3f, r0	; 63
    4264:	cd bf       	out	0x3d, r28	; 61
    4266:	9c 83       	std	Y+4, r25	; 0x04
    4268:	8b 83       	std	Y+3, r24	; 0x03
    426a:	7e 83       	std	Y+6, r23	; 0x06
    426c:	6d 83       	std	Y+5, r22	; 0x05
    426e:	58 87       	std	Y+8, r21	; 0x08
    4270:	4f 83       	std	Y+7, r20	; 0x07
    4272:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4274:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    4276:	eb 81       	ldd	r30, Y+3	; 0x03
    4278:	fc 81       	ldd	r31, Y+4	; 0x04
    427a:	92 8d       	ldd	r25, Z+26	; 0x1a
    427c:	eb 81       	ldd	r30, Y+3	; 0x03
    427e:	fc 81       	ldd	r31, Y+4	; 0x04
    4280:	83 8d       	ldd	r24, Z+27	; 0x1b
    4282:	98 17       	cp	r25, r24
    4284:	40 f5       	brcc	.+80     	; 0x42d6 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4286:	8b 81       	ldd	r24, Y+3	; 0x03
    4288:	9c 81       	ldd	r25, Y+4	; 0x04
    428a:	2d 81       	ldd	r18, Y+5	; 0x05
    428c:	3e 81       	ldd	r19, Y+6	; 0x06
    428e:	b9 01       	movw	r22, r18
    4290:	49 85       	ldd	r20, Y+9	; 0x09
    4292:	0e 94 c6 22 	call	0x458c	; 0x458c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4296:	eb 81       	ldd	r30, Y+3	; 0x03
    4298:	fc 81       	ldd	r31, Y+4	; 0x04
    429a:	86 8d       	ldd	r24, Z+30	; 0x1e
    429c:	8f 3f       	cpi	r24, 0xFF	; 255
    429e:	89 f4       	brne	.+34     	; 0x42c2 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    42a0:	eb 81       	ldd	r30, Y+3	; 0x03
    42a2:	fc 81       	ldd	r31, Y+4	; 0x04
    42a4:	81 89       	ldd	r24, Z+17	; 0x11
    42a6:	88 23       	and	r24, r24
    42a8:	99 f0       	breq	.+38     	; 0x42d0 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    42aa:	8b 81       	ldd	r24, Y+3	; 0x03
    42ac:	9c 81       	ldd	r25, Y+4	; 0x04
    42ae:	41 96       	adiw	r24, 0x11	; 17
    42b0:	0e 94 db 28 	call	0x51b6	; 0x51b6 <xTaskRemoveFromEventList>
    42b4:	88 23       	and	r24, r24
    42b6:	61 f0       	breq	.+24     	; 0x42d0 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    42b8:	ef 81       	ldd	r30, Y+7	; 0x07
    42ba:	f8 85       	ldd	r31, Y+8	; 0x08
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	80 83       	st	Z, r24
    42c0:	07 c0       	rjmp	.+14     	; 0x42d0 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    42c2:	eb 81       	ldd	r30, Y+3	; 0x03
    42c4:	fc 81       	ldd	r31, Y+4	; 0x04
    42c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    42c8:	8f 5f       	subi	r24, 0xFF	; 255
    42ca:	eb 81       	ldd	r30, Y+3	; 0x03
    42cc:	fc 81       	ldd	r31, Y+4	; 0x04
    42ce:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	8a 83       	std	Y+2, r24	; 0x02
    42d4:	01 c0       	rjmp	.+2      	; 0x42d8 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    42d6:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    42d8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    42da:	29 96       	adiw	r28, 0x09	; 9
    42dc:	0f b6       	in	r0, 0x3f	; 63
    42de:	f8 94       	cli
    42e0:	de bf       	out	0x3e, r29	; 62
    42e2:	0f be       	out	0x3f, r0	; 63
    42e4:	cd bf       	out	0x3d, r28	; 61
    42e6:	cf 91       	pop	r28
    42e8:	df 91       	pop	r29
    42ea:	08 95       	ret

000042ec <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    42ec:	df 93       	push	r29
    42ee:	cf 93       	push	r28
    42f0:	cd b7       	in	r28, 0x3d	; 61
    42f2:	de b7       	in	r29, 0x3e	; 62
    42f4:	2e 97       	sbiw	r28, 0x0e	; 14
    42f6:	0f b6       	in	r0, 0x3f	; 63
    42f8:	f8 94       	cli
    42fa:	de bf       	out	0x3e, r29	; 62
    42fc:	0f be       	out	0x3f, r0	; 63
    42fe:	cd bf       	out	0x3d, r28	; 61
    4300:	98 87       	std	Y+8, r25	; 0x08
    4302:	8f 83       	std	Y+7, r24	; 0x07
    4304:	7a 87       	std	Y+10, r23	; 0x0a
    4306:	69 87       	std	Y+9, r22	; 0x09
    4308:	5c 87       	std	Y+12, r21	; 0x0c
    430a:	4b 87       	std	Y+11, r20	; 0x0b
    430c:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    430e:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4310:	0f b6       	in	r0, 0x3f	; 63
    4312:	f8 94       	cli
    4314:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4316:	ef 81       	ldd	r30, Y+7	; 0x07
    4318:	f8 85       	ldd	r31, Y+8	; 0x08
    431a:	82 8d       	ldd	r24, Z+26	; 0x1a
    431c:	88 23       	and	r24, r24
    431e:	09 f4       	brne	.+2      	; 0x4322 <xQueueGenericReceive+0x36>
    4320:	3f c0       	rjmp	.+126    	; 0x43a0 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    4322:	ef 81       	ldd	r30, Y+7	; 0x07
    4324:	f8 85       	ldd	r31, Y+8	; 0x08
    4326:	86 81       	ldd	r24, Z+6	; 0x06
    4328:	97 81       	ldd	r25, Z+7	; 0x07
    432a:	9a 83       	std	Y+2, r25	; 0x02
    432c:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    432e:	8f 81       	ldd	r24, Y+7	; 0x07
    4330:	98 85       	ldd	r25, Y+8	; 0x08
    4332:	29 85       	ldd	r18, Y+9	; 0x09
    4334:	3a 85       	ldd	r19, Y+10	; 0x0a
    4336:	b9 01       	movw	r22, r18
    4338:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    433c:	8d 85       	ldd	r24, Y+13	; 0x0d
    433e:	88 23       	and	r24, r24
    4340:	b1 f4       	brne	.+44     	; 0x436e <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    4342:	ef 81       	ldd	r30, Y+7	; 0x07
    4344:	f8 85       	ldd	r31, Y+8	; 0x08
    4346:	82 8d       	ldd	r24, Z+26	; 0x1a
    4348:	81 50       	subi	r24, 0x01	; 1
    434a:	ef 81       	ldd	r30, Y+7	; 0x07
    434c:	f8 85       	ldd	r31, Y+8	; 0x08
    434e:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4350:	ef 81       	ldd	r30, Y+7	; 0x07
    4352:	f8 85       	ldd	r31, Y+8	; 0x08
    4354:	80 85       	ldd	r24, Z+8	; 0x08
    4356:	88 23       	and	r24, r24
    4358:	f1 f0       	breq	.+60     	; 0x4396 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    435a:	8f 81       	ldd	r24, Y+7	; 0x07
    435c:	98 85       	ldd	r25, Y+8	; 0x08
    435e:	08 96       	adiw	r24, 0x08	; 8
    4360:	0e 94 db 28 	call	0x51b6	; 0x51b6 <xTaskRemoveFromEventList>
    4364:	81 30       	cpi	r24, 0x01	; 1
    4366:	b9 f4       	brne	.+46     	; 0x4396 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    4368:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <vPortYield>
    436c:	14 c0       	rjmp	.+40     	; 0x4396 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    436e:	ef 81       	ldd	r30, Y+7	; 0x07
    4370:	f8 85       	ldd	r31, Y+8	; 0x08
    4372:	89 81       	ldd	r24, Y+1	; 0x01
    4374:	9a 81       	ldd	r25, Y+2	; 0x02
    4376:	97 83       	std	Z+7, r25	; 0x07
    4378:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    437a:	ef 81       	ldd	r30, Y+7	; 0x07
    437c:	f8 85       	ldd	r31, Y+8	; 0x08
    437e:	81 89       	ldd	r24, Z+17	; 0x11
    4380:	88 23       	and	r24, r24
    4382:	49 f0       	breq	.+18     	; 0x4396 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4384:	8f 81       	ldd	r24, Y+7	; 0x07
    4386:	98 85       	ldd	r25, Y+8	; 0x08
    4388:	41 96       	adiw	r24, 0x11	; 17
    438a:	0e 94 db 28 	call	0x51b6	; 0x51b6 <xTaskRemoveFromEventList>
    438e:	88 23       	and	r24, r24
    4390:	11 f0       	breq	.+4      	; 0x4396 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    4392:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    4396:	0f 90       	pop	r0
    4398:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	8e 87       	std	Y+14, r24	; 0x0e
    439e:	5c c0       	rjmp	.+184    	; 0x4458 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    43a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    43a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    43a4:	00 97       	sbiw	r24, 0x00	; 0
    43a6:	21 f4       	brne	.+8      	; 0x43b0 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    43a8:	0f 90       	pop	r0
    43aa:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    43ac:	1e 86       	std	Y+14, r1	; 0x0e
    43ae:	54 c0       	rjmp	.+168    	; 0x4458 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    43b0:	8b 81       	ldd	r24, Y+3	; 0x03
    43b2:	88 23       	and	r24, r24
    43b4:	31 f4       	brne	.+12     	; 0x43c2 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    43b6:	ce 01       	movw	r24, r28
    43b8:	04 96       	adiw	r24, 0x04	; 4
    43ba:	0e 94 43 29 	call	0x5286	; 0x5286 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    43c2:	0f 90       	pop	r0
    43c4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    43c6:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    43ca:	0f b6       	in	r0, 0x3f	; 63
    43cc:	f8 94       	cli
    43ce:	0f 92       	push	r0
    43d0:	ef 81       	ldd	r30, Y+7	; 0x07
    43d2:	f8 85       	ldd	r31, Y+8	; 0x08
    43d4:	85 8d       	ldd	r24, Z+29	; 0x1d
    43d6:	8f 3f       	cpi	r24, 0xFF	; 255
    43d8:	19 f4       	brne	.+6      	; 0x43e0 <xQueueGenericReceive+0xf4>
    43da:	ef 81       	ldd	r30, Y+7	; 0x07
    43dc:	f8 85       	ldd	r31, Y+8	; 0x08
    43de:	15 8e       	std	Z+29, r1	; 0x1d
    43e0:	ef 81       	ldd	r30, Y+7	; 0x07
    43e2:	f8 85       	ldd	r31, Y+8	; 0x08
    43e4:	86 8d       	ldd	r24, Z+30	; 0x1e
    43e6:	8f 3f       	cpi	r24, 0xFF	; 255
    43e8:	19 f4       	brne	.+6      	; 0x43f0 <xQueueGenericReceive+0x104>
    43ea:	ef 81       	ldd	r30, Y+7	; 0x07
    43ec:	f8 85       	ldd	r31, Y+8	; 0x08
    43ee:	16 8e       	std	Z+30, r1	; 0x1e
    43f0:	0f 90       	pop	r0
    43f2:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    43f4:	ce 01       	movw	r24, r28
    43f6:	04 96       	adiw	r24, 0x04	; 4
    43f8:	9e 01       	movw	r18, r28
    43fa:	25 5f       	subi	r18, 0xF5	; 245
    43fc:	3f 4f       	sbci	r19, 0xFF	; 255
    43fe:	b9 01       	movw	r22, r18
    4400:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <xTaskCheckForTimeOut>
    4404:	88 23       	and	r24, r24
    4406:	09 f5       	brne	.+66     	; 0x444a <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4408:	8f 81       	ldd	r24, Y+7	; 0x07
    440a:	98 85       	ldd	r25, Y+8	; 0x08
    440c:	0e 94 f7 23 	call	0x47ee	; 0x47ee <prvIsQueueEmpty>
    4410:	88 23       	and	r24, r24
    4412:	a1 f0       	breq	.+40     	; 0x443c <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4414:	8f 81       	ldd	r24, Y+7	; 0x07
    4416:	98 85       	ldd	r25, Y+8	; 0x08
    4418:	41 96       	adiw	r24, 0x11	; 17
    441a:	2b 85       	ldd	r18, Y+11	; 0x0b
    441c:	3c 85       	ldd	r19, Y+12	; 0x0c
    441e:	b9 01       	movw	r22, r18
    4420:	0e 94 a5 28 	call	0x514a	; 0x514a <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4424:	8f 81       	ldd	r24, Y+7	; 0x07
    4426:	98 85       	ldd	r25, Y+8	; 0x08
    4428:	0e 94 a3 23 	call	0x4746	; 0x4746 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    442c:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <xTaskResumeAll>
    4430:	88 23       	and	r24, r24
    4432:	09 f0       	breq	.+2      	; 0x4436 <xQueueGenericReceive+0x14a>
    4434:	6d cf       	rjmp	.-294    	; 0x4310 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    4436:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <vPortYield>
    443a:	6a cf       	rjmp	.-300    	; 0x4310 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    443c:	8f 81       	ldd	r24, Y+7	; 0x07
    443e:	98 85       	ldd	r25, Y+8	; 0x08
    4440:	0e 94 a3 23 	call	0x4746	; 0x4746 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4444:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <xTaskResumeAll>
    4448:	63 cf       	rjmp	.-314    	; 0x4310 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    444a:	8f 81       	ldd	r24, Y+7	; 0x07
    444c:	98 85       	ldd	r25, Y+8	; 0x08
    444e:	0e 94 a3 23 	call	0x4746	; 0x4746 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4452:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    4456:	1e 86       	std	Y+14, r1	; 0x0e
    4458:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    445a:	2e 96       	adiw	r28, 0x0e	; 14
    445c:	0f b6       	in	r0, 0x3f	; 63
    445e:	f8 94       	cli
    4460:	de bf       	out	0x3e, r29	; 62
    4462:	0f be       	out	0x3f, r0	; 63
    4464:	cd bf       	out	0x3d, r28	; 61
    4466:	cf 91       	pop	r28
    4468:	df 91       	pop	r29
    446a:	08 95       	ret

0000446c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    446c:	df 93       	push	r29
    446e:	cf 93       	push	r28
    4470:	cd b7       	in	r28, 0x3d	; 61
    4472:	de b7       	in	r29, 0x3e	; 62
    4474:	28 97       	sbiw	r28, 0x08	; 8
    4476:	0f b6       	in	r0, 0x3f	; 63
    4478:	f8 94       	cli
    447a:	de bf       	out	0x3e, r29	; 62
    447c:	0f be       	out	0x3f, r0	; 63
    447e:	cd bf       	out	0x3d, r28	; 61
    4480:	9c 83       	std	Y+4, r25	; 0x04
    4482:	8b 83       	std	Y+3, r24	; 0x03
    4484:	7e 83       	std	Y+6, r23	; 0x06
    4486:	6d 83       	std	Y+5, r22	; 0x05
    4488:	58 87       	std	Y+8, r21	; 0x08
    448a:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    448c:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    448e:	eb 81       	ldd	r30, Y+3	; 0x03
    4490:	fc 81       	ldd	r31, Y+4	; 0x04
    4492:	82 8d       	ldd	r24, Z+26	; 0x1a
    4494:	88 23       	and	r24, r24
    4496:	71 f1       	breq	.+92     	; 0x44f4 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    4498:	8b 81       	ldd	r24, Y+3	; 0x03
    449a:	9c 81       	ldd	r25, Y+4	; 0x04
    449c:	2d 81       	ldd	r18, Y+5	; 0x05
    449e:	3e 81       	ldd	r19, Y+6	; 0x06
    44a0:	b9 01       	movw	r22, r18
    44a2:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    44a6:	eb 81       	ldd	r30, Y+3	; 0x03
    44a8:	fc 81       	ldd	r31, Y+4	; 0x04
    44aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    44ac:	81 50       	subi	r24, 0x01	; 1
    44ae:	eb 81       	ldd	r30, Y+3	; 0x03
    44b0:	fc 81       	ldd	r31, Y+4	; 0x04
    44b2:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    44b4:	eb 81       	ldd	r30, Y+3	; 0x03
    44b6:	fc 81       	ldd	r31, Y+4	; 0x04
    44b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    44ba:	8f 3f       	cpi	r24, 0xFF	; 255
    44bc:	89 f4       	brne	.+34     	; 0x44e0 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    44be:	eb 81       	ldd	r30, Y+3	; 0x03
    44c0:	fc 81       	ldd	r31, Y+4	; 0x04
    44c2:	80 85       	ldd	r24, Z+8	; 0x08
    44c4:	88 23       	and	r24, r24
    44c6:	99 f0       	breq	.+38     	; 0x44ee <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    44c8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ca:	9c 81       	ldd	r25, Y+4	; 0x04
    44cc:	08 96       	adiw	r24, 0x08	; 8
    44ce:	0e 94 db 28 	call	0x51b6	; 0x51b6 <xTaskRemoveFromEventList>
    44d2:	88 23       	and	r24, r24
    44d4:	61 f0       	breq	.+24     	; 0x44ee <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    44d6:	ef 81       	ldd	r30, Y+7	; 0x07
    44d8:	f8 85       	ldd	r31, Y+8	; 0x08
    44da:	81 e0       	ldi	r24, 0x01	; 1
    44dc:	80 83       	st	Z, r24
    44de:	07 c0       	rjmp	.+14     	; 0x44ee <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    44e0:	eb 81       	ldd	r30, Y+3	; 0x03
    44e2:	fc 81       	ldd	r31, Y+4	; 0x04
    44e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    44e6:	8f 5f       	subi	r24, 0xFF	; 255
    44e8:	eb 81       	ldd	r30, Y+3	; 0x03
    44ea:	fc 81       	ldd	r31, Y+4	; 0x04
    44ec:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	8a 83       	std	Y+2, r24	; 0x02
    44f2:	01 c0       	rjmp	.+2      	; 0x44f6 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    44f4:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    44f6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    44f8:	28 96       	adiw	r28, 0x08	; 8
    44fa:	0f b6       	in	r0, 0x3f	; 63
    44fc:	f8 94       	cli
    44fe:	de bf       	out	0x3e, r29	; 62
    4500:	0f be       	out	0x3f, r0	; 63
    4502:	cd bf       	out	0x3d, r28	; 61
    4504:	cf 91       	pop	r28
    4506:	df 91       	pop	r29
    4508:	08 95       	ret

0000450a <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    450a:	df 93       	push	r29
    450c:	cf 93       	push	r28
    450e:	00 d0       	rcall	.+0      	; 0x4510 <uxQueueMessagesWaiting+0x6>
    4510:	0f 92       	push	r0
    4512:	cd b7       	in	r28, 0x3d	; 61
    4514:	de b7       	in	r29, 0x3e	; 62
    4516:	9b 83       	std	Y+3, r25	; 0x03
    4518:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    451a:	0f b6       	in	r0, 0x3f	; 63
    451c:	f8 94       	cli
    451e:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    4520:	ea 81       	ldd	r30, Y+2	; 0x02
    4522:	fb 81       	ldd	r31, Y+3	; 0x03
    4524:	82 8d       	ldd	r24, Z+26	; 0x1a
    4526:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    4528:	0f 90       	pop	r0
    452a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    452c:	89 81       	ldd	r24, Y+1	; 0x01
}
    452e:	0f 90       	pop	r0
    4530:	0f 90       	pop	r0
    4532:	0f 90       	pop	r0
    4534:	cf 91       	pop	r28
    4536:	df 91       	pop	r29
    4538:	08 95       	ret

0000453a <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    453a:	df 93       	push	r29
    453c:	cf 93       	push	r28
    453e:	00 d0       	rcall	.+0      	; 0x4540 <uxQueueMessagesWaitingFromISR+0x6>
    4540:	0f 92       	push	r0
    4542:	cd b7       	in	r28, 0x3d	; 61
    4544:	de b7       	in	r29, 0x3e	; 62
    4546:	9b 83       	std	Y+3, r25	; 0x03
    4548:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    454a:	ea 81       	ldd	r30, Y+2	; 0x02
    454c:	fb 81       	ldd	r31, Y+3	; 0x03
    454e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4550:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    4552:	89 81       	ldd	r24, Y+1	; 0x01
}
    4554:	0f 90       	pop	r0
    4556:	0f 90       	pop	r0
    4558:	0f 90       	pop	r0
    455a:	cf 91       	pop	r28
    455c:	df 91       	pop	r29
    455e:	08 95       	ret

00004560 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4560:	df 93       	push	r29
    4562:	cf 93       	push	r28
    4564:	00 d0       	rcall	.+0      	; 0x4566 <vQueueDelete+0x6>
    4566:	cd b7       	in	r28, 0x3d	; 61
    4568:	de b7       	in	r29, 0x3e	; 62
    456a:	9a 83       	std	Y+2, r25	; 0x02
    456c:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    456e:	e9 81       	ldd	r30, Y+1	; 0x01
    4570:	fa 81       	ldd	r31, Y+2	; 0x02
    4572:	80 81       	ld	r24, Z
    4574:	91 81       	ldd	r25, Z+1	; 0x01
    4576:	0e 94 90 1b 	call	0x3720	; 0x3720 <vPortFree>
	vPortFree( pxQueue );
    457a:	89 81       	ldd	r24, Y+1	; 0x01
    457c:	9a 81       	ldd	r25, Y+2	; 0x02
    457e:	0e 94 90 1b 	call	0x3720	; 0x3720 <vPortFree>
}
    4582:	0f 90       	pop	r0
    4584:	0f 90       	pop	r0
    4586:	cf 91       	pop	r28
    4588:	df 91       	pop	r29
    458a:	08 95       	ret

0000458c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    458c:	df 93       	push	r29
    458e:	cf 93       	push	r28
    4590:	00 d0       	rcall	.+0      	; 0x4592 <prvCopyDataToQueue+0x6>
    4592:	00 d0       	rcall	.+0      	; 0x4594 <prvCopyDataToQueue+0x8>
    4594:	0f 92       	push	r0
    4596:	cd b7       	in	r28, 0x3d	; 61
    4598:	de b7       	in	r29, 0x3e	; 62
    459a:	9a 83       	std	Y+2, r25	; 0x02
    459c:	89 83       	std	Y+1, r24	; 0x01
    459e:	7c 83       	std	Y+4, r23	; 0x04
    45a0:	6b 83       	std	Y+3, r22	; 0x03
    45a2:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    45a4:	e9 81       	ldd	r30, Y+1	; 0x01
    45a6:	fa 81       	ldd	r31, Y+2	; 0x02
    45a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    45aa:	88 23       	and	r24, r24
    45ac:	09 f4       	brne	.+2      	; 0x45b0 <prvCopyDataToQueue+0x24>
    45ae:	74 c0       	rjmp	.+232    	; 0x4698 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    45b0:	8d 81       	ldd	r24, Y+5	; 0x05
    45b2:	88 23       	and	r24, r24
    45b4:	99 f5       	brne	.+102    	; 0x461c <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    45b6:	e9 81       	ldd	r30, Y+1	; 0x01
    45b8:	fa 81       	ldd	r31, Y+2	; 0x02
    45ba:	64 81       	ldd	r22, Z+4	; 0x04
    45bc:	75 81       	ldd	r23, Z+5	; 0x05
    45be:	e9 81       	ldd	r30, Y+1	; 0x01
    45c0:	fa 81       	ldd	r31, Y+2	; 0x02
    45c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    45c4:	48 2f       	mov	r20, r24
    45c6:	50 e0       	ldi	r21, 0x00	; 0
    45c8:	2b 81       	ldd	r18, Y+3	; 0x03
    45ca:	3c 81       	ldd	r19, Y+4	; 0x04
    45cc:	cb 01       	movw	r24, r22
    45ce:	b9 01       	movw	r22, r18
    45d0:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    45d4:	e9 81       	ldd	r30, Y+1	; 0x01
    45d6:	fa 81       	ldd	r31, Y+2	; 0x02
    45d8:	24 81       	ldd	r18, Z+4	; 0x04
    45da:	35 81       	ldd	r19, Z+5	; 0x05
    45dc:	e9 81       	ldd	r30, Y+1	; 0x01
    45de:	fa 81       	ldd	r31, Y+2	; 0x02
    45e0:	84 8d       	ldd	r24, Z+28	; 0x1c
    45e2:	88 2f       	mov	r24, r24
    45e4:	90 e0       	ldi	r25, 0x00	; 0
    45e6:	82 0f       	add	r24, r18
    45e8:	93 1f       	adc	r25, r19
    45ea:	e9 81       	ldd	r30, Y+1	; 0x01
    45ec:	fa 81       	ldd	r31, Y+2	; 0x02
    45ee:	95 83       	std	Z+5, r25	; 0x05
    45f0:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    45f2:	e9 81       	ldd	r30, Y+1	; 0x01
    45f4:	fa 81       	ldd	r31, Y+2	; 0x02
    45f6:	24 81       	ldd	r18, Z+4	; 0x04
    45f8:	35 81       	ldd	r19, Z+5	; 0x05
    45fa:	e9 81       	ldd	r30, Y+1	; 0x01
    45fc:	fa 81       	ldd	r31, Y+2	; 0x02
    45fe:	82 81       	ldd	r24, Z+2	; 0x02
    4600:	93 81       	ldd	r25, Z+3	; 0x03
    4602:	28 17       	cp	r18, r24
    4604:	39 07       	cpc	r19, r25
    4606:	08 f4       	brcc	.+2      	; 0x460a <prvCopyDataToQueue+0x7e>
    4608:	47 c0       	rjmp	.+142    	; 0x4698 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    460a:	e9 81       	ldd	r30, Y+1	; 0x01
    460c:	fa 81       	ldd	r31, Y+2	; 0x02
    460e:	80 81       	ld	r24, Z
    4610:	91 81       	ldd	r25, Z+1	; 0x01
    4612:	e9 81       	ldd	r30, Y+1	; 0x01
    4614:	fa 81       	ldd	r31, Y+2	; 0x02
    4616:	95 83       	std	Z+5, r25	; 0x05
    4618:	84 83       	std	Z+4, r24	; 0x04
    461a:	3e c0       	rjmp	.+124    	; 0x4698 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    461c:	e9 81       	ldd	r30, Y+1	; 0x01
    461e:	fa 81       	ldd	r31, Y+2	; 0x02
    4620:	66 81       	ldd	r22, Z+6	; 0x06
    4622:	77 81       	ldd	r23, Z+7	; 0x07
    4624:	e9 81       	ldd	r30, Y+1	; 0x01
    4626:	fa 81       	ldd	r31, Y+2	; 0x02
    4628:	84 8d       	ldd	r24, Z+28	; 0x1c
    462a:	48 2f       	mov	r20, r24
    462c:	50 e0       	ldi	r21, 0x00	; 0
    462e:	2b 81       	ldd	r18, Y+3	; 0x03
    4630:	3c 81       	ldd	r19, Y+4	; 0x04
    4632:	cb 01       	movw	r24, r22
    4634:	b9 01       	movw	r22, r18
    4636:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    463a:	e9 81       	ldd	r30, Y+1	; 0x01
    463c:	fa 81       	ldd	r31, Y+2	; 0x02
    463e:	26 81       	ldd	r18, Z+6	; 0x06
    4640:	37 81       	ldd	r19, Z+7	; 0x07
    4642:	e9 81       	ldd	r30, Y+1	; 0x01
    4644:	fa 81       	ldd	r31, Y+2	; 0x02
    4646:	84 8d       	ldd	r24, Z+28	; 0x1c
    4648:	88 2f       	mov	r24, r24
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	90 95       	com	r25
    464e:	81 95       	neg	r24
    4650:	9f 4f       	sbci	r25, 0xFF	; 255
    4652:	82 0f       	add	r24, r18
    4654:	93 1f       	adc	r25, r19
    4656:	e9 81       	ldd	r30, Y+1	; 0x01
    4658:	fa 81       	ldd	r31, Y+2	; 0x02
    465a:	97 83       	std	Z+7, r25	; 0x07
    465c:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    465e:	e9 81       	ldd	r30, Y+1	; 0x01
    4660:	fa 81       	ldd	r31, Y+2	; 0x02
    4662:	26 81       	ldd	r18, Z+6	; 0x06
    4664:	37 81       	ldd	r19, Z+7	; 0x07
    4666:	e9 81       	ldd	r30, Y+1	; 0x01
    4668:	fa 81       	ldd	r31, Y+2	; 0x02
    466a:	80 81       	ld	r24, Z
    466c:	91 81       	ldd	r25, Z+1	; 0x01
    466e:	28 17       	cp	r18, r24
    4670:	39 07       	cpc	r19, r25
    4672:	90 f4       	brcc	.+36     	; 0x4698 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4674:	e9 81       	ldd	r30, Y+1	; 0x01
    4676:	fa 81       	ldd	r31, Y+2	; 0x02
    4678:	22 81       	ldd	r18, Z+2	; 0x02
    467a:	33 81       	ldd	r19, Z+3	; 0x03
    467c:	e9 81       	ldd	r30, Y+1	; 0x01
    467e:	fa 81       	ldd	r31, Y+2	; 0x02
    4680:	84 8d       	ldd	r24, Z+28	; 0x1c
    4682:	88 2f       	mov	r24, r24
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	90 95       	com	r25
    4688:	81 95       	neg	r24
    468a:	9f 4f       	sbci	r25, 0xFF	; 255
    468c:	82 0f       	add	r24, r18
    468e:	93 1f       	adc	r25, r19
    4690:	e9 81       	ldd	r30, Y+1	; 0x01
    4692:	fa 81       	ldd	r31, Y+2	; 0x02
    4694:	97 83       	std	Z+7, r25	; 0x07
    4696:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4698:	e9 81       	ldd	r30, Y+1	; 0x01
    469a:	fa 81       	ldd	r31, Y+2	; 0x02
    469c:	82 8d       	ldd	r24, Z+26	; 0x1a
    469e:	8f 5f       	subi	r24, 0xFF	; 255
    46a0:	e9 81       	ldd	r30, Y+1	; 0x01
    46a2:	fa 81       	ldd	r31, Y+2	; 0x02
    46a4:	82 8f       	std	Z+26, r24	; 0x1a
}
    46a6:	0f 90       	pop	r0
    46a8:	0f 90       	pop	r0
    46aa:	0f 90       	pop	r0
    46ac:	0f 90       	pop	r0
    46ae:	0f 90       	pop	r0
    46b0:	cf 91       	pop	r28
    46b2:	df 91       	pop	r29
    46b4:	08 95       	ret

000046b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    46b6:	df 93       	push	r29
    46b8:	cf 93       	push	r28
    46ba:	00 d0       	rcall	.+0      	; 0x46bc <prvCopyDataFromQueue+0x6>
    46bc:	00 d0       	rcall	.+0      	; 0x46be <prvCopyDataFromQueue+0x8>
    46be:	cd b7       	in	r28, 0x3d	; 61
    46c0:	de b7       	in	r29, 0x3e	; 62
    46c2:	9a 83       	std	Y+2, r25	; 0x02
    46c4:	89 83       	std	Y+1, r24	; 0x01
    46c6:	7c 83       	std	Y+4, r23	; 0x04
    46c8:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    46ca:	e9 81       	ldd	r30, Y+1	; 0x01
    46cc:	fa 81       	ldd	r31, Y+2	; 0x02
    46ce:	80 81       	ld	r24, Z
    46d0:	91 81       	ldd	r25, Z+1	; 0x01
    46d2:	00 97       	sbiw	r24, 0x00	; 0
    46d4:	89 f1       	breq	.+98     	; 0x4738 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    46d6:	e9 81       	ldd	r30, Y+1	; 0x01
    46d8:	fa 81       	ldd	r31, Y+2	; 0x02
    46da:	26 81       	ldd	r18, Z+6	; 0x06
    46dc:	37 81       	ldd	r19, Z+7	; 0x07
    46de:	e9 81       	ldd	r30, Y+1	; 0x01
    46e0:	fa 81       	ldd	r31, Y+2	; 0x02
    46e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    46e4:	88 2f       	mov	r24, r24
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	82 0f       	add	r24, r18
    46ea:	93 1f       	adc	r25, r19
    46ec:	e9 81       	ldd	r30, Y+1	; 0x01
    46ee:	fa 81       	ldd	r31, Y+2	; 0x02
    46f0:	97 83       	std	Z+7, r25	; 0x07
    46f2:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    46f4:	e9 81       	ldd	r30, Y+1	; 0x01
    46f6:	fa 81       	ldd	r31, Y+2	; 0x02
    46f8:	26 81       	ldd	r18, Z+6	; 0x06
    46fa:	37 81       	ldd	r19, Z+7	; 0x07
    46fc:	e9 81       	ldd	r30, Y+1	; 0x01
    46fe:	fa 81       	ldd	r31, Y+2	; 0x02
    4700:	82 81       	ldd	r24, Z+2	; 0x02
    4702:	93 81       	ldd	r25, Z+3	; 0x03
    4704:	28 17       	cp	r18, r24
    4706:	39 07       	cpc	r19, r25
    4708:	40 f0       	brcs	.+16     	; 0x471a <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    470a:	e9 81       	ldd	r30, Y+1	; 0x01
    470c:	fa 81       	ldd	r31, Y+2	; 0x02
    470e:	80 81       	ld	r24, Z
    4710:	91 81       	ldd	r25, Z+1	; 0x01
    4712:	e9 81       	ldd	r30, Y+1	; 0x01
    4714:	fa 81       	ldd	r31, Y+2	; 0x02
    4716:	97 83       	std	Z+7, r25	; 0x07
    4718:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    471a:	e9 81       	ldd	r30, Y+1	; 0x01
    471c:	fa 81       	ldd	r31, Y+2	; 0x02
    471e:	46 81       	ldd	r20, Z+6	; 0x06
    4720:	57 81       	ldd	r21, Z+7	; 0x07
    4722:	e9 81       	ldd	r30, Y+1	; 0x01
    4724:	fa 81       	ldd	r31, Y+2	; 0x02
    4726:	84 8d       	ldd	r24, Z+28	; 0x1c
    4728:	28 2f       	mov	r18, r24
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	8b 81       	ldd	r24, Y+3	; 0x03
    472e:	9c 81       	ldd	r25, Y+4	; 0x04
    4730:	ba 01       	movw	r22, r20
    4732:	a9 01       	movw	r20, r18
    4734:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <memcpy>
	}
}
    4738:	0f 90       	pop	r0
    473a:	0f 90       	pop	r0
    473c:	0f 90       	pop	r0
    473e:	0f 90       	pop	r0
    4740:	cf 91       	pop	r28
    4742:	df 91       	pop	r29
    4744:	08 95       	ret

00004746 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    4746:	df 93       	push	r29
    4748:	cf 93       	push	r28
    474a:	00 d0       	rcall	.+0      	; 0x474c <prvUnlockQueue+0x6>
    474c:	cd b7       	in	r28, 0x3d	; 61
    474e:	de b7       	in	r29, 0x3e	; 62
    4750:	9a 83       	std	Y+2, r25	; 0x02
    4752:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	f8 94       	cli
    4758:	0f 92       	push	r0
    475a:	15 c0       	rjmp	.+42     	; 0x4786 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    475c:	e9 81       	ldd	r30, Y+1	; 0x01
    475e:	fa 81       	ldd	r31, Y+2	; 0x02
    4760:	81 89       	ldd	r24, Z+17	; 0x11
    4762:	88 23       	and	r24, r24
    4764:	a9 f0       	breq	.+42     	; 0x4790 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4766:	89 81       	ldd	r24, Y+1	; 0x01
    4768:	9a 81       	ldd	r25, Y+2	; 0x02
    476a:	41 96       	adiw	r24, 0x11	; 17
    476c:	0e 94 db 28 	call	0x51b6	; 0x51b6 <xTaskRemoveFromEventList>
    4770:	88 23       	and	r24, r24
    4772:	11 f0       	breq	.+4      	; 0x4778 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    4774:	0e 94 b9 29 	call	0x5372	; 0x5372 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    4778:	e9 81       	ldd	r30, Y+1	; 0x01
    477a:	fa 81       	ldd	r31, Y+2	; 0x02
    477c:	86 8d       	ldd	r24, Z+30	; 0x1e
    477e:	81 50       	subi	r24, 0x01	; 1
    4780:	e9 81       	ldd	r30, Y+1	; 0x01
    4782:	fa 81       	ldd	r31, Y+2	; 0x02
    4784:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4786:	e9 81       	ldd	r30, Y+1	; 0x01
    4788:	fa 81       	ldd	r31, Y+2	; 0x02
    478a:	86 8d       	ldd	r24, Z+30	; 0x1e
    478c:	18 16       	cp	r1, r24
    478e:	34 f3       	brlt	.-52     	; 0x475c <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4790:	e9 81       	ldd	r30, Y+1	; 0x01
    4792:	fa 81       	ldd	r31, Y+2	; 0x02
    4794:	8f ef       	ldi	r24, 0xFF	; 255
    4796:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    4798:	0f 90       	pop	r0
    479a:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    479c:	0f b6       	in	r0, 0x3f	; 63
    479e:	f8 94       	cli
    47a0:	0f 92       	push	r0
    47a2:	15 c0       	rjmp	.+42     	; 0x47ce <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    47a4:	e9 81       	ldd	r30, Y+1	; 0x01
    47a6:	fa 81       	ldd	r31, Y+2	; 0x02
    47a8:	80 85       	ldd	r24, Z+8	; 0x08
    47aa:	88 23       	and	r24, r24
    47ac:	a9 f0       	breq	.+42     	; 0x47d8 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    47ae:	89 81       	ldd	r24, Y+1	; 0x01
    47b0:	9a 81       	ldd	r25, Y+2	; 0x02
    47b2:	08 96       	adiw	r24, 0x08	; 8
    47b4:	0e 94 db 28 	call	0x51b6	; 0x51b6 <xTaskRemoveFromEventList>
    47b8:	88 23       	and	r24, r24
    47ba:	11 f0       	breq	.+4      	; 0x47c0 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    47bc:	0e 94 b9 29 	call	0x5372	; 0x5372 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    47c0:	e9 81       	ldd	r30, Y+1	; 0x01
    47c2:	fa 81       	ldd	r31, Y+2	; 0x02
    47c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    47c6:	81 50       	subi	r24, 0x01	; 1
    47c8:	e9 81       	ldd	r30, Y+1	; 0x01
    47ca:	fa 81       	ldd	r31, Y+2	; 0x02
    47cc:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    47ce:	e9 81       	ldd	r30, Y+1	; 0x01
    47d0:	fa 81       	ldd	r31, Y+2	; 0x02
    47d2:	85 8d       	ldd	r24, Z+29	; 0x1d
    47d4:	18 16       	cp	r1, r24
    47d6:	34 f3       	brlt	.-52     	; 0x47a4 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    47d8:	e9 81       	ldd	r30, Y+1	; 0x01
    47da:	fa 81       	ldd	r31, Y+2	; 0x02
    47dc:	8f ef       	ldi	r24, 0xFF	; 255
    47de:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    47e0:	0f 90       	pop	r0
    47e2:	0f be       	out	0x3f, r0	; 63
}
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
    47e8:	cf 91       	pop	r28
    47ea:	df 91       	pop	r29
    47ec:	08 95       	ret

000047ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    47ee:	df 93       	push	r29
    47f0:	cf 93       	push	r28
    47f2:	00 d0       	rcall	.+0      	; 0x47f4 <prvIsQueueEmpty+0x6>
    47f4:	0f 92       	push	r0
    47f6:	cd b7       	in	r28, 0x3d	; 61
    47f8:	de b7       	in	r29, 0x3e	; 62
    47fa:	9b 83       	std	Y+3, r25	; 0x03
    47fc:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    47fe:	0f b6       	in	r0, 0x3f	; 63
    4800:	f8 94       	cli
    4802:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4804:	ea 81       	ldd	r30, Y+2	; 0x02
    4806:	fb 81       	ldd	r31, Y+3	; 0x03
    4808:	82 8d       	ldd	r24, Z+26	; 0x1a
    480a:	19 82       	std	Y+1, r1	; 0x01
    480c:	88 23       	and	r24, r24
    480e:	11 f4       	brne	.+4      	; 0x4814 <prvIsQueueEmpty+0x26>
    4810:	81 e0       	ldi	r24, 0x01	; 1
    4812:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    4814:	0f 90       	pop	r0
    4816:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4818:	89 81       	ldd	r24, Y+1	; 0x01
}
    481a:	0f 90       	pop	r0
    481c:	0f 90       	pop	r0
    481e:	0f 90       	pop	r0
    4820:	cf 91       	pop	r28
    4822:	df 91       	pop	r29
    4824:	08 95       	ret

00004826 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4826:	df 93       	push	r29
    4828:	cf 93       	push	r28
    482a:	00 d0       	rcall	.+0      	; 0x482c <xQueueIsQueueEmptyFromISR+0x6>
    482c:	0f 92       	push	r0
    482e:	cd b7       	in	r28, 0x3d	; 61
    4830:	de b7       	in	r29, 0x3e	; 62
    4832:	9b 83       	std	Y+3, r25	; 0x03
    4834:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4836:	ea 81       	ldd	r30, Y+2	; 0x02
    4838:	fb 81       	ldd	r31, Y+3	; 0x03
    483a:	82 8d       	ldd	r24, Z+26	; 0x1a
    483c:	19 82       	std	Y+1, r1	; 0x01
    483e:	88 23       	and	r24, r24
    4840:	11 f4       	brne	.+4      	; 0x4846 <xQueueIsQueueEmptyFromISR+0x20>
    4842:	81 e0       	ldi	r24, 0x01	; 1
    4844:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    4846:	89 81       	ldd	r24, Y+1	; 0x01
}
    4848:	0f 90       	pop	r0
    484a:	0f 90       	pop	r0
    484c:	0f 90       	pop	r0
    484e:	cf 91       	pop	r28
    4850:	df 91       	pop	r29
    4852:	08 95       	ret

00004854 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4854:	df 93       	push	r29
    4856:	cf 93       	push	r28
    4858:	00 d0       	rcall	.+0      	; 0x485a <prvIsQueueFull+0x6>
    485a:	0f 92       	push	r0
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
    4860:	9b 83       	std	Y+3, r25	; 0x03
    4862:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4864:	0f b6       	in	r0, 0x3f	; 63
    4866:	f8 94       	cli
    4868:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    486a:	ea 81       	ldd	r30, Y+2	; 0x02
    486c:	fb 81       	ldd	r31, Y+3	; 0x03
    486e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4870:	ea 81       	ldd	r30, Y+2	; 0x02
    4872:	fb 81       	ldd	r31, Y+3	; 0x03
    4874:	83 8d       	ldd	r24, Z+27	; 0x1b
    4876:	19 82       	std	Y+1, r1	; 0x01
    4878:	98 17       	cp	r25, r24
    487a:	11 f4       	brne	.+4      	; 0x4880 <prvIsQueueFull+0x2c>
    487c:	81 e0       	ldi	r24, 0x01	; 1
    487e:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    4880:	0f 90       	pop	r0
    4882:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4884:	89 81       	ldd	r24, Y+1	; 0x01
}
    4886:	0f 90       	pop	r0
    4888:	0f 90       	pop	r0
    488a:	0f 90       	pop	r0
    488c:	cf 91       	pop	r28
    488e:	df 91       	pop	r29
    4890:	08 95       	ret

00004892 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4892:	df 93       	push	r29
    4894:	cf 93       	push	r28
    4896:	00 d0       	rcall	.+0      	; 0x4898 <xQueueIsQueueFullFromISR+0x6>
    4898:	0f 92       	push	r0
    489a:	cd b7       	in	r28, 0x3d	; 61
    489c:	de b7       	in	r29, 0x3e	; 62
    489e:	9b 83       	std	Y+3, r25	; 0x03
    48a0:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    48a2:	ea 81       	ldd	r30, Y+2	; 0x02
    48a4:	fb 81       	ldd	r31, Y+3	; 0x03
    48a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    48a8:	ea 81       	ldd	r30, Y+2	; 0x02
    48aa:	fb 81       	ldd	r31, Y+3	; 0x03
    48ac:	83 8d       	ldd	r24, Z+27	; 0x1b
    48ae:	19 82       	std	Y+1, r1	; 0x01
    48b0:	98 17       	cp	r25, r24
    48b2:	11 f4       	brne	.+4      	; 0x48b8 <xQueueIsQueueFullFromISR+0x26>
    48b4:	81 e0       	ldi	r24, 0x01	; 1
    48b6:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    48b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    48ba:	0f 90       	pop	r0
    48bc:	0f 90       	pop	r0
    48be:	0f 90       	pop	r0
    48c0:	cf 91       	pop	r28
    48c2:	df 91       	pop	r29
    48c4:	08 95       	ret

000048c6 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    48c6:	af 92       	push	r10
    48c8:	bf 92       	push	r11
    48ca:	cf 92       	push	r12
    48cc:	df 92       	push	r13
    48ce:	ef 92       	push	r14
    48d0:	ff 92       	push	r15
    48d2:	0f 93       	push	r16
    48d4:	1f 93       	push	r17
    48d6:	df 93       	push	r29
    48d8:	cf 93       	push	r28
    48da:	cd b7       	in	r28, 0x3d	; 61
    48dc:	de b7       	in	r29, 0x3e	; 62
    48de:	64 97       	sbiw	r28, 0x14	; 20
    48e0:	0f b6       	in	r0, 0x3f	; 63
    48e2:	f8 94       	cli
    48e4:	de bf       	out	0x3e, r29	; 62
    48e6:	0f be       	out	0x3f, r0	; 63
    48e8:	cd bf       	out	0x3d, r28	; 61
    48ea:	9f 83       	std	Y+7, r25	; 0x07
    48ec:	8e 83       	std	Y+6, r24	; 0x06
    48ee:	79 87       	std	Y+9, r23	; 0x09
    48f0:	68 87       	std	Y+8, r22	; 0x08
    48f2:	5b 87       	std	Y+11, r21	; 0x0b
    48f4:	4a 87       	std	Y+10, r20	; 0x0a
    48f6:	3d 87       	std	Y+13, r19	; 0x0d
    48f8:	2c 87       	std	Y+12, r18	; 0x0c
    48fa:	0e 87       	std	Y+14, r16	; 0x0e
    48fc:	f8 8a       	std	Y+16, r15	; 0x10
    48fe:	ef 86       	std	Y+15, r14	; 0x0f
    4900:	da 8a       	std	Y+18, r13	; 0x12
    4902:	c9 8a       	std	Y+17, r12	; 0x11
    4904:	bc 8a       	std	Y+20, r11	; 0x14
    4906:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4908:	8a 85       	ldd	r24, Y+10	; 0x0a
    490a:	9b 85       	ldd	r25, Y+11	; 0x0b
    490c:	29 89       	ldd	r18, Y+17	; 0x11
    490e:	3a 89       	ldd	r19, Y+18	; 0x12
    4910:	b9 01       	movw	r22, r18
    4912:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <prvAllocateTCBAndStack>
    4916:	9c 83       	std	Y+4, r25	; 0x04
    4918:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    491a:	8b 81       	ldd	r24, Y+3	; 0x03
    491c:	9c 81       	ldd	r25, Y+4	; 0x04
    491e:	00 97       	sbiw	r24, 0x00	; 0
    4920:	09 f4       	brne	.+2      	; 0x4924 <xTaskGenericCreate+0x5e>
    4922:	99 c0       	rjmp	.+306    	; 0x4a56 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4924:	eb 81       	ldd	r30, Y+3	; 0x03
    4926:	fc 81       	ldd	r31, Y+4	; 0x04
    4928:	27 89       	ldd	r18, Z+23	; 0x17
    492a:	30 8d       	ldd	r19, Z+24	; 0x18
    492c:	8a 85       	ldd	r24, Y+10	; 0x0a
    492e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	82 0f       	add	r24, r18
    4934:	93 1f       	adc	r25, r19
    4936:	9a 83       	std	Y+2, r25	; 0x02
    4938:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    493a:	8b 81       	ldd	r24, Y+3	; 0x03
    493c:	9c 81       	ldd	r25, Y+4	; 0x04
    493e:	28 85       	ldd	r18, Y+8	; 0x08
    4940:	39 85       	ldd	r19, Y+9	; 0x09
    4942:	eb 89       	ldd	r30, Y+19	; 0x13
    4944:	fc 89       	ldd	r31, Y+20	; 0x14
    4946:	aa 85       	ldd	r26, Y+10	; 0x0a
    4948:	bb 85       	ldd	r27, Y+11	; 0x0b
    494a:	b9 01       	movw	r22, r18
    494c:	4e 85       	ldd	r20, Y+14	; 0x0e
    494e:	9f 01       	movw	r18, r30
    4950:	8d 01       	movw	r16, r26
    4952:	0e 94 cd 29 	call	0x539a	; 0x539a <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4956:	89 81       	ldd	r24, Y+1	; 0x01
    4958:	9a 81       	ldd	r25, Y+2	; 0x02
    495a:	2e 81       	ldd	r18, Y+6	; 0x06
    495c:	3f 81       	ldd	r19, Y+7	; 0x07
    495e:	4c 85       	ldd	r20, Y+12	; 0x0c
    4960:	5d 85       	ldd	r21, Y+13	; 0x0d
    4962:	b9 01       	movw	r22, r18
    4964:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <pxPortInitialiseStack>
    4968:	eb 81       	ldd	r30, Y+3	; 0x03
    496a:	fc 81       	ldd	r31, Y+4	; 0x04
    496c:	91 83       	std	Z+1, r25	; 0x01
    496e:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4970:	8f 85       	ldd	r24, Y+15	; 0x0f
    4972:	98 89       	ldd	r25, Y+16	; 0x10
    4974:	00 97       	sbiw	r24, 0x00	; 0
    4976:	31 f0       	breq	.+12     	; 0x4984 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4978:	ef 85       	ldd	r30, Y+15	; 0x0f
    497a:	f8 89       	ldd	r31, Y+16	; 0x10
    497c:	8b 81       	ldd	r24, Y+3	; 0x03
    497e:	9c 81       	ldd	r25, Y+4	; 0x04
    4980:	91 83       	std	Z+1, r25	; 0x01
    4982:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4984:	0f b6       	in	r0, 0x3f	; 63
    4986:	f8 94       	cli
    4988:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    498a:	80 91 b6 04 	lds	r24, 0x04B6
    498e:	8f 5f       	subi	r24, 0xFF	; 255
    4990:	80 93 b6 04 	sts	0x04B6, r24
			if( pxCurrentTCB == NULL )
    4994:	80 91 b3 04 	lds	r24, 0x04B3
    4998:	90 91 b4 04 	lds	r25, 0x04B4
    499c:	00 97       	sbiw	r24, 0x00	; 0
    499e:	69 f4       	brne	.+26     	; 0x49ba <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    49a0:	8b 81       	ldd	r24, Y+3	; 0x03
    49a2:	9c 81       	ldd	r25, Y+4	; 0x04
    49a4:	90 93 b4 04 	sts	0x04B4, r25
    49a8:	80 93 b3 04 	sts	0x04B3, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    49ac:	80 91 b6 04 	lds	r24, 0x04B6
    49b0:	81 30       	cpi	r24, 0x01	; 1
    49b2:	a9 f4       	brne	.+42     	; 0x49de <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    49b4:	0e 94 24 2a 	call	0x5448	; 0x5448 <prvInitialiseTaskLists>
    49b8:	12 c0       	rjmp	.+36     	; 0x49de <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    49ba:	80 91 bb 04 	lds	r24, 0x04BB
    49be:	88 23       	and	r24, r24
    49c0:	71 f4       	brne	.+28     	; 0x49de <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    49c2:	e0 91 b3 04 	lds	r30, 0x04B3
    49c6:	f0 91 b4 04 	lds	r31, 0x04B4
    49ca:	96 89       	ldd	r25, Z+22	; 0x16
    49cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    49ce:	89 17       	cp	r24, r25
    49d0:	30 f0       	brcs	.+12     	; 0x49de <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    49d2:	8b 81       	ldd	r24, Y+3	; 0x03
    49d4:	9c 81       	ldd	r25, Y+4	; 0x04
    49d6:	90 93 b4 04 	sts	0x04B4, r25
    49da:	80 93 b3 04 	sts	0x04B3, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    49de:	eb 81       	ldd	r30, Y+3	; 0x03
    49e0:	fc 81       	ldd	r31, Y+4	; 0x04
    49e2:	96 89       	ldd	r25, Z+22	; 0x16
    49e4:	80 91 b9 04 	lds	r24, 0x04B9
    49e8:	89 17       	cp	r24, r25
    49ea:	28 f4       	brcc	.+10     	; 0x49f6 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    49ec:	eb 81       	ldd	r30, Y+3	; 0x03
    49ee:	fc 81       	ldd	r31, Y+4	; 0x04
    49f0:	86 89       	ldd	r24, Z+22	; 0x16
    49f2:	80 93 b9 04 	sts	0x04B9, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    49f6:	80 91 c0 04 	lds	r24, 0x04C0
    49fa:	8f 5f       	subi	r24, 0xFF	; 255
    49fc:	80 93 c0 04 	sts	0x04C0, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    4a00:	eb 81       	ldd	r30, Y+3	; 0x03
    4a02:	fc 81       	ldd	r31, Y+4	; 0x04
    4a04:	96 89       	ldd	r25, Z+22	; 0x16
    4a06:	80 91 ba 04 	lds	r24, 0x04BA
    4a0a:	89 17       	cp	r24, r25
    4a0c:	28 f4       	brcc	.+10     	; 0x4a18 <xTaskGenericCreate+0x152>
    4a0e:	eb 81       	ldd	r30, Y+3	; 0x03
    4a10:	fc 81       	ldd	r31, Y+4	; 0x04
    4a12:	86 89       	ldd	r24, Z+22	; 0x16
    4a14:	80 93 ba 04 	sts	0x04BA, r24
    4a18:	eb 81       	ldd	r30, Y+3	; 0x03
    4a1a:	fc 81       	ldd	r31, Y+4	; 0x04
    4a1c:	86 89       	ldd	r24, Z+22	; 0x16
    4a1e:	28 2f       	mov	r18, r24
    4a20:	30 e0       	ldi	r19, 0x00	; 0
    4a22:	c9 01       	movw	r24, r18
    4a24:	88 0f       	add	r24, r24
    4a26:	99 1f       	adc	r25, r25
    4a28:	88 0f       	add	r24, r24
    4a2a:	99 1f       	adc	r25, r25
    4a2c:	88 0f       	add	r24, r24
    4a2e:	99 1f       	adc	r25, r25
    4a30:	82 0f       	add	r24, r18
    4a32:	93 1f       	adc	r25, r19
    4a34:	ac 01       	movw	r20, r24
    4a36:	4f 53       	subi	r20, 0x3F	; 63
    4a38:	5b 4f       	sbci	r21, 0xFB	; 251
    4a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a3e:	9c 01       	movw	r18, r24
    4a40:	2e 5f       	subi	r18, 0xFE	; 254
    4a42:	3f 4f       	sbci	r19, 0xFF	; 255
    4a44:	ca 01       	movw	r24, r20
    4a46:	b9 01       	movw	r22, r18
    4a48:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <vListInsertEnd>

			xReturn = pdPASS;
    4a4c:	81 e0       	ldi	r24, 0x01	; 1
    4a4e:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    4a50:	0f 90       	pop	r0
    4a52:	0f be       	out	0x3f, r0	; 63
    4a54:	02 c0       	rjmp	.+4      	; 0x4a5a <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4a56:	8f ef       	ldi	r24, 0xFF	; 255
    4a58:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a5c:	81 30       	cpi	r24, 0x01	; 1
    4a5e:	71 f4       	brne	.+28     	; 0x4a7c <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    4a60:	80 91 bb 04 	lds	r24, 0x04BB
    4a64:	88 23       	and	r24, r24
    4a66:	51 f0       	breq	.+20     	; 0x4a7c <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4a68:	e0 91 b3 04 	lds	r30, 0x04B3
    4a6c:	f0 91 b4 04 	lds	r31, 0x04B4
    4a70:	96 89       	ldd	r25, Z+22	; 0x16
    4a72:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a74:	98 17       	cp	r25, r24
    4a76:	10 f4       	brcc	.+4      	; 0x4a7c <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    4a78:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <vPortYield>
			}
		}
	}

	return xReturn;
    4a7c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4a7e:	64 96       	adiw	r28, 0x14	; 20
    4a80:	0f b6       	in	r0, 0x3f	; 63
    4a82:	f8 94       	cli
    4a84:	de bf       	out	0x3e, r29	; 62
    4a86:	0f be       	out	0x3f, r0	; 63
    4a88:	cd bf       	out	0x3d, r28	; 61
    4a8a:	cf 91       	pop	r28
    4a8c:	df 91       	pop	r29
    4a8e:	1f 91       	pop	r17
    4a90:	0f 91       	pop	r16
    4a92:	ff 90       	pop	r15
    4a94:	ef 90       	pop	r14
    4a96:	df 90       	pop	r13
    4a98:	cf 90       	pop	r12
    4a9a:	bf 90       	pop	r11
    4a9c:	af 90       	pop	r10
    4a9e:	08 95       	ret

00004aa0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4aa0:	df 93       	push	r29
    4aa2:	cf 93       	push	r28
    4aa4:	00 d0       	rcall	.+0      	; 0x4aa6 <vTaskDelete+0x6>
    4aa6:	00 d0       	rcall	.+0      	; 0x4aa8 <vTaskDelete+0x8>
    4aa8:	00 d0       	rcall	.+0      	; 0x4aaa <vTaskDelete+0xa>
    4aaa:	cd b7       	in	r28, 0x3d	; 61
    4aac:	de b7       	in	r29, 0x3e	; 62
    4aae:	9c 83       	std	Y+4, r25	; 0x04
    4ab0:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4ab2:	0f b6       	in	r0, 0x3f	; 63
    4ab4:	f8 94       	cli
    4ab6:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4ab8:	20 91 b3 04 	lds	r18, 0x04B3
    4abc:	30 91 b4 04 	lds	r19, 0x04B4
    4ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ac4:	82 17       	cp	r24, r18
    4ac6:	93 07       	cpc	r25, r19
    4ac8:	11 f4       	brne	.+4      	; 0x4ace <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    4aca:	1c 82       	std	Y+4, r1	; 0x04
    4acc:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4ace:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ad2:	00 97       	sbiw	r24, 0x00	; 0
    4ad4:	39 f4       	brne	.+14     	; 0x4ae4 <vTaskDelete+0x44>
    4ad6:	80 91 b3 04 	lds	r24, 0x04B3
    4ada:	90 91 b4 04 	lds	r25, 0x04B4
    4ade:	9e 83       	std	Y+6, r25	; 0x06
    4ae0:	8d 83       	std	Y+5, r24	; 0x05
    4ae2:	04 c0       	rjmp	.+8      	; 0x4aec <vTaskDelete+0x4c>
    4ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ae8:	9e 83       	std	Y+6, r25	; 0x06
    4aea:	8d 83       	std	Y+5, r24	; 0x05
    4aec:	8d 81       	ldd	r24, Y+5	; 0x05
    4aee:	9e 81       	ldd	r25, Y+6	; 0x06
    4af0:	9a 83       	std	Y+2, r25	; 0x02
    4af2:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4af4:	89 81       	ldd	r24, Y+1	; 0x01
    4af6:	9a 81       	ldd	r25, Y+2	; 0x02
    4af8:	02 96       	adiw	r24, 0x02	; 2
    4afa:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4afe:	e9 81       	ldd	r30, Y+1	; 0x01
    4b00:	fa 81       	ldd	r31, Y+2	; 0x02
    4b02:	84 89       	ldd	r24, Z+20	; 0x14
    4b04:	95 89       	ldd	r25, Z+21	; 0x15
    4b06:	00 97       	sbiw	r24, 0x00	; 0
    4b08:	29 f0       	breq	.+10     	; 0x4b14 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4b0a:	89 81       	ldd	r24, Y+1	; 0x01
    4b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b0e:	0c 96       	adiw	r24, 0x0c	; 12
    4b10:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4b14:	89 81       	ldd	r24, Y+1	; 0x01
    4b16:	9a 81       	ldd	r25, Y+2	; 0x02
    4b18:	9c 01       	movw	r18, r24
    4b1a:	2e 5f       	subi	r18, 0xFE	; 254
    4b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b1e:	8d e0       	ldi	r24, 0x0D	; 13
    4b20:	95 e0       	ldi	r25, 0x05	; 5
    4b22:	b9 01       	movw	r22, r18
    4b24:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4b28:	80 91 b5 04 	lds	r24, 0x04B5
    4b2c:	8f 5f       	subi	r24, 0xFF	; 255
    4b2e:	80 93 b5 04 	sts	0x04B5, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4b32:	80 91 c0 04 	lds	r24, 0x04C0
    4b36:	8f 5f       	subi	r24, 0xFF	; 255
    4b38:	80 93 c0 04 	sts	0x04C0, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4b3c:	0f 90       	pop	r0
    4b3e:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4b40:	80 91 bb 04 	lds	r24, 0x04BB
    4b44:	88 23       	and	r24, r24
    4b46:	31 f0       	breq	.+12     	; 0x4b54 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4b48:	8b 81       	ldd	r24, Y+3	; 0x03
    4b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b4c:	00 97       	sbiw	r24, 0x00	; 0
    4b4e:	11 f4       	brne	.+4      	; 0x4b54 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    4b50:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <vPortYield>
			}
		}
	}
    4b54:	26 96       	adiw	r28, 0x06	; 6
    4b56:	0f b6       	in	r0, 0x3f	; 63
    4b58:	f8 94       	cli
    4b5a:	de bf       	out	0x3e, r29	; 62
    4b5c:	0f be       	out	0x3f, r0	; 63
    4b5e:	cd bf       	out	0x3d, r28	; 61
    4b60:	cf 91       	pop	r28
    4b62:	df 91       	pop	r29
    4b64:	08 95       	ret

00004b66 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4b66:	df 93       	push	r29
    4b68:	cf 93       	push	r28
    4b6a:	cd b7       	in	r28, 0x3d	; 61
    4b6c:	de b7       	in	r29, 0x3e	; 62
    4b6e:	28 97       	sbiw	r28, 0x08	; 8
    4b70:	0f b6       	in	r0, 0x3f	; 63
    4b72:	f8 94       	cli
    4b74:	de bf       	out	0x3e, r29	; 62
    4b76:	0f be       	out	0x3f, r0	; 63
    4b78:	cd bf       	out	0x3d, r28	; 61
    4b7a:	9e 83       	std	Y+6, r25	; 0x06
    4b7c:	8d 83       	std	Y+5, r24	; 0x05
    4b7e:	78 87       	std	Y+8, r23	; 0x08
    4b80:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4b82:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4b84:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4b88:	ed 81       	ldd	r30, Y+5	; 0x05
    4b8a:	fe 81       	ldd	r31, Y+6	; 0x06
    4b8c:	20 81       	ld	r18, Z
    4b8e:	31 81       	ldd	r19, Z+1	; 0x01
    4b90:	8f 81       	ldd	r24, Y+7	; 0x07
    4b92:	98 85       	ldd	r25, Y+8	; 0x08
    4b94:	82 0f       	add	r24, r18
    4b96:	93 1f       	adc	r25, r19
    4b98:	9c 83       	std	Y+4, r25	; 0x04
    4b9a:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    4b9c:	ed 81       	ldd	r30, Y+5	; 0x05
    4b9e:	fe 81       	ldd	r31, Y+6	; 0x06
    4ba0:	20 81       	ld	r18, Z
    4ba2:	31 81       	ldd	r19, Z+1	; 0x01
    4ba4:	80 91 b7 04 	lds	r24, 0x04B7
    4ba8:	90 91 b8 04 	lds	r25, 0x04B8
    4bac:	82 17       	cp	r24, r18
    4bae:	93 07       	cpc	r25, r19
    4bb0:	a8 f4       	brcc	.+42     	; 0x4bdc <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4bb2:	ed 81       	ldd	r30, Y+5	; 0x05
    4bb4:	fe 81       	ldd	r31, Y+6	; 0x06
    4bb6:	20 81       	ld	r18, Z
    4bb8:	31 81       	ldd	r19, Z+1	; 0x01
    4bba:	8b 81       	ldd	r24, Y+3	; 0x03
    4bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    4bbe:	82 17       	cp	r24, r18
    4bc0:	93 07       	cpc	r25, r19
    4bc2:	00 f5       	brcc	.+64     	; 0x4c04 <vTaskDelayUntil+0x9e>
    4bc4:	20 91 b7 04 	lds	r18, 0x04B7
    4bc8:	30 91 b8 04 	lds	r19, 0x04B8
    4bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bce:	9c 81       	ldd	r25, Y+4	; 0x04
    4bd0:	28 17       	cp	r18, r24
    4bd2:	39 07       	cpc	r19, r25
    4bd4:	b8 f4       	brcc	.+46     	; 0x4c04 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    4bd6:	81 e0       	ldi	r24, 0x01	; 1
    4bd8:	89 83       	std	Y+1, r24	; 0x01
    4bda:	14 c0       	rjmp	.+40     	; 0x4c04 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4bdc:	ed 81       	ldd	r30, Y+5	; 0x05
    4bde:	fe 81       	ldd	r31, Y+6	; 0x06
    4be0:	20 81       	ld	r18, Z
    4be2:	31 81       	ldd	r19, Z+1	; 0x01
    4be4:	8b 81       	ldd	r24, Y+3	; 0x03
    4be6:	9c 81       	ldd	r25, Y+4	; 0x04
    4be8:	82 17       	cp	r24, r18
    4bea:	93 07       	cpc	r25, r19
    4bec:	48 f0       	brcs	.+18     	; 0x4c00 <vTaskDelayUntil+0x9a>
    4bee:	20 91 b7 04 	lds	r18, 0x04B7
    4bf2:	30 91 b8 04 	lds	r19, 0x04B8
    4bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    4bfa:	28 17       	cp	r18, r24
    4bfc:	39 07       	cpc	r19, r25
    4bfe:	10 f4       	brcc	.+4      	; 0x4c04 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4c04:	ed 81       	ldd	r30, Y+5	; 0x05
    4c06:	fe 81       	ldd	r31, Y+6	; 0x06
    4c08:	8b 81       	ldd	r24, Y+3	; 0x03
    4c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c0c:	91 83       	std	Z+1, r25	; 0x01
    4c0e:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    4c10:	89 81       	ldd	r24, Y+1	; 0x01
    4c12:	88 23       	and	r24, r24
    4c14:	59 f0       	breq	.+22     	; 0x4c2c <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4c16:	80 91 b3 04 	lds	r24, 0x04B3
    4c1a:	90 91 b4 04 	lds	r25, 0x04B4
    4c1e:	02 96       	adiw	r24, 0x02	; 2
    4c20:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4c24:	8b 81       	ldd	r24, Y+3	; 0x03
    4c26:	9c 81       	ldd	r25, Y+4	; 0x04
    4c28:	0e 94 9f 2a 	call	0x553e	; 0x553e <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4c2c:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <xTaskResumeAll>
    4c30:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4c32:	8a 81       	ldd	r24, Y+2	; 0x02
    4c34:	88 23       	and	r24, r24
    4c36:	11 f4       	brne	.+4      	; 0x4c3c <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    4c38:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <vPortYield>
		}
	}
    4c3c:	28 96       	adiw	r28, 0x08	; 8
    4c3e:	0f b6       	in	r0, 0x3f	; 63
    4c40:	f8 94       	cli
    4c42:	de bf       	out	0x3e, r29	; 62
    4c44:	0f be       	out	0x3f, r0	; 63
    4c46:	cd bf       	out	0x3d, r28	; 61
    4c48:	cf 91       	pop	r28
    4c4a:	df 91       	pop	r29
    4c4c:	08 95       	ret

00004c4e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4c4e:	df 93       	push	r29
    4c50:	cf 93       	push	r28
    4c52:	00 d0       	rcall	.+0      	; 0x4c54 <vTaskDelay+0x6>
    4c54:	00 d0       	rcall	.+0      	; 0x4c56 <vTaskDelay+0x8>
    4c56:	0f 92       	push	r0
    4c58:	cd b7       	in	r28, 0x3d	; 61
    4c5a:	de b7       	in	r29, 0x3e	; 62
    4c5c:	9d 83       	std	Y+5, r25	; 0x05
    4c5e:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4c60:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4c62:	8c 81       	ldd	r24, Y+4	; 0x04
    4c64:	9d 81       	ldd	r25, Y+5	; 0x05
    4c66:	00 97       	sbiw	r24, 0x00	; 0
    4c68:	d1 f0       	breq	.+52     	; 0x4c9e <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    4c6a:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4c6e:	20 91 b7 04 	lds	r18, 0x04B7
    4c72:	30 91 b8 04 	lds	r19, 0x04B8
    4c76:	8c 81       	ldd	r24, Y+4	; 0x04
    4c78:	9d 81       	ldd	r25, Y+5	; 0x05
    4c7a:	82 0f       	add	r24, r18
    4c7c:	93 1f       	adc	r25, r19
    4c7e:	9b 83       	std	Y+3, r25	; 0x03
    4c80:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4c82:	80 91 b3 04 	lds	r24, 0x04B3
    4c86:	90 91 b4 04 	lds	r25, 0x04B4
    4c8a:	02 96       	adiw	r24, 0x02	; 2
    4c8c:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4c90:	8a 81       	ldd	r24, Y+2	; 0x02
    4c92:	9b 81       	ldd	r25, Y+3	; 0x03
    4c94:	0e 94 9f 2a 	call	0x553e	; 0x553e <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4c98:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <xTaskResumeAll>
    4c9c:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4c9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ca0:	88 23       	and	r24, r24
    4ca2:	11 f4       	brne	.+4      	; 0x4ca8 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    4ca4:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <vPortYield>
		}
	}
    4ca8:	0f 90       	pop	r0
    4caa:	0f 90       	pop	r0
    4cac:	0f 90       	pop	r0
    4cae:	0f 90       	pop	r0
    4cb0:	0f 90       	pop	r0
    4cb2:	cf 91       	pop	r28
    4cb4:	df 91       	pop	r29
    4cb6:	08 95       	ret

00004cb8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4cb8:	af 92       	push	r10
    4cba:	bf 92       	push	r11
    4cbc:	cf 92       	push	r12
    4cbe:	df 92       	push	r13
    4cc0:	ef 92       	push	r14
    4cc2:	ff 92       	push	r15
    4cc4:	0f 93       	push	r16
    4cc6:	df 93       	push	r29
    4cc8:	cf 93       	push	r28
    4cca:	0f 92       	push	r0
    4ccc:	cd b7       	in	r28, 0x3d	; 61
    4cce:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4cd0:	20 e6       	ldi	r18, 0x60	; 96
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	83 ec       	ldi	r24, 0xC3	; 195
    4cd6:	99 e2       	ldi	r25, 0x29	; 41
    4cd8:	b9 01       	movw	r22, r18
    4cda:	45 e5       	ldi	r20, 0x55	; 85
    4cdc:	50 e0       	ldi	r21, 0x00	; 0
    4cde:	20 e0       	ldi	r18, 0x00	; 0
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	00 e0       	ldi	r16, 0x00	; 0
    4ce4:	ee 24       	eor	r14, r14
    4ce6:	ff 24       	eor	r15, r15
    4ce8:	cc 24       	eor	r12, r12
    4cea:	dd 24       	eor	r13, r13
    4cec:	aa 24       	eor	r10, r10
    4cee:	bb 24       	eor	r11, r11
    4cf0:	0e 94 63 24 	call	0x48c6	; 0x48c6 <xTaskGenericCreate>
    4cf4:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    4cf6:	89 81       	ldd	r24, Y+1	; 0x01
    4cf8:	81 30       	cpi	r24, 0x01	; 1
    4cfa:	51 f4       	brne	.+20     	; 0x4d10 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    4cfc:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	80 93 bb 04 	sts	0x04BB, r24
		xTickCount = ( portTickType ) 0U;
    4d04:	10 92 b8 04 	sts	0x04B8, r1
    4d08:	10 92 b7 04 	sts	0x04B7, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4d0c:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4d10:	0f 90       	pop	r0
    4d12:	cf 91       	pop	r28
    4d14:	df 91       	pop	r29
    4d16:	0f 91       	pop	r16
    4d18:	ff 90       	pop	r15
    4d1a:	ef 90       	pop	r14
    4d1c:	df 90       	pop	r13
    4d1e:	cf 90       	pop	r12
    4d20:	bf 90       	pop	r11
    4d22:	af 90       	pop	r10
    4d24:	08 95       	ret

00004d26 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4d26:	df 93       	push	r29
    4d28:	cf 93       	push	r28
    4d2a:	cd b7       	in	r28, 0x3d	; 61
    4d2c:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4d2e:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    4d30:	10 92 bb 04 	sts	0x04BB, r1
	vPortEndScheduler();
    4d34:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <vPortEndScheduler>
}
    4d38:	cf 91       	pop	r28
    4d3a:	df 91       	pop	r29
    4d3c:	08 95       	ret

00004d3e <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4d3e:	df 93       	push	r29
    4d40:	cf 93       	push	r28
    4d42:	cd b7       	in	r28, 0x3d	; 61
    4d44:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4d46:	80 91 bc 04 	lds	r24, 0x04BC
    4d4a:	8f 5f       	subi	r24, 0xFF	; 255
    4d4c:	80 93 bc 04 	sts	0x04BC, r24
}
    4d50:	cf 91       	pop	r28
    4d52:	df 91       	pop	r29
    4d54:	08 95       	ret

00004d56 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4d56:	df 93       	push	r29
    4d58:	cf 93       	push	r28
    4d5a:	00 d0       	rcall	.+0      	; 0x4d5c <xTaskResumeAll+0x6>
    4d5c:	00 d0       	rcall	.+0      	; 0x4d5e <xTaskResumeAll+0x8>
    4d5e:	cd b7       	in	r28, 0x3d	; 61
    4d60:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4d62:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4d64:	0f b6       	in	r0, 0x3f	; 63
    4d66:	f8 94       	cli
    4d68:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    4d6a:	80 91 bc 04 	lds	r24, 0x04BC
    4d6e:	81 50       	subi	r24, 0x01	; 1
    4d70:	80 93 bc 04 	sts	0x04BC, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4d74:	80 91 bc 04 	lds	r24, 0x04BC
    4d78:	88 23       	and	r24, r24
    4d7a:	09 f0       	breq	.+2      	; 0x4d7e <xTaskResumeAll+0x28>
    4d7c:	6c c0       	rjmp	.+216    	; 0x4e56 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4d7e:	80 91 b6 04 	lds	r24, 0x04B6
    4d82:	88 23       	and	r24, r24
    4d84:	09 f4       	brne	.+2      	; 0x4d88 <xTaskResumeAll+0x32>
    4d86:	67 c0       	rjmp	.+206    	; 0x4e56 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4d88:	19 82       	std	Y+1, r1	; 0x01
    4d8a:	41 c0       	rjmp	.+130    	; 0x4e0e <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4d8c:	e0 91 09 05 	lds	r30, 0x0509
    4d90:	f0 91 0a 05 	lds	r31, 0x050A
    4d94:	86 81       	ldd	r24, Z+6	; 0x06
    4d96:	97 81       	ldd	r25, Z+7	; 0x07
    4d98:	9c 83       	std	Y+4, r25	; 0x04
    4d9a:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    4d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    4da0:	0c 96       	adiw	r24, 0x0c	; 12
    4da2:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4da6:	8b 81       	ldd	r24, Y+3	; 0x03
    4da8:	9c 81       	ldd	r25, Y+4	; 0x04
    4daa:	02 96       	adiw	r24, 0x02	; 2
    4dac:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4db0:	eb 81       	ldd	r30, Y+3	; 0x03
    4db2:	fc 81       	ldd	r31, Y+4	; 0x04
    4db4:	96 89       	ldd	r25, Z+22	; 0x16
    4db6:	80 91 ba 04 	lds	r24, 0x04BA
    4dba:	89 17       	cp	r24, r25
    4dbc:	28 f4       	brcc	.+10     	; 0x4dc8 <xTaskResumeAll+0x72>
    4dbe:	eb 81       	ldd	r30, Y+3	; 0x03
    4dc0:	fc 81       	ldd	r31, Y+4	; 0x04
    4dc2:	86 89       	ldd	r24, Z+22	; 0x16
    4dc4:	80 93 ba 04 	sts	0x04BA, r24
    4dc8:	eb 81       	ldd	r30, Y+3	; 0x03
    4dca:	fc 81       	ldd	r31, Y+4	; 0x04
    4dcc:	86 89       	ldd	r24, Z+22	; 0x16
    4dce:	28 2f       	mov	r18, r24
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	c9 01       	movw	r24, r18
    4dd4:	88 0f       	add	r24, r24
    4dd6:	99 1f       	adc	r25, r25
    4dd8:	88 0f       	add	r24, r24
    4dda:	99 1f       	adc	r25, r25
    4ddc:	88 0f       	add	r24, r24
    4dde:	99 1f       	adc	r25, r25
    4de0:	82 0f       	add	r24, r18
    4de2:	93 1f       	adc	r25, r19
    4de4:	8f 53       	subi	r24, 0x3F	; 63
    4de6:	9b 4f       	sbci	r25, 0xFB	; 251
    4de8:	2b 81       	ldd	r18, Y+3	; 0x03
    4dea:	3c 81       	ldd	r19, Y+4	; 0x04
    4dec:	2e 5f       	subi	r18, 0xFE	; 254
    4dee:	3f 4f       	sbci	r19, 0xFF	; 255
    4df0:	b9 01       	movw	r22, r18
    4df2:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4df6:	eb 81       	ldd	r30, Y+3	; 0x03
    4df8:	fc 81       	ldd	r31, Y+4	; 0x04
    4dfa:	96 89       	ldd	r25, Z+22	; 0x16
    4dfc:	e0 91 b3 04 	lds	r30, 0x04B3
    4e00:	f0 91 b4 04 	lds	r31, 0x04B4
    4e04:	86 89       	ldd	r24, Z+22	; 0x16
    4e06:	98 17       	cp	r25, r24
    4e08:	10 f0       	brcs	.+4      	; 0x4e0e <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    4e0a:	81 e0       	ldi	r24, 0x01	; 1
    4e0c:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4e0e:	80 91 04 05 	lds	r24, 0x0504
    4e12:	88 23       	and	r24, r24
    4e14:	09 f0       	breq	.+2      	; 0x4e18 <xTaskResumeAll+0xc2>
    4e16:	ba cf       	rjmp	.-140    	; 0x4d8c <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4e18:	80 91 bd 04 	lds	r24, 0x04BD
    4e1c:	88 23       	and	r24, r24
    4e1e:	71 f0       	breq	.+28     	; 0x4e3c <xTaskResumeAll+0xe6>
    4e20:	07 c0       	rjmp	.+14     	; 0x4e30 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    4e22:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <vTaskIncrementTick>
						--uxMissedTicks;
    4e26:	80 91 bd 04 	lds	r24, 0x04BD
    4e2a:	81 50       	subi	r24, 0x01	; 1
    4e2c:	80 93 bd 04 	sts	0x04BD, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4e30:	80 91 bd 04 	lds	r24, 0x04BD
    4e34:	88 23       	and	r24, r24
    4e36:	a9 f7       	brne	.-22     	; 0x4e22 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    4e38:	81 e0       	ldi	r24, 0x01	; 1
    4e3a:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    4e3c:	89 81       	ldd	r24, Y+1	; 0x01
    4e3e:	81 30       	cpi	r24, 0x01	; 1
    4e40:	21 f0       	breq	.+8      	; 0x4e4a <xTaskResumeAll+0xf4>
    4e42:	80 91 be 04 	lds	r24, 0x04BE
    4e46:	81 30       	cpi	r24, 0x01	; 1
    4e48:	31 f4       	brne	.+12     	; 0x4e56 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    4e4a:	81 e0       	ldi	r24, 0x01	; 1
    4e4c:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    4e4e:	10 92 be 04 	sts	0x04BE, r1
					portYIELD_WITHIN_API();
    4e52:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    4e56:	0f 90       	pop	r0
    4e58:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    4e5a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4e5c:	0f 90       	pop	r0
    4e5e:	0f 90       	pop	r0
    4e60:	0f 90       	pop	r0
    4e62:	0f 90       	pop	r0
    4e64:	cf 91       	pop	r28
    4e66:	df 91       	pop	r29
    4e68:	08 95       	ret

00004e6a <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4e6a:	df 93       	push	r29
    4e6c:	cf 93       	push	r28
    4e6e:	00 d0       	rcall	.+0      	; 0x4e70 <xTaskGetTickCount+0x6>
    4e70:	cd b7       	in	r28, 0x3d	; 61
    4e72:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4e74:	0f b6       	in	r0, 0x3f	; 63
    4e76:	f8 94       	cli
    4e78:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    4e7a:	80 91 b7 04 	lds	r24, 0x04B7
    4e7e:	90 91 b8 04 	lds	r25, 0x04B8
    4e82:	9a 83       	std	Y+2, r25	; 0x02
    4e84:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    4e86:	0f 90       	pop	r0
    4e88:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    4e8a:	89 81       	ldd	r24, Y+1	; 0x01
    4e8c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4e8e:	0f 90       	pop	r0
    4e90:	0f 90       	pop	r0
    4e92:	cf 91       	pop	r28
    4e94:	df 91       	pop	r29
    4e96:	08 95       	ret

00004e98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4e98:	df 93       	push	r29
    4e9a:	cf 93       	push	r28
    4e9c:	00 d0       	rcall	.+0      	; 0x4e9e <xTaskGetTickCountFromISR+0x6>
    4e9e:	0f 92       	push	r0
    4ea0:	cd b7       	in	r28, 0x3d	; 61
    4ea2:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4ea4:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    4ea6:	80 91 b7 04 	lds	r24, 0x04B7
    4eaa:	90 91 b8 04 	lds	r25, 0x04B8
    4eae:	9b 83       	std	Y+3, r25	; 0x03
    4eb0:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb4:	9b 81       	ldd	r25, Y+3	; 0x03
}
    4eb6:	0f 90       	pop	r0
    4eb8:	0f 90       	pop	r0
    4eba:	0f 90       	pop	r0
    4ebc:	cf 91       	pop	r28
    4ebe:	df 91       	pop	r29
    4ec0:	08 95       	ret

00004ec2 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    4ec2:	df 93       	push	r29
    4ec4:	cf 93       	push	r28
    4ec6:	cd b7       	in	r28, 0x3d	; 61
    4ec8:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4eca:	80 91 b6 04 	lds	r24, 0x04B6
}
    4ece:	cf 91       	pop	r28
    4ed0:	df 91       	pop	r29
    4ed2:	08 95       	ret

00004ed4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    4ed4:	df 93       	push	r29
    4ed6:	cf 93       	push	r28
    4ed8:	00 d0       	rcall	.+0      	; 0x4eda <vTaskIncrementTick+0x6>
    4eda:	00 d0       	rcall	.+0      	; 0x4edc <vTaskIncrementTick+0x8>
    4edc:	00 d0       	rcall	.+0      	; 0x4ede <vTaskIncrementTick+0xa>
    4ede:	cd b7       	in	r28, 0x3d	; 61
    4ee0:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4ee2:	80 91 bc 04 	lds	r24, 0x04BC
    4ee6:	88 23       	and	r24, r24
    4ee8:	09 f0       	breq	.+2      	; 0x4eec <vTaskIncrementTick+0x18>
    4eea:	bb c0       	rjmp	.+374    	; 0x5062 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    4eec:	80 91 b7 04 	lds	r24, 0x04B7
    4ef0:	90 91 b8 04 	lds	r25, 0x04B8
    4ef4:	01 96       	adiw	r24, 0x01	; 1
    4ef6:	90 93 b8 04 	sts	0x04B8, r25
    4efa:	80 93 b7 04 	sts	0x04B7, r24
		if( xTickCount == ( portTickType ) 0U )
    4efe:	80 91 b7 04 	lds	r24, 0x04B7
    4f02:	90 91 b8 04 	lds	r25, 0x04B8
    4f06:	00 97       	sbiw	r24, 0x00	; 0
    4f08:	d1 f5       	brne	.+116    	; 0x4f7e <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    4f0a:	80 91 00 05 	lds	r24, 0x0500
    4f0e:	90 91 01 05 	lds	r25, 0x0501
    4f12:	9c 83       	std	Y+4, r25	; 0x04
    4f14:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    4f16:	80 91 02 05 	lds	r24, 0x0502
    4f1a:	90 91 03 05 	lds	r25, 0x0503
    4f1e:	90 93 01 05 	sts	0x0501, r25
    4f22:	80 93 00 05 	sts	0x0500, r24
			pxOverflowDelayedTaskList = pxTemp;
    4f26:	8b 81       	ldd	r24, Y+3	; 0x03
    4f28:	9c 81       	ldd	r25, Y+4	; 0x04
    4f2a:	90 93 03 05 	sts	0x0503, r25
    4f2e:	80 93 02 05 	sts	0x0502, r24
			xNumOfOverflows++;
    4f32:	80 91 bf 04 	lds	r24, 0x04BF
    4f36:	8f 5f       	subi	r24, 0xFF	; 255
    4f38:	80 93 bf 04 	sts	0x04BF, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4f3c:	e0 91 00 05 	lds	r30, 0x0500
    4f40:	f0 91 01 05 	lds	r31, 0x0501
    4f44:	80 81       	ld	r24, Z
    4f46:	88 23       	and	r24, r24
    4f48:	39 f4       	brne	.+14     	; 0x4f58 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4f4a:	8f ef       	ldi	r24, 0xFF	; 255
    4f4c:	9f ef       	ldi	r25, 0xFF	; 255
    4f4e:	90 93 8c 00 	sts	0x008C, r25
    4f52:	80 93 8b 00 	sts	0x008B, r24
    4f56:	13 c0       	rjmp	.+38     	; 0x4f7e <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4f58:	e0 91 00 05 	lds	r30, 0x0500
    4f5c:	f0 91 01 05 	lds	r31, 0x0501
    4f60:	05 80       	ldd	r0, Z+5	; 0x05
    4f62:	f6 81       	ldd	r31, Z+6	; 0x06
    4f64:	e0 2d       	mov	r30, r0
    4f66:	86 81       	ldd	r24, Z+6	; 0x06
    4f68:	97 81       	ldd	r25, Z+7	; 0x07
    4f6a:	9e 83       	std	Y+6, r25	; 0x06
    4f6c:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4f6e:	ed 81       	ldd	r30, Y+5	; 0x05
    4f70:	fe 81       	ldd	r31, Y+6	; 0x06
    4f72:	82 81       	ldd	r24, Z+2	; 0x02
    4f74:	93 81       	ldd	r25, Z+3	; 0x03
    4f76:	90 93 8c 00 	sts	0x008C, r25
    4f7a:	80 93 8b 00 	sts	0x008B, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    4f7e:	20 91 b7 04 	lds	r18, 0x04B7
    4f82:	30 91 b8 04 	lds	r19, 0x04B8
    4f86:	80 91 8b 00 	lds	r24, 0x008B
    4f8a:	90 91 8c 00 	lds	r25, 0x008C
    4f8e:	28 17       	cp	r18, r24
    4f90:	39 07       	cpc	r19, r25
    4f92:	08 f4       	brcc	.+2      	; 0x4f96 <vTaskIncrementTick+0xc2>
    4f94:	6b c0       	rjmp	.+214    	; 0x506c <vTaskIncrementTick+0x198>
    4f96:	e0 91 00 05 	lds	r30, 0x0500
    4f9a:	f0 91 01 05 	lds	r31, 0x0501
    4f9e:	80 81       	ld	r24, Z
    4fa0:	88 23       	and	r24, r24
    4fa2:	39 f4       	brne	.+14     	; 0x4fb2 <vTaskIncrementTick+0xde>
    4fa4:	8f ef       	ldi	r24, 0xFF	; 255
    4fa6:	9f ef       	ldi	r25, 0xFF	; 255
    4fa8:	90 93 8c 00 	sts	0x008C, r25
    4fac:	80 93 8b 00 	sts	0x008B, r24
    4fb0:	5d c0       	rjmp	.+186    	; 0x506c <vTaskIncrementTick+0x198>
    4fb2:	e0 91 00 05 	lds	r30, 0x0500
    4fb6:	f0 91 01 05 	lds	r31, 0x0501
    4fba:	05 80       	ldd	r0, Z+5	; 0x05
    4fbc:	f6 81       	ldd	r31, Z+6	; 0x06
    4fbe:	e0 2d       	mov	r30, r0
    4fc0:	86 81       	ldd	r24, Z+6	; 0x06
    4fc2:	97 81       	ldd	r25, Z+7	; 0x07
    4fc4:	9e 83       	std	Y+6, r25	; 0x06
    4fc6:	8d 83       	std	Y+5, r24	; 0x05
    4fc8:	ed 81       	ldd	r30, Y+5	; 0x05
    4fca:	fe 81       	ldd	r31, Y+6	; 0x06
    4fcc:	82 81       	ldd	r24, Z+2	; 0x02
    4fce:	93 81       	ldd	r25, Z+3	; 0x03
    4fd0:	9a 83       	std	Y+2, r25	; 0x02
    4fd2:	89 83       	std	Y+1, r24	; 0x01
    4fd4:	20 91 b7 04 	lds	r18, 0x04B7
    4fd8:	30 91 b8 04 	lds	r19, 0x04B8
    4fdc:	89 81       	ldd	r24, Y+1	; 0x01
    4fde:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe0:	28 17       	cp	r18, r24
    4fe2:	39 07       	cpc	r19, r25
    4fe4:	38 f4       	brcc	.+14     	; 0x4ff4 <vTaskIncrementTick+0x120>
    4fe6:	89 81       	ldd	r24, Y+1	; 0x01
    4fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fea:	90 93 8c 00 	sts	0x008C, r25
    4fee:	80 93 8b 00 	sts	0x008B, r24
    4ff2:	3c c0       	rjmp	.+120    	; 0x506c <vTaskIncrementTick+0x198>
    4ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ff8:	02 96       	adiw	r24, 0x02	; 2
    4ffa:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
    4ffe:	ed 81       	ldd	r30, Y+5	; 0x05
    5000:	fe 81       	ldd	r31, Y+6	; 0x06
    5002:	84 89       	ldd	r24, Z+20	; 0x14
    5004:	95 89       	ldd	r25, Z+21	; 0x15
    5006:	00 97       	sbiw	r24, 0x00	; 0
    5008:	29 f0       	breq	.+10     	; 0x5014 <vTaskIncrementTick+0x140>
    500a:	8d 81       	ldd	r24, Y+5	; 0x05
    500c:	9e 81       	ldd	r25, Y+6	; 0x06
    500e:	0c 96       	adiw	r24, 0x0c	; 12
    5010:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
    5014:	ed 81       	ldd	r30, Y+5	; 0x05
    5016:	fe 81       	ldd	r31, Y+6	; 0x06
    5018:	96 89       	ldd	r25, Z+22	; 0x16
    501a:	80 91 ba 04 	lds	r24, 0x04BA
    501e:	89 17       	cp	r24, r25
    5020:	28 f4       	brcc	.+10     	; 0x502c <vTaskIncrementTick+0x158>
    5022:	ed 81       	ldd	r30, Y+5	; 0x05
    5024:	fe 81       	ldd	r31, Y+6	; 0x06
    5026:	86 89       	ldd	r24, Z+22	; 0x16
    5028:	80 93 ba 04 	sts	0x04BA, r24
    502c:	ed 81       	ldd	r30, Y+5	; 0x05
    502e:	fe 81       	ldd	r31, Y+6	; 0x06
    5030:	86 89       	ldd	r24, Z+22	; 0x16
    5032:	28 2f       	mov	r18, r24
    5034:	30 e0       	ldi	r19, 0x00	; 0
    5036:	c9 01       	movw	r24, r18
    5038:	88 0f       	add	r24, r24
    503a:	99 1f       	adc	r25, r25
    503c:	88 0f       	add	r24, r24
    503e:	99 1f       	adc	r25, r25
    5040:	88 0f       	add	r24, r24
    5042:	99 1f       	adc	r25, r25
    5044:	82 0f       	add	r24, r18
    5046:	93 1f       	adc	r25, r19
    5048:	ac 01       	movw	r20, r24
    504a:	4f 53       	subi	r20, 0x3F	; 63
    504c:	5b 4f       	sbci	r21, 0xFB	; 251
    504e:	8d 81       	ldd	r24, Y+5	; 0x05
    5050:	9e 81       	ldd	r25, Y+6	; 0x06
    5052:	9c 01       	movw	r18, r24
    5054:	2e 5f       	subi	r18, 0xFE	; 254
    5056:	3f 4f       	sbci	r19, 0xFF	; 255
    5058:	ca 01       	movw	r24, r20
    505a:	b9 01       	movw	r22, r18
    505c:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <vListInsertEnd>
    5060:	9a cf       	rjmp	.-204    	; 0x4f96 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    5062:	80 91 bd 04 	lds	r24, 0x04BD
    5066:	8f 5f       	subi	r24, 0xFF	; 255
    5068:	80 93 bd 04 	sts	0x04BD, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    506c:	26 96       	adiw	r28, 0x06	; 6
    506e:	0f b6       	in	r0, 0x3f	; 63
    5070:	f8 94       	cli
    5072:	de bf       	out	0x3e, r29	; 62
    5074:	0f be       	out	0x3f, r0	; 63
    5076:	cd bf       	out	0x3d, r28	; 61
    5078:	cf 91       	pop	r28
    507a:	df 91       	pop	r29
    507c:	08 95       	ret

0000507e <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    507e:	df 93       	push	r29
    5080:	cf 93       	push	r28
    5082:	00 d0       	rcall	.+0      	; 0x5084 <vTaskSwitchContext+0x6>
    5084:	cd b7       	in	r28, 0x3d	; 61
    5086:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    5088:	80 91 bc 04 	lds	r24, 0x04BC
    508c:	88 23       	and	r24, r24
    508e:	49 f0       	breq	.+18     	; 0x50a2 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    5090:	81 e0       	ldi	r24, 0x01	; 1
    5092:	80 93 be 04 	sts	0x04BE, r24
    5096:	54 c0       	rjmp	.+168    	; 0x5140 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5098:	80 91 ba 04 	lds	r24, 0x04BA
    509c:	81 50       	subi	r24, 0x01	; 1
    509e:	80 93 ba 04 	sts	0x04BA, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    50a2:	80 91 ba 04 	lds	r24, 0x04BA
    50a6:	28 2f       	mov	r18, r24
    50a8:	30 e0       	ldi	r19, 0x00	; 0
    50aa:	c9 01       	movw	r24, r18
    50ac:	88 0f       	add	r24, r24
    50ae:	99 1f       	adc	r25, r25
    50b0:	88 0f       	add	r24, r24
    50b2:	99 1f       	adc	r25, r25
    50b4:	88 0f       	add	r24, r24
    50b6:	99 1f       	adc	r25, r25
    50b8:	82 0f       	add	r24, r18
    50ba:	93 1f       	adc	r25, r19
    50bc:	fc 01       	movw	r30, r24
    50be:	ef 53       	subi	r30, 0x3F	; 63
    50c0:	fb 4f       	sbci	r31, 0xFB	; 251
    50c2:	80 81       	ld	r24, Z
    50c4:	88 23       	and	r24, r24
    50c6:	41 f3       	breq	.-48     	; 0x5098 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    50c8:	80 91 ba 04 	lds	r24, 0x04BA
    50cc:	28 2f       	mov	r18, r24
    50ce:	30 e0       	ldi	r19, 0x00	; 0
    50d0:	c9 01       	movw	r24, r18
    50d2:	88 0f       	add	r24, r24
    50d4:	99 1f       	adc	r25, r25
    50d6:	88 0f       	add	r24, r24
    50d8:	99 1f       	adc	r25, r25
    50da:	88 0f       	add	r24, r24
    50dc:	99 1f       	adc	r25, r25
    50de:	82 0f       	add	r24, r18
    50e0:	93 1f       	adc	r25, r19
    50e2:	8f 53       	subi	r24, 0x3F	; 63
    50e4:	9b 4f       	sbci	r25, 0xFB	; 251
    50e6:	9a 83       	std	Y+2, r25	; 0x02
    50e8:	89 83       	std	Y+1, r24	; 0x01
    50ea:	e9 81       	ldd	r30, Y+1	; 0x01
    50ec:	fa 81       	ldd	r31, Y+2	; 0x02
    50ee:	01 80       	ldd	r0, Z+1	; 0x01
    50f0:	f2 81       	ldd	r31, Z+2	; 0x02
    50f2:	e0 2d       	mov	r30, r0
    50f4:	82 81       	ldd	r24, Z+2	; 0x02
    50f6:	93 81       	ldd	r25, Z+3	; 0x03
    50f8:	e9 81       	ldd	r30, Y+1	; 0x01
    50fa:	fa 81       	ldd	r31, Y+2	; 0x02
    50fc:	92 83       	std	Z+2, r25	; 0x02
    50fe:	81 83       	std	Z+1, r24	; 0x01
    5100:	e9 81       	ldd	r30, Y+1	; 0x01
    5102:	fa 81       	ldd	r31, Y+2	; 0x02
    5104:	21 81       	ldd	r18, Z+1	; 0x01
    5106:	32 81       	ldd	r19, Z+2	; 0x02
    5108:	89 81       	ldd	r24, Y+1	; 0x01
    510a:	9a 81       	ldd	r25, Y+2	; 0x02
    510c:	03 96       	adiw	r24, 0x03	; 3
    510e:	28 17       	cp	r18, r24
    5110:	39 07       	cpc	r19, r25
    5112:	59 f4       	brne	.+22     	; 0x512a <vTaskSwitchContext+0xac>
    5114:	e9 81       	ldd	r30, Y+1	; 0x01
    5116:	fa 81       	ldd	r31, Y+2	; 0x02
    5118:	01 80       	ldd	r0, Z+1	; 0x01
    511a:	f2 81       	ldd	r31, Z+2	; 0x02
    511c:	e0 2d       	mov	r30, r0
    511e:	82 81       	ldd	r24, Z+2	; 0x02
    5120:	93 81       	ldd	r25, Z+3	; 0x03
    5122:	e9 81       	ldd	r30, Y+1	; 0x01
    5124:	fa 81       	ldd	r31, Y+2	; 0x02
    5126:	92 83       	std	Z+2, r25	; 0x02
    5128:	81 83       	std	Z+1, r24	; 0x01
    512a:	e9 81       	ldd	r30, Y+1	; 0x01
    512c:	fa 81       	ldd	r31, Y+2	; 0x02
    512e:	01 80       	ldd	r0, Z+1	; 0x01
    5130:	f2 81       	ldd	r31, Z+2	; 0x02
    5132:	e0 2d       	mov	r30, r0
    5134:	86 81       	ldd	r24, Z+6	; 0x06
    5136:	97 81       	ldd	r25, Z+7	; 0x07
    5138:	90 93 b4 04 	sts	0x04B4, r25
    513c:	80 93 b3 04 	sts	0x04B3, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    5140:	0f 90       	pop	r0
    5142:	0f 90       	pop	r0
    5144:	cf 91       	pop	r28
    5146:	df 91       	pop	r29
    5148:	08 95       	ret

0000514a <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    514a:	df 93       	push	r29
    514c:	cf 93       	push	r28
    514e:	00 d0       	rcall	.+0      	; 0x5150 <vTaskPlaceOnEventList+0x6>
    5150:	00 d0       	rcall	.+0      	; 0x5152 <vTaskPlaceOnEventList+0x8>
    5152:	00 d0       	rcall	.+0      	; 0x5154 <vTaskPlaceOnEventList+0xa>
    5154:	cd b7       	in	r28, 0x3d	; 61
    5156:	de b7       	in	r29, 0x3e	; 62
    5158:	9c 83       	std	Y+4, r25	; 0x04
    515a:	8b 83       	std	Y+3, r24	; 0x03
    515c:	7e 83       	std	Y+6, r23	; 0x06
    515e:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    5160:	4b 81       	ldd	r20, Y+3	; 0x03
    5162:	5c 81       	ldd	r21, Y+4	; 0x04
    5164:	80 91 b3 04 	lds	r24, 0x04B3
    5168:	90 91 b4 04 	lds	r25, 0x04B4
    516c:	9c 01       	movw	r18, r24
    516e:	24 5f       	subi	r18, 0xF4	; 244
    5170:	3f 4f       	sbci	r19, 0xFF	; 255
    5172:	ca 01       	movw	r24, r20
    5174:	b9 01       	movw	r22, r18
    5176:	0e 94 3c 1c 	call	0x3878	; 0x3878 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    517a:	80 91 b3 04 	lds	r24, 0x04B3
    517e:	90 91 b4 04 	lds	r25, 0x04B4
    5182:	02 96       	adiw	r24, 0x02	; 2
    5184:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5188:	20 91 b7 04 	lds	r18, 0x04B7
    518c:	30 91 b8 04 	lds	r19, 0x04B8
    5190:	8d 81       	ldd	r24, Y+5	; 0x05
    5192:	9e 81       	ldd	r25, Y+6	; 0x06
    5194:	82 0f       	add	r24, r18
    5196:	93 1f       	adc	r25, r19
    5198:	9a 83       	std	Y+2, r25	; 0x02
    519a:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    519c:	89 81       	ldd	r24, Y+1	; 0x01
    519e:	9a 81       	ldd	r25, Y+2	; 0x02
    51a0:	0e 94 9f 2a 	call	0x553e	; 0x553e <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    51a4:	26 96       	adiw	r28, 0x06	; 6
    51a6:	0f b6       	in	r0, 0x3f	; 63
    51a8:	f8 94       	cli
    51aa:	de bf       	out	0x3e, r29	; 62
    51ac:	0f be       	out	0x3f, r0	; 63
    51ae:	cd bf       	out	0x3d, r28	; 61
    51b0:	cf 91       	pop	r28
    51b2:	df 91       	pop	r29
    51b4:	08 95       	ret

000051b6 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    51b6:	df 93       	push	r29
    51b8:	cf 93       	push	r28
    51ba:	00 d0       	rcall	.+0      	; 0x51bc <xTaskRemoveFromEventList+0x6>
    51bc:	00 d0       	rcall	.+0      	; 0x51be <xTaskRemoveFromEventList+0x8>
    51be:	0f 92       	push	r0
    51c0:	cd b7       	in	r28, 0x3d	; 61
    51c2:	de b7       	in	r29, 0x3e	; 62
    51c4:	9d 83       	std	Y+5, r25	; 0x05
    51c6:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    51c8:	ec 81       	ldd	r30, Y+4	; 0x04
    51ca:	fd 81       	ldd	r31, Y+5	; 0x05
    51cc:	05 80       	ldd	r0, Z+5	; 0x05
    51ce:	f6 81       	ldd	r31, Z+6	; 0x06
    51d0:	e0 2d       	mov	r30, r0
    51d2:	86 81       	ldd	r24, Z+6	; 0x06
    51d4:	97 81       	ldd	r25, Z+7	; 0x07
    51d6:	9b 83       	std	Y+3, r25	; 0x03
    51d8:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    51da:	8a 81       	ldd	r24, Y+2	; 0x02
    51dc:	9b 81       	ldd	r25, Y+3	; 0x03
    51de:	0c 96       	adiw	r24, 0x0c	; 12
    51e0:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    51e4:	80 91 bc 04 	lds	r24, 0x04BC
    51e8:	88 23       	and	r24, r24
    51ea:	61 f5       	brne	.+88     	; 0x5244 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    51ec:	8a 81       	ldd	r24, Y+2	; 0x02
    51ee:	9b 81       	ldd	r25, Y+3	; 0x03
    51f0:	02 96       	adiw	r24, 0x02	; 2
    51f2:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    51f6:	ea 81       	ldd	r30, Y+2	; 0x02
    51f8:	fb 81       	ldd	r31, Y+3	; 0x03
    51fa:	96 89       	ldd	r25, Z+22	; 0x16
    51fc:	80 91 ba 04 	lds	r24, 0x04BA
    5200:	89 17       	cp	r24, r25
    5202:	28 f4       	brcc	.+10     	; 0x520e <xTaskRemoveFromEventList+0x58>
    5204:	ea 81       	ldd	r30, Y+2	; 0x02
    5206:	fb 81       	ldd	r31, Y+3	; 0x03
    5208:	86 89       	ldd	r24, Z+22	; 0x16
    520a:	80 93 ba 04 	sts	0x04BA, r24
    520e:	ea 81       	ldd	r30, Y+2	; 0x02
    5210:	fb 81       	ldd	r31, Y+3	; 0x03
    5212:	86 89       	ldd	r24, Z+22	; 0x16
    5214:	28 2f       	mov	r18, r24
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	c9 01       	movw	r24, r18
    521a:	88 0f       	add	r24, r24
    521c:	99 1f       	adc	r25, r25
    521e:	88 0f       	add	r24, r24
    5220:	99 1f       	adc	r25, r25
    5222:	88 0f       	add	r24, r24
    5224:	99 1f       	adc	r25, r25
    5226:	82 0f       	add	r24, r18
    5228:	93 1f       	adc	r25, r19
    522a:	ac 01       	movw	r20, r24
    522c:	4f 53       	subi	r20, 0x3F	; 63
    522e:	5b 4f       	sbci	r21, 0xFB	; 251
    5230:	8a 81       	ldd	r24, Y+2	; 0x02
    5232:	9b 81       	ldd	r25, Y+3	; 0x03
    5234:	9c 01       	movw	r18, r24
    5236:	2e 5f       	subi	r18, 0xFE	; 254
    5238:	3f 4f       	sbci	r19, 0xFF	; 255
    523a:	ca 01       	movw	r24, r20
    523c:	b9 01       	movw	r22, r18
    523e:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <vListInsertEnd>
    5242:	0a c0       	rjmp	.+20     	; 0x5258 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5244:	8a 81       	ldd	r24, Y+2	; 0x02
    5246:	9b 81       	ldd	r25, Y+3	; 0x03
    5248:	9c 01       	movw	r18, r24
    524a:	24 5f       	subi	r18, 0xF4	; 244
    524c:	3f 4f       	sbci	r19, 0xFF	; 255
    524e:	84 e0       	ldi	r24, 0x04	; 4
    5250:	95 e0       	ldi	r25, 0x05	; 5
    5252:	b9 01       	movw	r22, r18
    5254:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5258:	ea 81       	ldd	r30, Y+2	; 0x02
    525a:	fb 81       	ldd	r31, Y+3	; 0x03
    525c:	96 89       	ldd	r25, Z+22	; 0x16
    525e:	e0 91 b3 04 	lds	r30, 0x04B3
    5262:	f0 91 b4 04 	lds	r31, 0x04B4
    5266:	86 89       	ldd	r24, Z+22	; 0x16
    5268:	98 17       	cp	r25, r24
    526a:	18 f0       	brcs	.+6      	; 0x5272 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    526c:	81 e0       	ldi	r24, 0x01	; 1
    526e:	89 83       	std	Y+1, r24	; 0x01
    5270:	01 c0       	rjmp	.+2      	; 0x5274 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    5272:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    5274:	89 81       	ldd	r24, Y+1	; 0x01
}
    5276:	0f 90       	pop	r0
    5278:	0f 90       	pop	r0
    527a:	0f 90       	pop	r0
    527c:	0f 90       	pop	r0
    527e:	0f 90       	pop	r0
    5280:	cf 91       	pop	r28
    5282:	df 91       	pop	r29
    5284:	08 95       	ret

00005286 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    5286:	df 93       	push	r29
    5288:	cf 93       	push	r28
    528a:	00 d0       	rcall	.+0      	; 0x528c <vTaskSetTimeOutState+0x6>
    528c:	cd b7       	in	r28, 0x3d	; 61
    528e:	de b7       	in	r29, 0x3e	; 62
    5290:	9a 83       	std	Y+2, r25	; 0x02
    5292:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5294:	80 91 bf 04 	lds	r24, 0x04BF
    5298:	e9 81       	ldd	r30, Y+1	; 0x01
    529a:	fa 81       	ldd	r31, Y+2	; 0x02
    529c:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    529e:	80 91 b7 04 	lds	r24, 0x04B7
    52a2:	90 91 b8 04 	lds	r25, 0x04B8
    52a6:	e9 81       	ldd	r30, Y+1	; 0x01
    52a8:	fa 81       	ldd	r31, Y+2	; 0x02
    52aa:	92 83       	std	Z+2, r25	; 0x02
    52ac:	81 83       	std	Z+1, r24	; 0x01
}
    52ae:	0f 90       	pop	r0
    52b0:	0f 90       	pop	r0
    52b2:	cf 91       	pop	r28
    52b4:	df 91       	pop	r29
    52b6:	08 95       	ret

000052b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    52b8:	df 93       	push	r29
    52ba:	cf 93       	push	r28
    52bc:	00 d0       	rcall	.+0      	; 0x52be <xTaskCheckForTimeOut+0x6>
    52be:	00 d0       	rcall	.+0      	; 0x52c0 <xTaskCheckForTimeOut+0x8>
    52c0:	0f 92       	push	r0
    52c2:	cd b7       	in	r28, 0x3d	; 61
    52c4:	de b7       	in	r29, 0x3e	; 62
    52c6:	9b 83       	std	Y+3, r25	; 0x03
    52c8:	8a 83       	std	Y+2, r24	; 0x02
    52ca:	7d 83       	std	Y+5, r23	; 0x05
    52cc:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    52ce:	0f b6       	in	r0, 0x3f	; 63
    52d0:	f8 94       	cli
    52d2:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    52d4:	ea 81       	ldd	r30, Y+2	; 0x02
    52d6:	fb 81       	ldd	r31, Y+3	; 0x03
    52d8:	90 81       	ld	r25, Z
    52da:	80 91 bf 04 	lds	r24, 0x04BF
    52de:	98 17       	cp	r25, r24
    52e0:	71 f0       	breq	.+28     	; 0x52fe <xTaskCheckForTimeOut+0x46>
    52e2:	ea 81       	ldd	r30, Y+2	; 0x02
    52e4:	fb 81       	ldd	r31, Y+3	; 0x03
    52e6:	21 81       	ldd	r18, Z+1	; 0x01
    52e8:	32 81       	ldd	r19, Z+2	; 0x02
    52ea:	80 91 b7 04 	lds	r24, 0x04B7
    52ee:	90 91 b8 04 	lds	r25, 0x04B8
    52f2:	82 17       	cp	r24, r18
    52f4:	93 07       	cpc	r25, r19
    52f6:	18 f0       	brcs	.+6      	; 0x52fe <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    52f8:	81 e0       	ldi	r24, 0x01	; 1
    52fa:	89 83       	std	Y+1, r24	; 0x01
    52fc:	2f c0       	rjmp	.+94     	; 0x535c <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    52fe:	20 91 b7 04 	lds	r18, 0x04B7
    5302:	30 91 b8 04 	lds	r19, 0x04B8
    5306:	ea 81       	ldd	r30, Y+2	; 0x02
    5308:	fb 81       	ldd	r31, Y+3	; 0x03
    530a:	81 81       	ldd	r24, Z+1	; 0x01
    530c:	92 81       	ldd	r25, Z+2	; 0x02
    530e:	28 1b       	sub	r18, r24
    5310:	39 0b       	sbc	r19, r25
    5312:	ec 81       	ldd	r30, Y+4	; 0x04
    5314:	fd 81       	ldd	r31, Y+5	; 0x05
    5316:	80 81       	ld	r24, Z
    5318:	91 81       	ldd	r25, Z+1	; 0x01
    531a:	28 17       	cp	r18, r24
    531c:	39 07       	cpc	r19, r25
    531e:	e0 f4       	brcc	.+56     	; 0x5358 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5320:	ec 81       	ldd	r30, Y+4	; 0x04
    5322:	fd 81       	ldd	r31, Y+5	; 0x05
    5324:	40 81       	ld	r20, Z
    5326:	51 81       	ldd	r21, Z+1	; 0x01
    5328:	ea 81       	ldd	r30, Y+2	; 0x02
    532a:	fb 81       	ldd	r31, Y+3	; 0x03
    532c:	21 81       	ldd	r18, Z+1	; 0x01
    532e:	32 81       	ldd	r19, Z+2	; 0x02
    5330:	80 91 b7 04 	lds	r24, 0x04B7
    5334:	90 91 b8 04 	lds	r25, 0x04B8
    5338:	b9 01       	movw	r22, r18
    533a:	68 1b       	sub	r22, r24
    533c:	79 0b       	sbc	r23, r25
    533e:	cb 01       	movw	r24, r22
    5340:	84 0f       	add	r24, r20
    5342:	95 1f       	adc	r25, r21
    5344:	ec 81       	ldd	r30, Y+4	; 0x04
    5346:	fd 81       	ldd	r31, Y+5	; 0x05
    5348:	91 83       	std	Z+1, r25	; 0x01
    534a:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    534c:	8a 81       	ldd	r24, Y+2	; 0x02
    534e:	9b 81       	ldd	r25, Y+3	; 0x03
    5350:	0e 94 43 29 	call	0x5286	; 0x5286 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5354:	19 82       	std	Y+1, r1	; 0x01
    5356:	02 c0       	rjmp	.+4      	; 0x535c <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    5358:	81 e0       	ldi	r24, 0x01	; 1
    535a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    535c:	0f 90       	pop	r0
    535e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    5360:	89 81       	ldd	r24, Y+1	; 0x01
}
    5362:	0f 90       	pop	r0
    5364:	0f 90       	pop	r0
    5366:	0f 90       	pop	r0
    5368:	0f 90       	pop	r0
    536a:	0f 90       	pop	r0
    536c:	cf 91       	pop	r28
    536e:	df 91       	pop	r29
    5370:	08 95       	ret

00005372 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5372:	df 93       	push	r29
    5374:	cf 93       	push	r28
    5376:	cd b7       	in	r28, 0x3d	; 61
    5378:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    537a:	81 e0       	ldi	r24, 0x01	; 1
    537c:	80 93 be 04 	sts	0x04BE, r24
}
    5380:	cf 91       	pop	r28
    5382:	df 91       	pop	r29
    5384:	08 95       	ret

00005386 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5386:	df 93       	push	r29
    5388:	cf 93       	push	r28
    538a:	00 d0       	rcall	.+0      	; 0x538c <prvIdleTask+0x6>
    538c:	cd b7       	in	r28, 0x3d	; 61
    538e:	de b7       	in	r29, 0x3e	; 62
    5390:	9a 83       	std	Y+2, r25	; 0x02
    5392:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    5394:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <prvCheckTasksWaitingTermination>
    5398:	fd cf       	rjmp	.-6      	; 0x5394 <prvIdleTask+0xe>

0000539a <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    539a:	0f 93       	push	r16
    539c:	1f 93       	push	r17
    539e:	df 93       	push	r29
    53a0:	cf 93       	push	r28
    53a2:	cd b7       	in	r28, 0x3d	; 61
    53a4:	de b7       	in	r29, 0x3e	; 62
    53a6:	29 97       	sbiw	r28, 0x09	; 9
    53a8:	0f b6       	in	r0, 0x3f	; 63
    53aa:	f8 94       	cli
    53ac:	de bf       	out	0x3e, r29	; 62
    53ae:	0f be       	out	0x3f, r0	; 63
    53b0:	cd bf       	out	0x3d, r28	; 61
    53b2:	9a 83       	std	Y+2, r25	; 0x02
    53b4:	89 83       	std	Y+1, r24	; 0x01
    53b6:	7c 83       	std	Y+4, r23	; 0x04
    53b8:	6b 83       	std	Y+3, r22	; 0x03
    53ba:	4d 83       	std	Y+5, r20	; 0x05
    53bc:	3f 83       	std	Y+7, r19	; 0x07
    53be:	2e 83       	std	Y+6, r18	; 0x06
    53c0:	19 87       	std	Y+9, r17	; 0x09
    53c2:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    53c4:	89 81       	ldd	r24, Y+1	; 0x01
    53c6:	9a 81       	ldd	r25, Y+2	; 0x02
    53c8:	49 96       	adiw	r24, 0x19	; 25
    53ca:	2b 81       	ldd	r18, Y+3	; 0x03
    53cc:	3c 81       	ldd	r19, Y+4	; 0x04
    53ce:	b9 01       	movw	r22, r18
    53d0:	48 e0       	ldi	r20, 0x08	; 8
    53d2:	50 e0       	ldi	r21, 0x00	; 0
    53d4:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    53d8:	e9 81       	ldd	r30, Y+1	; 0x01
    53da:	fa 81       	ldd	r31, Y+2	; 0x02
    53dc:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    53de:	8d 81       	ldd	r24, Y+5	; 0x05
    53e0:	85 30       	cpi	r24, 0x05	; 5
    53e2:	10 f0       	brcs	.+4      	; 0x53e8 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    53e4:	84 e0       	ldi	r24, 0x04	; 4
    53e6:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    53e8:	e9 81       	ldd	r30, Y+1	; 0x01
    53ea:	fa 81       	ldd	r31, Y+2	; 0x02
    53ec:	8d 81       	ldd	r24, Y+5	; 0x05
    53ee:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    53f0:	89 81       	ldd	r24, Y+1	; 0x01
    53f2:	9a 81       	ldd	r25, Y+2	; 0x02
    53f4:	02 96       	adiw	r24, 0x02	; 2
    53f6:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    53fa:	89 81       	ldd	r24, Y+1	; 0x01
    53fc:	9a 81       	ldd	r25, Y+2	; 0x02
    53fe:	0c 96       	adiw	r24, 0x0c	; 12
    5400:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5404:	e9 81       	ldd	r30, Y+1	; 0x01
    5406:	fa 81       	ldd	r31, Y+2	; 0x02
    5408:	89 81       	ldd	r24, Y+1	; 0x01
    540a:	9a 81       	ldd	r25, Y+2	; 0x02
    540c:	91 87       	std	Z+9, r25	; 0x09
    540e:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5410:	8d 81       	ldd	r24, Y+5	; 0x05
    5412:	28 2f       	mov	r18, r24
    5414:	30 e0       	ldi	r19, 0x00	; 0
    5416:	85 e0       	ldi	r24, 0x05	; 5
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	82 1b       	sub	r24, r18
    541c:	93 0b       	sbc	r25, r19
    541e:	e9 81       	ldd	r30, Y+1	; 0x01
    5420:	fa 81       	ldd	r31, Y+2	; 0x02
    5422:	95 87       	std	Z+13, r25	; 0x0d
    5424:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    5426:	e9 81       	ldd	r30, Y+1	; 0x01
    5428:	fa 81       	ldd	r31, Y+2	; 0x02
    542a:	89 81       	ldd	r24, Y+1	; 0x01
    542c:	9a 81       	ldd	r25, Y+2	; 0x02
    542e:	93 8b       	std	Z+19, r25	; 0x13
    5430:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5432:	29 96       	adiw	r28, 0x09	; 9
    5434:	0f b6       	in	r0, 0x3f	; 63
    5436:	f8 94       	cli
    5438:	de bf       	out	0x3e, r29	; 62
    543a:	0f be       	out	0x3f, r0	; 63
    543c:	cd bf       	out	0x3d, r28	; 61
    543e:	cf 91       	pop	r28
    5440:	df 91       	pop	r29
    5442:	1f 91       	pop	r17
    5444:	0f 91       	pop	r16
    5446:	08 95       	ret

00005448 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5448:	df 93       	push	r29
    544a:	cf 93       	push	r28
    544c:	0f 92       	push	r0
    544e:	cd b7       	in	r28, 0x3d	; 61
    5450:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5452:	19 82       	std	Y+1, r1	; 0x01
    5454:	13 c0       	rjmp	.+38     	; 0x547c <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5456:	89 81       	ldd	r24, Y+1	; 0x01
    5458:	28 2f       	mov	r18, r24
    545a:	30 e0       	ldi	r19, 0x00	; 0
    545c:	c9 01       	movw	r24, r18
    545e:	88 0f       	add	r24, r24
    5460:	99 1f       	adc	r25, r25
    5462:	88 0f       	add	r24, r24
    5464:	99 1f       	adc	r25, r25
    5466:	88 0f       	add	r24, r24
    5468:	99 1f       	adc	r25, r25
    546a:	82 0f       	add	r24, r18
    546c:	93 1f       	adc	r25, r19
    546e:	8f 53       	subi	r24, 0x3F	; 63
    5470:	9b 4f       	sbci	r25, 0xFB	; 251
    5472:	0e 94 b6 1b 	call	0x376c	; 0x376c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5476:	89 81       	ldd	r24, Y+1	; 0x01
    5478:	8f 5f       	subi	r24, 0xFF	; 255
    547a:	89 83       	std	Y+1, r24	; 0x01
    547c:	89 81       	ldd	r24, Y+1	; 0x01
    547e:	85 30       	cpi	r24, 0x05	; 5
    5480:	50 f3       	brcs	.-44     	; 0x5456 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5482:	8e ee       	ldi	r24, 0xEE	; 238
    5484:	94 e0       	ldi	r25, 0x04	; 4
    5486:	0e 94 b6 1b 	call	0x376c	; 0x376c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    548a:	87 ef       	ldi	r24, 0xF7	; 247
    548c:	94 e0       	ldi	r25, 0x04	; 4
    548e:	0e 94 b6 1b 	call	0x376c	; 0x376c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    5492:	84 e0       	ldi	r24, 0x04	; 4
    5494:	95 e0       	ldi	r25, 0x05	; 5
    5496:	0e 94 b6 1b 	call	0x376c	; 0x376c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    549a:	8d e0       	ldi	r24, 0x0D	; 13
    549c:	95 e0       	ldi	r25, 0x05	; 5
    549e:	0e 94 b6 1b 	call	0x376c	; 0x376c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    54a2:	8e ee       	ldi	r24, 0xEE	; 238
    54a4:	94 e0       	ldi	r25, 0x04	; 4
    54a6:	90 93 01 05 	sts	0x0501, r25
    54aa:	80 93 00 05 	sts	0x0500, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    54ae:	87 ef       	ldi	r24, 0xF7	; 247
    54b0:	94 e0       	ldi	r25, 0x04	; 4
    54b2:	90 93 03 05 	sts	0x0503, r25
    54b6:	80 93 02 05 	sts	0x0502, r24
}
    54ba:	0f 90       	pop	r0
    54bc:	cf 91       	pop	r28
    54be:	df 91       	pop	r29
    54c0:	08 95       	ret

000054c2 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    54c2:	df 93       	push	r29
    54c4:	cf 93       	push	r28
    54c6:	00 d0       	rcall	.+0      	; 0x54c8 <prvCheckTasksWaitingTermination+0x6>
    54c8:	0f 92       	push	r0
    54ca:	cd b7       	in	r28, 0x3d	; 61
    54cc:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    54ce:	80 91 b5 04 	lds	r24, 0x04B5
    54d2:	88 23       	and	r24, r24
    54d4:	71 f1       	breq	.+92     	; 0x5532 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    54d6:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    54da:	80 91 0d 05 	lds	r24, 0x050D
    54de:	1b 82       	std	Y+3, r1	; 0x03
    54e0:	88 23       	and	r24, r24
    54e2:	11 f4       	brne	.+4      	; 0x54e8 <prvCheckTasksWaitingTermination+0x26>
    54e4:	81 e0       	ldi	r24, 0x01	; 1
    54e6:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    54e8:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    54ec:	8b 81       	ldd	r24, Y+3	; 0x03
    54ee:	88 23       	and	r24, r24
    54f0:	01 f5       	brne	.+64     	; 0x5532 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    54f2:	0f b6       	in	r0, 0x3f	; 63
    54f4:	f8 94       	cli
    54f6:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    54f8:	e0 91 12 05 	lds	r30, 0x0512
    54fc:	f0 91 13 05 	lds	r31, 0x0513
    5500:	86 81       	ldd	r24, Z+6	; 0x06
    5502:	97 81       	ldd	r25, Z+7	; 0x07
    5504:	9a 83       	std	Y+2, r25	; 0x02
    5506:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    5508:	89 81       	ldd	r24, Y+1	; 0x01
    550a:	9a 81       	ldd	r25, Y+2	; 0x02
    550c:	02 96       	adiw	r24, 0x02	; 2
    550e:	0e 94 a8 1c 	call	0x3950	; 0x3950 <vListRemove>
					--uxCurrentNumberOfTasks;
    5512:	80 91 b6 04 	lds	r24, 0x04B6
    5516:	81 50       	subi	r24, 0x01	; 1
    5518:	80 93 b6 04 	sts	0x04B6, r24
					--uxTasksDeleted;
    551c:	80 91 b5 04 	lds	r24, 0x04B5
    5520:	81 50       	subi	r24, 0x01	; 1
    5522:	80 93 b5 04 	sts	0x04B5, r24
				}
				taskEXIT_CRITICAL();
    5526:	0f 90       	pop	r0
    5528:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    552a:	89 81       	ldd	r24, Y+1	; 0x01
    552c:	9a 81       	ldd	r25, Y+2	; 0x02
    552e:	0e 94 38 2b 	call	0x5670	; 0x5670 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5532:	0f 90       	pop	r0
    5534:	0f 90       	pop	r0
    5536:	0f 90       	pop	r0
    5538:	cf 91       	pop	r28
    553a:	df 91       	pop	r29
    553c:	08 95       	ret

0000553e <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    553e:	df 93       	push	r29
    5540:	cf 93       	push	r28
    5542:	00 d0       	rcall	.+0      	; 0x5544 <prvAddCurrentTaskToDelayedList+0x6>
    5544:	cd b7       	in	r28, 0x3d	; 61
    5546:	de b7       	in	r29, 0x3e	; 62
    5548:	9a 83       	std	Y+2, r25	; 0x02
    554a:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    554c:	e0 91 b3 04 	lds	r30, 0x04B3
    5550:	f0 91 b4 04 	lds	r31, 0x04B4
    5554:	89 81       	ldd	r24, Y+1	; 0x01
    5556:	9a 81       	ldd	r25, Y+2	; 0x02
    5558:	93 83       	std	Z+3, r25	; 0x03
    555a:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    555c:	20 91 b7 04 	lds	r18, 0x04B7
    5560:	30 91 b8 04 	lds	r19, 0x04B8
    5564:	89 81       	ldd	r24, Y+1	; 0x01
    5566:	9a 81       	ldd	r25, Y+2	; 0x02
    5568:	82 17       	cp	r24, r18
    556a:	93 07       	cpc	r25, r19
    556c:	70 f4       	brcc	.+28     	; 0x558a <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    556e:	80 91 02 05 	lds	r24, 0x0502
    5572:	90 91 03 05 	lds	r25, 0x0503
    5576:	20 91 b3 04 	lds	r18, 0x04B3
    557a:	30 91 b4 04 	lds	r19, 0x04B4
    557e:	2e 5f       	subi	r18, 0xFE	; 254
    5580:	3f 4f       	sbci	r19, 0xFF	; 255
    5582:	b9 01       	movw	r22, r18
    5584:	0e 94 3c 1c 	call	0x3878	; 0x3878 <vListInsert>
    5588:	1e c0       	rjmp	.+60     	; 0x55c6 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    558a:	40 91 00 05 	lds	r20, 0x0500
    558e:	50 91 01 05 	lds	r21, 0x0501
    5592:	80 91 b3 04 	lds	r24, 0x04B3
    5596:	90 91 b4 04 	lds	r25, 0x04B4
    559a:	9c 01       	movw	r18, r24
    559c:	2e 5f       	subi	r18, 0xFE	; 254
    559e:	3f 4f       	sbci	r19, 0xFF	; 255
    55a0:	ca 01       	movw	r24, r20
    55a2:	b9 01       	movw	r22, r18
    55a4:	0e 94 3c 1c 	call	0x3878	; 0x3878 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    55a8:	20 91 8b 00 	lds	r18, 0x008B
    55ac:	30 91 8c 00 	lds	r19, 0x008C
    55b0:	89 81       	ldd	r24, Y+1	; 0x01
    55b2:	9a 81       	ldd	r25, Y+2	; 0x02
    55b4:	82 17       	cp	r24, r18
    55b6:	93 07       	cpc	r25, r19
    55b8:	30 f4       	brcc	.+12     	; 0x55c6 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    55ba:	89 81       	ldd	r24, Y+1	; 0x01
    55bc:	9a 81       	ldd	r25, Y+2	; 0x02
    55be:	90 93 8c 00 	sts	0x008C, r25
    55c2:	80 93 8b 00 	sts	0x008B, r24
		}
	}
}
    55c6:	0f 90       	pop	r0
    55c8:	0f 90       	pop	r0
    55ca:	cf 91       	pop	r28
    55cc:	df 91       	pop	r29
    55ce:	08 95       	ret

000055d0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    55d0:	df 93       	push	r29
    55d2:	cf 93       	push	r28
    55d4:	cd b7       	in	r28, 0x3d	; 61
    55d6:	de b7       	in	r29, 0x3e	; 62
    55d8:	28 97       	sbiw	r28, 0x08	; 8
    55da:	0f b6       	in	r0, 0x3f	; 63
    55dc:	f8 94       	cli
    55de:	de bf       	out	0x3e, r29	; 62
    55e0:	0f be       	out	0x3f, r0	; 63
    55e2:	cd bf       	out	0x3d, r28	; 61
    55e4:	9c 83       	std	Y+4, r25	; 0x04
    55e6:	8b 83       	std	Y+3, r24	; 0x03
    55e8:	7e 83       	std	Y+6, r23	; 0x06
    55ea:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    55ec:	81 e2       	ldi	r24, 0x21	; 33
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	0e 94 4a 1b 	call	0x3694	; 0x3694 <pvPortMalloc>
    55f4:	9a 83       	std	Y+2, r25	; 0x02
    55f6:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    55f8:	89 81       	ldd	r24, Y+1	; 0x01
    55fa:	9a 81       	ldd	r25, Y+2	; 0x02
    55fc:	00 97       	sbiw	r24, 0x00	; 0
    55fe:	69 f1       	breq	.+90     	; 0x565a <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5600:	8d 81       	ldd	r24, Y+5	; 0x05
    5602:	9e 81       	ldd	r25, Y+6	; 0x06
    5604:	00 97       	sbiw	r24, 0x00	; 0
    5606:	39 f4       	brne	.+14     	; 0x5616 <prvAllocateTCBAndStack+0x46>
    5608:	8b 81       	ldd	r24, Y+3	; 0x03
    560a:	9c 81       	ldd	r25, Y+4	; 0x04
    560c:	0e 94 4a 1b 	call	0x3694	; 0x3694 <pvPortMalloc>
    5610:	98 87       	std	Y+8, r25	; 0x08
    5612:	8f 83       	std	Y+7, r24	; 0x07
    5614:	04 c0       	rjmp	.+8      	; 0x561e <prvAllocateTCBAndStack+0x4e>
    5616:	8d 81       	ldd	r24, Y+5	; 0x05
    5618:	9e 81       	ldd	r25, Y+6	; 0x06
    561a:	98 87       	std	Y+8, r25	; 0x08
    561c:	8f 83       	std	Y+7, r24	; 0x07
    561e:	e9 81       	ldd	r30, Y+1	; 0x01
    5620:	fa 81       	ldd	r31, Y+2	; 0x02
    5622:	8f 81       	ldd	r24, Y+7	; 0x07
    5624:	98 85       	ldd	r25, Y+8	; 0x08
    5626:	90 8f       	std	Z+24, r25	; 0x18
    5628:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    562a:	e9 81       	ldd	r30, Y+1	; 0x01
    562c:	fa 81       	ldd	r31, Y+2	; 0x02
    562e:	87 89       	ldd	r24, Z+23	; 0x17
    5630:	90 8d       	ldd	r25, Z+24	; 0x18
    5632:	00 97       	sbiw	r24, 0x00	; 0
    5634:	39 f4       	brne	.+14     	; 0x5644 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5636:	89 81       	ldd	r24, Y+1	; 0x01
    5638:	9a 81       	ldd	r25, Y+2	; 0x02
    563a:	0e 94 90 1b 	call	0x3720	; 0x3720 <vPortFree>
			pxNewTCB = NULL;
    563e:	1a 82       	std	Y+2, r1	; 0x02
    5640:	19 82       	std	Y+1, r1	; 0x01
    5642:	0b c0       	rjmp	.+22     	; 0x565a <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5644:	e9 81       	ldd	r30, Y+1	; 0x01
    5646:	fa 81       	ldd	r31, Y+2	; 0x02
    5648:	87 89       	ldd	r24, Z+23	; 0x17
    564a:	90 8d       	ldd	r25, Z+24	; 0x18
    564c:	2b 81       	ldd	r18, Y+3	; 0x03
    564e:	3c 81       	ldd	r19, Y+4	; 0x04
    5650:	65 ea       	ldi	r22, 0xA5	; 165
    5652:	70 e0       	ldi	r23, 0x00	; 0
    5654:	a9 01       	movw	r20, r18
    5656:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <memset>
		}
	}

	return pxNewTCB;
    565a:	89 81       	ldd	r24, Y+1	; 0x01
    565c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    565e:	28 96       	adiw	r28, 0x08	; 8
    5660:	0f b6       	in	r0, 0x3f	; 63
    5662:	f8 94       	cli
    5664:	de bf       	out	0x3e, r29	; 62
    5666:	0f be       	out	0x3f, r0	; 63
    5668:	cd bf       	out	0x3d, r28	; 61
    566a:	cf 91       	pop	r28
    566c:	df 91       	pop	r29
    566e:	08 95       	ret

00005670 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5670:	df 93       	push	r29
    5672:	cf 93       	push	r28
    5674:	00 d0       	rcall	.+0      	; 0x5676 <prvDeleteTCB+0x6>
    5676:	cd b7       	in	r28, 0x3d	; 61
    5678:	de b7       	in	r29, 0x3e	; 62
    567a:	9a 83       	std	Y+2, r25	; 0x02
    567c:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    567e:	e9 81       	ldd	r30, Y+1	; 0x01
    5680:	fa 81       	ldd	r31, Y+2	; 0x02
    5682:	87 89       	ldd	r24, Z+23	; 0x17
    5684:	90 8d       	ldd	r25, Z+24	; 0x18
    5686:	0e 94 90 1b 	call	0x3720	; 0x3720 <vPortFree>
		vPortFree( pxTCB );
    568a:	89 81       	ldd	r24, Y+1	; 0x01
    568c:	9a 81       	ldd	r25, Y+2	; 0x02
    568e:	0e 94 90 1b 	call	0x3720	; 0x3720 <vPortFree>
	}
    5692:	0f 90       	pop	r0
    5694:	0f 90       	pop	r0
    5696:	cf 91       	pop	r28
    5698:	df 91       	pop	r29
    569a:	08 95       	ret

0000569c <main>:
void APP_POT1_CALC(void*pv);		//PINA0
void APP_LM35_CALC(void*pv);		//PINA1
void APP_LCD_Display(void*pv);

int main(void)
{
    569c:	af 92       	push	r10
    569e:	bf 92       	push	r11
    56a0:	cf 92       	push	r12
    56a2:	df 92       	push	r13
    56a4:	ef 92       	push	r14
    56a6:	ff 92       	push	r15
    56a8:	0f 93       	push	r16
    56aa:	df 93       	push	r29
    56ac:	cf 93       	push	r28
    56ae:	cd b7       	in	r28, 0x3d	; 61
    56b0:	de b7       	in	r29, 0x3e	; 62
    56b2:	6b 97       	sbiw	r28, 0x1b	; 27
    56b4:	0f b6       	in	r0, 0x3f	; 63
    56b6:	f8 94       	cli
    56b8:	de bf       	out	0x3e, r29	; 62
    56ba:	0f be       	out	0x3f, r0	; 63
    56bc:	cd bf       	out	0x3d, r28	; 61
	u8 Welcome[]="Welcome";
    56be:	ce 01       	movw	r24, r28
    56c0:	0f 96       	adiw	r24, 0x0f	; 15
    56c2:	98 8f       	std	Y+24, r25	; 0x18
    56c4:	8f 8b       	std	Y+23, r24	; 0x17
    56c6:	e5 e6       	ldi	r30, 0x65	; 101
    56c8:	f0 e0       	ldi	r31, 0x00	; 0
    56ca:	fa 8f       	std	Y+26, r31	; 0x1a
    56cc:	e9 8f       	std	Y+25, r30	; 0x19
    56ce:	f8 e0       	ldi	r31, 0x08	; 8
    56d0:	fb 8f       	std	Y+27, r31	; 0x1b
    56d2:	e9 8d       	ldd	r30, Y+25	; 0x19
    56d4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    56d6:	00 80       	ld	r0, Z
    56d8:	89 8d       	ldd	r24, Y+25	; 0x19
    56da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    56dc:	01 96       	adiw	r24, 0x01	; 1
    56de:	9a 8f       	std	Y+26, r25	; 0x1a
    56e0:	89 8f       	std	Y+25, r24	; 0x19
    56e2:	ef 89       	ldd	r30, Y+23	; 0x17
    56e4:	f8 8d       	ldd	r31, Y+24	; 0x18
    56e6:	00 82       	st	Z, r0
    56e8:	8f 89       	ldd	r24, Y+23	; 0x17
    56ea:	98 8d       	ldd	r25, Y+24	; 0x18
    56ec:	01 96       	adiw	r24, 0x01	; 1
    56ee:	98 8f       	std	Y+24, r25	; 0x18
    56f0:	8f 8b       	std	Y+23, r24	; 0x17
    56f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    56f4:	91 50       	subi	r25, 0x01	; 1
    56f6:	9b 8f       	std	Y+27, r25	; 0x1b
    56f8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    56fa:	ee 23       	and	r30, r30
    56fc:	51 f7       	brne	.-44     	; 0x56d2 <main+0x36>
	//LCD init with welcome massege
	HCLCD_Vid4Bits_Init();
    56fe:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <HCLCD_Vid4Bits_Init>
	HCLCD_VidWriteString_4Bits(Welcome);
    5702:	ce 01       	movw	r24, r28
    5704:	0f 96       	adiw	r24, 0x0f	; 15
    5706:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HCLCD_VidWriteString_4Bits>
    570a:	80 e0       	ldi	r24, 0x00	; 0
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	aa e7       	ldi	r26, 0x7A	; 122
    5710:	b4 e4       	ldi	r27, 0x44	; 68
    5712:	8b 87       	std	Y+11, r24	; 0x0b
    5714:	9c 87       	std	Y+12, r25	; 0x0c
    5716:	ad 87       	std	Y+13, r26	; 0x0d
    5718:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    571a:	6b 85       	ldd	r22, Y+11	; 0x0b
    571c:	7c 85       	ldd	r23, Y+12	; 0x0c
    571e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5720:	9e 85       	ldd	r25, Y+14	; 0x0e
    5722:	20 e0       	ldi	r18, 0x00	; 0
    5724:	30 e0       	ldi	r19, 0x00	; 0
    5726:	4a ef       	ldi	r20, 0xFA	; 250
    5728:	54 e4       	ldi	r21, 0x44	; 68
    572a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    572e:	dc 01       	movw	r26, r24
    5730:	cb 01       	movw	r24, r22
    5732:	8f 83       	std	Y+7, r24	; 0x07
    5734:	98 87       	std	Y+8, r25	; 0x08
    5736:	a9 87       	std	Y+9, r26	; 0x09
    5738:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    573a:	6f 81       	ldd	r22, Y+7	; 0x07
    573c:	78 85       	ldd	r23, Y+8	; 0x08
    573e:	89 85       	ldd	r24, Y+9	; 0x09
    5740:	9a 85       	ldd	r25, Y+10	; 0x0a
    5742:	20 e0       	ldi	r18, 0x00	; 0
    5744:	30 e0       	ldi	r19, 0x00	; 0
    5746:	40 e8       	ldi	r20, 0x80	; 128
    5748:	5f e3       	ldi	r21, 0x3F	; 63
    574a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    574e:	88 23       	and	r24, r24
    5750:	2c f4       	brge	.+10     	; 0x575c <main+0xc0>
		__ticks = 1;
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	9e 83       	std	Y+6, r25	; 0x06
    5758:	8d 83       	std	Y+5, r24	; 0x05
    575a:	3f c0       	rjmp	.+126    	; 0x57da <main+0x13e>
	else if (__tmp > 65535)
    575c:	6f 81       	ldd	r22, Y+7	; 0x07
    575e:	78 85       	ldd	r23, Y+8	; 0x08
    5760:	89 85       	ldd	r24, Y+9	; 0x09
    5762:	9a 85       	ldd	r25, Y+10	; 0x0a
    5764:	20 e0       	ldi	r18, 0x00	; 0
    5766:	3f ef       	ldi	r19, 0xFF	; 255
    5768:	4f e7       	ldi	r20, 0x7F	; 127
    576a:	57 e4       	ldi	r21, 0x47	; 71
    576c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5770:	18 16       	cp	r1, r24
    5772:	4c f5       	brge	.+82     	; 0x57c6 <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5774:	6b 85       	ldd	r22, Y+11	; 0x0b
    5776:	7c 85       	ldd	r23, Y+12	; 0x0c
    5778:	8d 85       	ldd	r24, Y+13	; 0x0d
    577a:	9e 85       	ldd	r25, Y+14	; 0x0e
    577c:	20 e0       	ldi	r18, 0x00	; 0
    577e:	30 e0       	ldi	r19, 0x00	; 0
    5780:	40 e2       	ldi	r20, 0x20	; 32
    5782:	51 e4       	ldi	r21, 0x41	; 65
    5784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5788:	dc 01       	movw	r26, r24
    578a:	cb 01       	movw	r24, r22
    578c:	bc 01       	movw	r22, r24
    578e:	cd 01       	movw	r24, r26
    5790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5794:	dc 01       	movw	r26, r24
    5796:	cb 01       	movw	r24, r22
    5798:	9e 83       	std	Y+6, r25	; 0x06
    579a:	8d 83       	std	Y+5, r24	; 0x05
    579c:	0f c0       	rjmp	.+30     	; 0x57bc <main+0x120>
    579e:	88 ec       	ldi	r24, 0xC8	; 200
    57a0:	90 e0       	ldi	r25, 0x00	; 0
    57a2:	9c 83       	std	Y+4, r25	; 0x04
    57a4:	8b 83       	std	Y+3, r24	; 0x03
    57a6:	8b 81       	ldd	r24, Y+3	; 0x03
    57a8:	9c 81       	ldd	r25, Y+4	; 0x04
    57aa:	01 97       	sbiw	r24, 0x01	; 1
    57ac:	f1 f7       	brne	.-4      	; 0x57aa <main+0x10e>
    57ae:	9c 83       	std	Y+4, r25	; 0x04
    57b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57b2:	8d 81       	ldd	r24, Y+5	; 0x05
    57b4:	9e 81       	ldd	r25, Y+6	; 0x06
    57b6:	01 97       	sbiw	r24, 0x01	; 1
    57b8:	9e 83       	std	Y+6, r25	; 0x06
    57ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57bc:	8d 81       	ldd	r24, Y+5	; 0x05
    57be:	9e 81       	ldd	r25, Y+6	; 0x06
    57c0:	00 97       	sbiw	r24, 0x00	; 0
    57c2:	69 f7       	brne	.-38     	; 0x579e <main+0x102>
    57c4:	14 c0       	rjmp	.+40     	; 0x57ee <main+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57c6:	6f 81       	ldd	r22, Y+7	; 0x07
    57c8:	78 85       	ldd	r23, Y+8	; 0x08
    57ca:	89 85       	ldd	r24, Y+9	; 0x09
    57cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    57ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57d2:	dc 01       	movw	r26, r24
    57d4:	cb 01       	movw	r24, r22
    57d6:	9e 83       	std	Y+6, r25	; 0x06
    57d8:	8d 83       	std	Y+5, r24	; 0x05
    57da:	8d 81       	ldd	r24, Y+5	; 0x05
    57dc:	9e 81       	ldd	r25, Y+6	; 0x06
    57de:	9a 83       	std	Y+2, r25	; 0x02
    57e0:	89 83       	std	Y+1, r24	; 0x01
    57e2:	89 81       	ldd	r24, Y+1	; 0x01
    57e4:	9a 81       	ldd	r25, Y+2	; 0x02
    57e6:	01 97       	sbiw	r24, 0x01	; 1
    57e8:	f1 f7       	brne	.-4      	; 0x57e6 <main+0x14a>
    57ea:	9a 83       	std	Y+2, r25	; 0x02
    57ec:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);

	HCLCD_VidWriteCommand_4Bits(0x01>>4);
    57ee:	80 e0       	ldi	r24, 0x00	; 0
    57f0:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(0x01);
    57f4:	81 e0       	ldi	r24, 0x01	; 1
    57f6:	0e 94 33 14 	call	0x2866	; 0x2866 <HCLCD_VidWriteCommand_4Bits>

	//ADC init
	MADC_VidSetCallBack(ADC_SetNotification);
    57fa:	89 e5       	ldi	r24, 0x59	; 89
    57fc:	9c e2       	ldi	r25, 0x2C	; 44
    57fe:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <MADC_VidSetCallBack>
	MADC_VidADCInterruptEnable();
    5802:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <MADC_VidADCInterruptEnable>
	MADC_VidInit();
    5806:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <MADC_VidInit>
	MADC_u16ADC_StartConversion_With_Interrupt(0);
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <MADC_u16ADC_StartConversion_With_Interrupt>

	MGIE_VidEnable();
    5810:	0e 94 36 09 	call	0x126c	; 0x126c <MGIE_VidEnable>

	ADCSem = xSemaphoreCreateCounting(1,0);  // init as take Semaphore
    5814:	81 e0       	ldi	r24, 0x01	; 1
    5816:	60 e0       	ldi	r22, 0x00	; 0
    5818:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <xQueueCreateCountingSemaphore>
    581c:	90 93 2c 05 	sts	0x052C, r25
    5820:	80 93 2b 05 	sts	0x052B, r24

	xTaskCreate(APP_ADC_read ,NULL,  100,NULL,0,NULL);
    5824:	8b e6       	ldi	r24, 0x6B	; 107
    5826:	9c e2       	ldi	r25, 0x2C	; 44
    5828:	60 e0       	ldi	r22, 0x00	; 0
    582a:	70 e0       	ldi	r23, 0x00	; 0
    582c:	44 e6       	ldi	r20, 0x64	; 100
    582e:	50 e0       	ldi	r21, 0x00	; 0
    5830:	20 e0       	ldi	r18, 0x00	; 0
    5832:	30 e0       	ldi	r19, 0x00	; 0
    5834:	00 e0       	ldi	r16, 0x00	; 0
    5836:	ee 24       	eor	r14, r14
    5838:	ff 24       	eor	r15, r15
    583a:	cc 24       	eor	r12, r12
    583c:	dd 24       	eor	r13, r13
    583e:	aa 24       	eor	r10, r10
    5840:	bb 24       	eor	r11, r11
    5842:	0e 94 63 24 	call	0x48c6	; 0x48c6 <xTaskGenericCreate>
	xTaskCreate(APP_POT1_CALC,NULL,  250,NULL,1,NULL);
    5846:	82 e8       	ldi	r24, 0x82	; 130
    5848:	9d e2       	ldi	r25, 0x2D	; 45
    584a:	60 e0       	ldi	r22, 0x00	; 0
    584c:	70 e0       	ldi	r23, 0x00	; 0
    584e:	4a ef       	ldi	r20, 0xFA	; 250
    5850:	50 e0       	ldi	r21, 0x00	; 0
    5852:	20 e0       	ldi	r18, 0x00	; 0
    5854:	30 e0       	ldi	r19, 0x00	; 0
    5856:	01 e0       	ldi	r16, 0x01	; 1
    5858:	ee 24       	eor	r14, r14
    585a:	ff 24       	eor	r15, r15
    585c:	cc 24       	eor	r12, r12
    585e:	dd 24       	eor	r13, r13
    5860:	aa 24       	eor	r10, r10
    5862:	bb 24       	eor	r11, r11
    5864:	0e 94 63 24 	call	0x48c6	; 0x48c6 <xTaskGenericCreate>
	xTaskCreate(APP_LM35_CALC,NULL,  250,NULL,2,NULL);
    5868:	82 eb       	ldi	r24, 0xB2	; 178
    586a:	9d e2       	ldi	r25, 0x2D	; 45
    586c:	60 e0       	ldi	r22, 0x00	; 0
    586e:	70 e0       	ldi	r23, 0x00	; 0
    5870:	4a ef       	ldi	r20, 0xFA	; 250
    5872:	50 e0       	ldi	r21, 0x00	; 0
    5874:	20 e0       	ldi	r18, 0x00	; 0
    5876:	30 e0       	ldi	r19, 0x00	; 0
    5878:	02 e0       	ldi	r16, 0x02	; 2
    587a:	ee 24       	eor	r14, r14
    587c:	ff 24       	eor	r15, r15
    587e:	cc 24       	eor	r12, r12
    5880:	dd 24       	eor	r13, r13
    5882:	aa 24       	eor	r10, r10
    5884:	bb 24       	eor	r11, r11
    5886:	0e 94 63 24 	call	0x48c6	; 0x48c6 <xTaskGenericCreate>
	xTaskCreate(APP_LCD_Display,NULL,250,NULL,3,NULL);
    588a:	81 eb       	ldi	r24, 0xB1	; 177
    588c:	9c e2       	ldi	r25, 0x2C	; 44
    588e:	60 e0       	ldi	r22, 0x00	; 0
    5890:	70 e0       	ldi	r23, 0x00	; 0
    5892:	4a ef       	ldi	r20, 0xFA	; 250
    5894:	50 e0       	ldi	r21, 0x00	; 0
    5896:	20 e0       	ldi	r18, 0x00	; 0
    5898:	30 e0       	ldi	r19, 0x00	; 0
    589a:	03 e0       	ldi	r16, 0x03	; 3
    589c:	ee 24       	eor	r14, r14
    589e:	ff 24       	eor	r15, r15
    58a0:	cc 24       	eor	r12, r12
    58a2:	dd 24       	eor	r13, r13
    58a4:	aa 24       	eor	r10, r10
    58a6:	bb 24       	eor	r11, r11
    58a8:	0e 94 63 24 	call	0x48c6	; 0x48c6 <xTaskGenericCreate>
	vTaskStartScheduler();
    58ac:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <vTaskStartScheduler>
    58b0:	ff cf       	rjmp	.-2      	; 0x58b0 <main+0x214>

000058b2 <ADC_SetNotification>:
	return 0;
}


 void ADC_SetNotification(void)
 {
    58b2:	df 93       	push	r29
    58b4:	cf 93       	push	r28
    58b6:	cd b7       	in	r28, 0x3d	; 61
    58b8:	de b7       	in	r29, 0x3e	; 62
	 xSemaphoreGive(ADCSem);
    58ba:	80 91 2b 05 	lds	r24, 0x052B
    58be:	90 91 2c 05 	lds	r25, 0x052C
    58c2:	60 e0       	ldi	r22, 0x00	; 0
    58c4:	70 e0       	ldi	r23, 0x00	; 0
    58c6:	40 e0       	ldi	r20, 0x00	; 0
    58c8:	50 e0       	ldi	r21, 0x00	; 0
    58ca:	20 e0       	ldi	r18, 0x00	; 0
    58cc:	0e 94 8b 20 	call	0x4116	; 0x4116 <xQueueGenericSend>
 }
    58d0:	cf 91       	pop	r28
    58d2:	df 91       	pop	r29
    58d4:	08 95       	ret

000058d6 <APP_ADC_read>:
 void APP_ADC_read(void*pv)
 {
    58d6:	0f 93       	push	r16
    58d8:	1f 93       	push	r17
    58da:	df 93       	push	r29
    58dc:	cf 93       	push	r28
    58de:	00 d0       	rcall	.+0      	; 0x58e0 <APP_ADC_read+0xa>
    58e0:	0f 92       	push	r0
    58e2:	cd b7       	in	r28, 0x3d	; 61
    58e4:	de b7       	in	r29, 0x3e	; 62
    58e6:	9b 83       	std	Y+3, r25	; 0x03
    58e8:	8a 83       	std	Y+2, r24	; 0x02
	 u8 LOC_u8SemState =0;
    58ea:	19 82       	std	Y+1, r1	; 0x01

	 while(1)
	 {
		 LOC_u8SemState= xSemaphoreTake(ADCSem,5);
    58ec:	80 91 2b 05 	lds	r24, 0x052B
    58f0:	90 91 2c 05 	lds	r25, 0x052C
    58f4:	60 e0       	ldi	r22, 0x00	; 0
    58f6:	70 e0       	ldi	r23, 0x00	; 0
    58f8:	45 e0       	ldi	r20, 0x05	; 5
    58fa:	50 e0       	ldi	r21, 0x00	; 0
    58fc:	20 e0       	ldi	r18, 0x00	; 0
    58fe:	0e 94 76 21 	call	0x42ec	; 0x42ec <xQueueGenericReceive>
    5902:	89 83       	std	Y+1, r24	; 0x01
		 if(LOC_u8SemState == pdPASS)
    5904:	89 81       	ldd	r24, Y+1	; 0x01
    5906:	81 30       	cpi	r24, 0x01	; 1
    5908:	39 f5       	brne	.+78     	; 0x5958 <APP_ADC_read+0x82>
		 {

			 Digital_INPUT[Flag-6] =MADC_u16ADCRead();
    590a:	80 91 16 05 	lds	r24, 0x0516
    590e:	99 27       	eor	r25, r25
    5910:	87 fd       	sbrc	r24, 7
    5912:	90 95       	com	r25
    5914:	8c 01       	movw	r16, r24
    5916:	06 50       	subi	r16, 0x06	; 6
    5918:	10 40       	sbci	r17, 0x00	; 0
    591a:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <MADC_u16ADCRead>
    591e:	9c 01       	movw	r18, r24
    5920:	40 e0       	ldi	r20, 0x00	; 0
    5922:	50 e0       	ldi	r21, 0x00	; 0
    5924:	c8 01       	movw	r24, r16
    5926:	88 0f       	add	r24, r24
    5928:	99 1f       	adc	r25, r25
    592a:	88 0f       	add	r24, r24
    592c:	99 1f       	adc	r25, r25
    592e:	fc 01       	movw	r30, r24
    5930:	e9 5e       	subi	r30, 0xE9	; 233
    5932:	fa 4f       	sbci	r31, 0xFA	; 250
    5934:	20 83       	st	Z, r18
    5936:	31 83       	std	Z+1, r19	; 0x01
    5938:	42 83       	std	Z+2, r20	; 0x02
    593a:	53 83       	std	Z+3, r21	; 0x03
			 if(Flag==0)
    593c:	80 91 16 05 	lds	r24, 0x0516
    5940:	88 23       	and	r24, r24
    5942:	21 f4       	brne	.+8      	; 0x594c <APP_ADC_read+0x76>
			 {
				 Flag=7;
    5944:	87 e0       	ldi	r24, 0x07	; 7
    5946:	80 93 16 05 	sts	0x0516, r24
    594a:	02 c0       	rjmp	.+4      	; 0x5950 <APP_ADC_read+0x7a>
			 }
			 else
			 {
				 Flag=0;
    594c:	10 92 16 05 	sts	0x0516, r1
			 }
			 MADC_u16ADC_StartConversion_With_Interrupt(Flag);
    5950:	80 91 16 05 	lds	r24, 0x0516
    5954:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <MADC_u16ADC_StartConversion_With_Interrupt>
		 }
		 else
		 {

		 }
		 vTaskDelay(10);
    5958:	8a e0       	ldi	r24, 0x0A	; 10
    595a:	90 e0       	ldi	r25, 0x00	; 0
    595c:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <vTaskDelay>
    5960:	c5 cf       	rjmp	.-118    	; 0x58ec <APP_ADC_read+0x16>

00005962 <APP_LCD_Display>:
	 }
 }
 void APP_LCD_Display(void*pv)
 {
    5962:	df 93       	push	r29
    5964:	cf 93       	push	r28
    5966:	cd b7       	in	r28, 0x3d	; 61
    5968:	de b7       	in	r29, 0x3e	; 62
    596a:	ac 97       	sbiw	r28, 0x2c	; 44
    596c:	0f b6       	in	r0, 0x3f	; 63
    596e:	f8 94       	cli
    5970:	de bf       	out	0x3e, r29	; 62
    5972:	0f be       	out	0x3f, r0	; 63
    5974:	cd bf       	out	0x3d, r28	; 61
    5976:	98 8f       	std	Y+24, r25	; 0x18
    5978:	8f 8b       	std	Y+23, r24	; 0x17
	 u8  str3[] ="tem=";
    597a:	ce 01       	movw	r24, r28
    597c:	01 96       	adiw	r24, 0x01	; 1
    597e:	9a 8f       	std	Y+26, r25	; 0x1a
    5980:	89 8f       	std	Y+25, r24	; 0x19
    5982:	ed e6       	ldi	r30, 0x6D	; 109
    5984:	f0 e0       	ldi	r31, 0x00	; 0
    5986:	fc 8f       	std	Y+28, r31	; 0x1c
    5988:	eb 8f       	std	Y+27, r30	; 0x1b
    598a:	f5 e0       	ldi	r31, 0x05	; 5
    598c:	fd 8f       	std	Y+29, r31	; 0x1d
    598e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5990:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5992:	00 80       	ld	r0, Z
    5994:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5996:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5998:	01 96       	adiw	r24, 0x01	; 1
    599a:	9c 8f       	std	Y+28, r25	; 0x1c
    599c:	8b 8f       	std	Y+27, r24	; 0x1b
    599e:	e9 8d       	ldd	r30, Y+25	; 0x19
    59a0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    59a2:	00 82       	st	Z, r0
    59a4:	89 8d       	ldd	r24, Y+25	; 0x19
    59a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    59a8:	01 96       	adiw	r24, 0x01	; 1
    59aa:	9a 8f       	std	Y+26, r25	; 0x1a
    59ac:	89 8f       	std	Y+25, r24	; 0x19
    59ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    59b0:	91 50       	subi	r25, 0x01	; 1
    59b2:	9d 8f       	std	Y+29, r25	; 0x1d
    59b4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    59b6:	ee 23       	and	r30, r30
    59b8:	51 f7       	brne	.-44     	; 0x598e <APP_LCD_Display+0x2c>
	 u8  str4[] ="degree";
    59ba:	ce 01       	movw	r24, r28
    59bc:	06 96       	adiw	r24, 0x06	; 6
    59be:	9f 8f       	std	Y+31, r25	; 0x1f
    59c0:	8e 8f       	std	Y+30, r24	; 0x1e
    59c2:	e2 e7       	ldi	r30, 0x72	; 114
    59c4:	f0 e0       	ldi	r31, 0x00	; 0
    59c6:	f9 a3       	std	Y+33, r31	; 0x21
    59c8:	e8 a3       	std	Y+32, r30	; 0x20
    59ca:	f7 e0       	ldi	r31, 0x07	; 7
    59cc:	fa a3       	std	Y+34, r31	; 0x22
    59ce:	e8 a1       	ldd	r30, Y+32	; 0x20
    59d0:	f9 a1       	ldd	r31, Y+33	; 0x21
    59d2:	00 80       	ld	r0, Z
    59d4:	88 a1       	ldd	r24, Y+32	; 0x20
    59d6:	99 a1       	ldd	r25, Y+33	; 0x21
    59d8:	01 96       	adiw	r24, 0x01	; 1
    59da:	99 a3       	std	Y+33, r25	; 0x21
    59dc:	88 a3       	std	Y+32, r24	; 0x20
    59de:	ee 8d       	ldd	r30, Y+30	; 0x1e
    59e0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    59e2:	00 82       	st	Z, r0
    59e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    59e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    59e8:	01 96       	adiw	r24, 0x01	; 1
    59ea:	9f 8f       	std	Y+31, r25	; 0x1f
    59ec:	8e 8f       	std	Y+30, r24	; 0x1e
    59ee:	9a a1       	ldd	r25, Y+34	; 0x22
    59f0:	91 50       	subi	r25, 0x01	; 1
    59f2:	9a a3       	std	Y+34, r25	; 0x22
    59f4:	ea a1       	ldd	r30, Y+34	; 0x22
    59f6:	ee 23       	and	r30, r30
    59f8:	51 f7       	brne	.-44     	; 0x59ce <APP_LCD_Display+0x6c>
	 u8  str1[] ="Res=";
    59fa:	ce 01       	movw	r24, r28
    59fc:	0d 96       	adiw	r24, 0x0d	; 13
    59fe:	9c a3       	std	Y+36, r25	; 0x24
    5a00:	8b a3       	std	Y+35, r24	; 0x23
    5a02:	e9 e7       	ldi	r30, 0x79	; 121
    5a04:	f0 e0       	ldi	r31, 0x00	; 0
    5a06:	fe a3       	std	Y+38, r31	; 0x26
    5a08:	ed a3       	std	Y+37, r30	; 0x25
    5a0a:	f5 e0       	ldi	r31, 0x05	; 5
    5a0c:	ff a3       	std	Y+39, r31	; 0x27
    5a0e:	ed a1       	ldd	r30, Y+37	; 0x25
    5a10:	fe a1       	ldd	r31, Y+38	; 0x26
    5a12:	00 80       	ld	r0, Z
    5a14:	8d a1       	ldd	r24, Y+37	; 0x25
    5a16:	9e a1       	ldd	r25, Y+38	; 0x26
    5a18:	01 96       	adiw	r24, 0x01	; 1
    5a1a:	9e a3       	std	Y+38, r25	; 0x26
    5a1c:	8d a3       	std	Y+37, r24	; 0x25
    5a1e:	eb a1       	ldd	r30, Y+35	; 0x23
    5a20:	fc a1       	ldd	r31, Y+36	; 0x24
    5a22:	00 82       	st	Z, r0
    5a24:	8b a1       	ldd	r24, Y+35	; 0x23
    5a26:	9c a1       	ldd	r25, Y+36	; 0x24
    5a28:	01 96       	adiw	r24, 0x01	; 1
    5a2a:	9c a3       	std	Y+36, r25	; 0x24
    5a2c:	8b a3       	std	Y+35, r24	; 0x23
    5a2e:	9f a1       	ldd	r25, Y+39	; 0x27
    5a30:	91 50       	subi	r25, 0x01	; 1
    5a32:	9f a3       	std	Y+39, r25	; 0x27
    5a34:	ef a1       	ldd	r30, Y+39	; 0x27
    5a36:	ee 23       	and	r30, r30
    5a38:	51 f7       	brne	.-44     	; 0x5a0e <APP_LCD_Display+0xac>
	 u8  str2[] ="_--_";
    5a3a:	ce 01       	movw	r24, r28
    5a3c:	42 96       	adiw	r24, 0x12	; 18
    5a3e:	99 a7       	std	Y+41, r25	; 0x29
    5a40:	88 a7       	std	Y+40, r24	; 0x28
    5a42:	ee e7       	ldi	r30, 0x7E	; 126
    5a44:	f0 e0       	ldi	r31, 0x00	; 0
    5a46:	fb a7       	std	Y+43, r31	; 0x2b
    5a48:	ea a7       	std	Y+42, r30	; 0x2a
    5a4a:	f5 e0       	ldi	r31, 0x05	; 5
    5a4c:	fc a7       	std	Y+44, r31	; 0x2c
    5a4e:	ea a5       	ldd	r30, Y+42	; 0x2a
    5a50:	fb a5       	ldd	r31, Y+43	; 0x2b
    5a52:	00 80       	ld	r0, Z
    5a54:	8a a5       	ldd	r24, Y+42	; 0x2a
    5a56:	9b a5       	ldd	r25, Y+43	; 0x2b
    5a58:	01 96       	adiw	r24, 0x01	; 1
    5a5a:	9b a7       	std	Y+43, r25	; 0x2b
    5a5c:	8a a7       	std	Y+42, r24	; 0x2a
    5a5e:	e8 a5       	ldd	r30, Y+40	; 0x28
    5a60:	f9 a5       	ldd	r31, Y+41	; 0x29
    5a62:	00 82       	st	Z, r0
    5a64:	88 a5       	ldd	r24, Y+40	; 0x28
    5a66:	99 a5       	ldd	r25, Y+41	; 0x29
    5a68:	01 96       	adiw	r24, 0x01	; 1
    5a6a:	99 a7       	std	Y+41, r25	; 0x29
    5a6c:	88 a7       	std	Y+40, r24	; 0x28
    5a6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a70:	91 50       	subi	r25, 0x01	; 1
    5a72:	9c a7       	std	Y+44, r25	; 0x2c
    5a74:	ec a5       	ldd	r30, Y+44	; 0x2c
    5a76:	ee 23       	and	r30, r30
    5a78:	51 f7       	brne	.-44     	; 0x5a4e <APP_LCD_Display+0xec>
	 HCLCD_VidSetPosition_4BitsMode(1,0);
    5a7a:	81 e0       	ldi	r24, 0x01	; 1
    5a7c:	60 e0       	ldi	r22, 0x00	; 0
    5a7e:	0e 94 33 18 	call	0x3066	; 0x3066 <HCLCD_VidSetPosition_4BitsMode>
	 HCLCD_VidWriteString_4Bits(str1);
    5a82:	ce 01       	movw	r24, r28
    5a84:	0d 96       	adiw	r24, 0x0d	; 13
    5a86:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HCLCD_VidWriteString_4Bits>
	 HCLCD_VidSetPosition_4BitsMode(1,9);
    5a8a:	81 e0       	ldi	r24, 0x01	; 1
    5a8c:	69 e0       	ldi	r22, 0x09	; 9
    5a8e:	0e 94 33 18 	call	0x3066	; 0x3066 <HCLCD_VidSetPosition_4BitsMode>
	 HCLCD_VidWriteString_4Bits(str2);
    5a92:	ce 01       	movw	r24, r28
    5a94:	42 96       	adiw	r24, 0x12	; 18
    5a96:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HCLCD_VidWriteString_4Bits>
	 HCLCD_VidSetPosition_4BitsMode(2,0);
    5a9a:	82 e0       	ldi	r24, 0x02	; 2
    5a9c:	60 e0       	ldi	r22, 0x00	; 0
    5a9e:	0e 94 33 18 	call	0x3066	; 0x3066 <HCLCD_VidSetPosition_4BitsMode>
	 HCLCD_VidWriteString_4Bits(str3);
    5aa2:	ce 01       	movw	r24, r28
    5aa4:	01 96       	adiw	r24, 0x01	; 1
    5aa6:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HCLCD_VidWriteString_4Bits>
	 HCLCD_VidSetPosition_4BitsMode(2,9);
    5aaa:	82 e0       	ldi	r24, 0x02	; 2
    5aac:	69 e0       	ldi	r22, 0x09	; 9
    5aae:	0e 94 33 18 	call	0x3066	; 0x3066 <HCLCD_VidSetPosition_4BitsMode>
     HCLCD_VidWriteString_4Bits(str4);
    5ab2:	ce 01       	movw	r24, r28
    5ab4:	06 96       	adiw	r24, 0x06	; 6
    5ab6:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HCLCD_VidWriteString_4Bits>


	 while(1)
	 {

		 HCLCD_VidSetPosition_4BitsMode(2,4);
    5aba:	82 e0       	ldi	r24, 0x02	; 2
    5abc:	64 e0       	ldi	r22, 0x04	; 4
    5abe:	0e 94 33 18 	call	0x3066	; 0x3066 <HCLCD_VidSetPosition_4BitsMode>
		 HCLCD_VidWriteNumber_4Bits(Analog_OUT[1]);
    5ac2:	80 91 23 05 	lds	r24, 0x0523
    5ac6:	90 91 24 05 	lds	r25, 0x0524
    5aca:	a0 91 25 05 	lds	r26, 0x0525
    5ace:	b0 91 26 05 	lds	r27, 0x0526
    5ad2:	bc 01       	movw	r22, r24
    5ad4:	cd 01       	movw	r24, r26
    5ad6:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <HCLCD_VidWriteNumber_4Bits>
		 HCLCD_VidSetPosition_4BitsMode(1,4);
    5ada:	81 e0       	ldi	r24, 0x01	; 1
    5adc:	64 e0       	ldi	r22, 0x04	; 4
    5ade:	0e 94 33 18 	call	0x3066	; 0x3066 <HCLCD_VidSetPosition_4BitsMode>
		 HCLCD_VidWriteNumber_4Bits(Analog_OUT[0]);
    5ae2:	80 91 1f 05 	lds	r24, 0x051F
    5ae6:	90 91 20 05 	lds	r25, 0x0520
    5aea:	a0 91 21 05 	lds	r26, 0x0521
    5aee:	b0 91 22 05 	lds	r27, 0x0522
    5af2:	bc 01       	movw	r22, r24
    5af4:	cd 01       	movw	r24, r26
    5af6:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <HCLCD_VidWriteNumber_4Bits>

		 vTaskDelay(100);
    5afa:	84 e6       	ldi	r24, 0x64	; 100
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <vTaskDelay>
    5b02:	db cf       	rjmp	.-74     	; 0x5aba <APP_LCD_Display+0x158>

00005b04 <APP_POT1_CALC>:
	 }
 }

  void APP_POT1_CALC(void*pv)
  {
    5b04:	df 93       	push	r29
    5b06:	cf 93       	push	r28
    5b08:	00 d0       	rcall	.+0      	; 0x5b0a <APP_POT1_CALC+0x6>
    5b0a:	cd b7       	in	r28, 0x3d	; 61
    5b0c:	de b7       	in	r29, 0x3e	; 62
    5b0e:	9a 83       	std	Y+2, r25	; 0x02
    5b10:	89 83       	std	Y+1, r24	; 0x01
	  while(1)
	  	 {
		  Analog_OUT[0] = (( Digital_INPUT[0]*10000)/ 1023);
    5b12:	80 91 17 05 	lds	r24, 0x0517
    5b16:	90 91 18 05 	lds	r25, 0x0518
    5b1a:	a0 91 19 05 	lds	r26, 0x0519
    5b1e:	b0 91 1a 05 	lds	r27, 0x051A
    5b22:	20 e1       	ldi	r18, 0x10	; 16
    5b24:	37 e2       	ldi	r19, 0x27	; 39
    5b26:	40 e0       	ldi	r20, 0x00	; 0
    5b28:	50 e0       	ldi	r21, 0x00	; 0
    5b2a:	bc 01       	movw	r22, r24
    5b2c:	cd 01       	movw	r24, r26
    5b2e:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <__mulsi3>
    5b32:	dc 01       	movw	r26, r24
    5b34:	cb 01       	movw	r24, r22
    5b36:	2f ef       	ldi	r18, 0xFF	; 255
    5b38:	33 e0       	ldi	r19, 0x03	; 3
    5b3a:	40 e0       	ldi	r20, 0x00	; 0
    5b3c:	50 e0       	ldi	r21, 0x00	; 0
    5b3e:	bc 01       	movw	r22, r24
    5b40:	cd 01       	movw	r24, r26
    5b42:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__udivmodsi4>
    5b46:	da 01       	movw	r26, r20
    5b48:	c9 01       	movw	r24, r18
    5b4a:	80 93 1f 05 	sts	0x051F, r24
    5b4e:	90 93 20 05 	sts	0x0520, r25
    5b52:	a0 93 21 05 	sts	0x0521, r26
    5b56:	b0 93 22 05 	sts	0x0522, r27
	  	  vTaskDelay(11);
    5b5a:	8b e0       	ldi	r24, 0x0B	; 11
    5b5c:	90 e0       	ldi	r25, 0x00	; 0
    5b5e:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <vTaskDelay>
    5b62:	d7 cf       	rjmp	.-82     	; 0x5b12 <APP_POT1_CALC+0xe>

00005b64 <APP_LM35_CALC>:

  }


  void APP_LM35_CALC(void*pv)
  {
    5b64:	df 93       	push	r29
    5b66:	cf 93       	push	r28
    5b68:	00 d0       	rcall	.+0      	; 0x5b6a <APP_LM35_CALC+0x6>
    5b6a:	cd b7       	in	r28, 0x3d	; 61
    5b6c:	de b7       	in	r29, 0x3e	; 62
    5b6e:	9a 83       	std	Y+2, r25	; 0x02
    5b70:	89 83       	std	Y+1, r24	; 0x01
	  while(1)
	  	  	 {
	  		  Analog_OUT[1] = (( Digital_INPUT[1] *5000UL)/1024);
    5b72:	80 91 1b 05 	lds	r24, 0x051B
    5b76:	90 91 1c 05 	lds	r25, 0x051C
    5b7a:	a0 91 1d 05 	lds	r26, 0x051D
    5b7e:	b0 91 1e 05 	lds	r27, 0x051E
    5b82:	28 e8       	ldi	r18, 0x88	; 136
    5b84:	33 e1       	ldi	r19, 0x13	; 19
    5b86:	40 e0       	ldi	r20, 0x00	; 0
    5b88:	50 e0       	ldi	r21, 0x00	; 0
    5b8a:	bc 01       	movw	r22, r24
    5b8c:	cd 01       	movw	r24, r26
    5b8e:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <__mulsi3>
    5b92:	dc 01       	movw	r26, r24
    5b94:	cb 01       	movw	r24, r22
    5b96:	07 2e       	mov	r0, r23
    5b98:	7a e0       	ldi	r23, 0x0A	; 10
    5b9a:	b6 95       	lsr	r27
    5b9c:	a7 95       	ror	r26
    5b9e:	97 95       	ror	r25
    5ba0:	87 95       	ror	r24
    5ba2:	7a 95       	dec	r23
    5ba4:	d1 f7       	brne	.-12     	; 0x5b9a <APP_LM35_CALC+0x36>
    5ba6:	70 2d       	mov	r23, r0
    5ba8:	80 93 23 05 	sts	0x0523, r24
    5bac:	90 93 24 05 	sts	0x0524, r25
    5bb0:	a0 93 25 05 	sts	0x0525, r26
    5bb4:	b0 93 26 05 	sts	0x0526, r27
	  		 Analog_OUT[1] =Analog_OUT[1]/10;
    5bb8:	80 91 23 05 	lds	r24, 0x0523
    5bbc:	90 91 24 05 	lds	r25, 0x0524
    5bc0:	a0 91 25 05 	lds	r26, 0x0525
    5bc4:	b0 91 26 05 	lds	r27, 0x0526
    5bc8:	2a e0       	ldi	r18, 0x0A	; 10
    5bca:	30 e0       	ldi	r19, 0x00	; 0
    5bcc:	40 e0       	ldi	r20, 0x00	; 0
    5bce:	50 e0       	ldi	r21, 0x00	; 0
    5bd0:	bc 01       	movw	r22, r24
    5bd2:	cd 01       	movw	r24, r26
    5bd4:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__udivmodsi4>
    5bd8:	da 01       	movw	r26, r20
    5bda:	c9 01       	movw	r24, r18
    5bdc:	80 93 23 05 	sts	0x0523, r24
    5be0:	90 93 24 05 	sts	0x0524, r25
    5be4:	a0 93 25 05 	sts	0x0525, r26
    5be8:	b0 93 26 05 	sts	0x0526, r27
	  	  	  vTaskDelay(11);
    5bec:	8b e0       	ldi	r24, 0x0B	; 11
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <vTaskDelay>
    5bf4:	be cf       	rjmp	.-132    	; 0x5b72 <APP_LM35_CALC+0xe>

00005bf6 <__mulsi3>:
    5bf6:	62 9f       	mul	r22, r18
    5bf8:	d0 01       	movw	r26, r0
    5bfa:	73 9f       	mul	r23, r19
    5bfc:	f0 01       	movw	r30, r0
    5bfe:	82 9f       	mul	r24, r18
    5c00:	e0 0d       	add	r30, r0
    5c02:	f1 1d       	adc	r31, r1
    5c04:	64 9f       	mul	r22, r20
    5c06:	e0 0d       	add	r30, r0
    5c08:	f1 1d       	adc	r31, r1
    5c0a:	92 9f       	mul	r25, r18
    5c0c:	f0 0d       	add	r31, r0
    5c0e:	83 9f       	mul	r24, r19
    5c10:	f0 0d       	add	r31, r0
    5c12:	74 9f       	mul	r23, r20
    5c14:	f0 0d       	add	r31, r0
    5c16:	65 9f       	mul	r22, r21
    5c18:	f0 0d       	add	r31, r0
    5c1a:	99 27       	eor	r25, r25
    5c1c:	72 9f       	mul	r23, r18
    5c1e:	b0 0d       	add	r27, r0
    5c20:	e1 1d       	adc	r30, r1
    5c22:	f9 1f       	adc	r31, r25
    5c24:	63 9f       	mul	r22, r19
    5c26:	b0 0d       	add	r27, r0
    5c28:	e1 1d       	adc	r30, r1
    5c2a:	f9 1f       	adc	r31, r25
    5c2c:	bd 01       	movw	r22, r26
    5c2e:	cf 01       	movw	r24, r30
    5c30:	11 24       	eor	r1, r1
    5c32:	08 95       	ret

00005c34 <__udivmodsi4>:
    5c34:	a1 e2       	ldi	r26, 0x21	; 33
    5c36:	1a 2e       	mov	r1, r26
    5c38:	aa 1b       	sub	r26, r26
    5c3a:	bb 1b       	sub	r27, r27
    5c3c:	fd 01       	movw	r30, r26
    5c3e:	0d c0       	rjmp	.+26     	; 0x5c5a <__udivmodsi4_ep>

00005c40 <__udivmodsi4_loop>:
    5c40:	aa 1f       	adc	r26, r26
    5c42:	bb 1f       	adc	r27, r27
    5c44:	ee 1f       	adc	r30, r30
    5c46:	ff 1f       	adc	r31, r31
    5c48:	a2 17       	cp	r26, r18
    5c4a:	b3 07       	cpc	r27, r19
    5c4c:	e4 07       	cpc	r30, r20
    5c4e:	f5 07       	cpc	r31, r21
    5c50:	20 f0       	brcs	.+8      	; 0x5c5a <__udivmodsi4_ep>
    5c52:	a2 1b       	sub	r26, r18
    5c54:	b3 0b       	sbc	r27, r19
    5c56:	e4 0b       	sbc	r30, r20
    5c58:	f5 0b       	sbc	r31, r21

00005c5a <__udivmodsi4_ep>:
    5c5a:	66 1f       	adc	r22, r22
    5c5c:	77 1f       	adc	r23, r23
    5c5e:	88 1f       	adc	r24, r24
    5c60:	99 1f       	adc	r25, r25
    5c62:	1a 94       	dec	r1
    5c64:	69 f7       	brne	.-38     	; 0x5c40 <__udivmodsi4_loop>
    5c66:	60 95       	com	r22
    5c68:	70 95       	com	r23
    5c6a:	80 95       	com	r24
    5c6c:	90 95       	com	r25
    5c6e:	9b 01       	movw	r18, r22
    5c70:	ac 01       	movw	r20, r24
    5c72:	bd 01       	movw	r22, r26
    5c74:	cf 01       	movw	r24, r30
    5c76:	08 95       	ret

00005c78 <__prologue_saves__>:
    5c78:	2f 92       	push	r2
    5c7a:	3f 92       	push	r3
    5c7c:	4f 92       	push	r4
    5c7e:	5f 92       	push	r5
    5c80:	6f 92       	push	r6
    5c82:	7f 92       	push	r7
    5c84:	8f 92       	push	r8
    5c86:	9f 92       	push	r9
    5c88:	af 92       	push	r10
    5c8a:	bf 92       	push	r11
    5c8c:	cf 92       	push	r12
    5c8e:	df 92       	push	r13
    5c90:	ef 92       	push	r14
    5c92:	ff 92       	push	r15
    5c94:	0f 93       	push	r16
    5c96:	1f 93       	push	r17
    5c98:	cf 93       	push	r28
    5c9a:	df 93       	push	r29
    5c9c:	cd b7       	in	r28, 0x3d	; 61
    5c9e:	de b7       	in	r29, 0x3e	; 62
    5ca0:	ca 1b       	sub	r28, r26
    5ca2:	db 0b       	sbc	r29, r27
    5ca4:	0f b6       	in	r0, 0x3f	; 63
    5ca6:	f8 94       	cli
    5ca8:	de bf       	out	0x3e, r29	; 62
    5caa:	0f be       	out	0x3f, r0	; 63
    5cac:	cd bf       	out	0x3d, r28	; 61
    5cae:	09 94       	ijmp

00005cb0 <__epilogue_restores__>:
    5cb0:	2a 88       	ldd	r2, Y+18	; 0x12
    5cb2:	39 88       	ldd	r3, Y+17	; 0x11
    5cb4:	48 88       	ldd	r4, Y+16	; 0x10
    5cb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    5cb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    5cba:	7d 84       	ldd	r7, Y+13	; 0x0d
    5cbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    5cbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    5cc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    5cc2:	b9 84       	ldd	r11, Y+9	; 0x09
    5cc4:	c8 84       	ldd	r12, Y+8	; 0x08
    5cc6:	df 80       	ldd	r13, Y+7	; 0x07
    5cc8:	ee 80       	ldd	r14, Y+6	; 0x06
    5cca:	fd 80       	ldd	r15, Y+5	; 0x05
    5ccc:	0c 81       	ldd	r16, Y+4	; 0x04
    5cce:	1b 81       	ldd	r17, Y+3	; 0x03
    5cd0:	aa 81       	ldd	r26, Y+2	; 0x02
    5cd2:	b9 81       	ldd	r27, Y+1	; 0x01
    5cd4:	ce 0f       	add	r28, r30
    5cd6:	d1 1d       	adc	r29, r1
    5cd8:	0f b6       	in	r0, 0x3f	; 63
    5cda:	f8 94       	cli
    5cdc:	de bf       	out	0x3e, r29	; 62
    5cde:	0f be       	out	0x3f, r0	; 63
    5ce0:	cd bf       	out	0x3d, r28	; 61
    5ce2:	ed 01       	movw	r28, r26
    5ce4:	08 95       	ret

00005ce6 <memcpy>:
    5ce6:	fb 01       	movw	r30, r22
    5ce8:	dc 01       	movw	r26, r24
    5cea:	02 c0       	rjmp	.+4      	; 0x5cf0 <memcpy+0xa>
    5cec:	01 90       	ld	r0, Z+
    5cee:	0d 92       	st	X+, r0
    5cf0:	41 50       	subi	r20, 0x01	; 1
    5cf2:	50 40       	sbci	r21, 0x00	; 0
    5cf4:	d8 f7       	brcc	.-10     	; 0x5cec <memcpy+0x6>
    5cf6:	08 95       	ret

00005cf8 <memset>:
    5cf8:	dc 01       	movw	r26, r24
    5cfa:	01 c0       	rjmp	.+2      	; 0x5cfe <memset+0x6>
    5cfc:	6d 93       	st	X+, r22
    5cfe:	41 50       	subi	r20, 0x01	; 1
    5d00:	50 40       	sbci	r21, 0x00	; 0
    5d02:	e0 f7       	brcc	.-8      	; 0x5cfc <memset+0x4>
    5d04:	08 95       	ret

00005d06 <strncpy>:
    5d06:	fb 01       	movw	r30, r22
    5d08:	dc 01       	movw	r26, r24
    5d0a:	41 50       	subi	r20, 0x01	; 1
    5d0c:	50 40       	sbci	r21, 0x00	; 0
    5d0e:	48 f0       	brcs	.+18     	; 0x5d22 <strncpy+0x1c>
    5d10:	01 90       	ld	r0, Z+
    5d12:	0d 92       	st	X+, r0
    5d14:	00 20       	and	r0, r0
    5d16:	c9 f7       	brne	.-14     	; 0x5d0a <strncpy+0x4>
    5d18:	01 c0       	rjmp	.+2      	; 0x5d1c <strncpy+0x16>
    5d1a:	1d 92       	st	X+, r1
    5d1c:	41 50       	subi	r20, 0x01	; 1
    5d1e:	50 40       	sbci	r21, 0x00	; 0
    5d20:	e0 f7       	brcc	.-8      	; 0x5d1a <strncpy+0x14>
    5d22:	08 95       	ret

00005d24 <_exit>:
    5d24:	f8 94       	cli

00005d26 <__stop_program>:
    5d26:	ff cf       	rjmp	.-2      	; 0x5d26 <__stop_program>
